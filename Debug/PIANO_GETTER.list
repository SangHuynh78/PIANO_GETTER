
PIANO_GETTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029ec  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08002bd0  08002bd0  00003bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  00004060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002db8  08002db8  00003db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dc0  08002dc0  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc0  08002dc0  00003dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dc4  08002dc4  00003dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002dc8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000317c  20000060  08002e28  00004060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200031dc  08002e28  000041dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058f9  00000000  00000000  00004089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d3  00000000  00000000  00009982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0000b158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005de  00000000  00000000  0000b960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003707  00000000  00000000  0000bf3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007050  00000000  00000000  0000f645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00072324  00000000  00000000  00016695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000889b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000253c  00000000  00000000  000889fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0008af38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000060 	.word	0x20000060
 8000200:	00000000 	.word	0x00000000
 8000204:	08002bb8 	.word	0x08002bb8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000064 	.word	0x20000064
 8000220:	08002bb8 	.word	0x08002bb8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f003 0307 	and.w	r3, r3, #7
 8000242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000244:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <__NVIC_SetPriorityGrouping+0x44>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800024a:	68ba      	ldr	r2, [r7, #8]
 800024c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000250:	4013      	ands	r3, r2
 8000252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800025c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000266:	4a04      	ldr	r2, [pc, #16]	@ (8000278 <__NVIC_SetPriorityGrouping+0x44>)
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	60d3      	str	r3, [r2, #12]
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <__NVIC_GetPriorityGrouping+0x18>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	0a1b      	lsrs	r3, r3, #8
 8000286:	f003 0307 	and.w	r3, r3, #7
}
 800028a:	4618      	mov	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	db0b      	blt.n	80002c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f003 021f 	and.w	r2, r3, #31
 80002b0:	4906      	ldr	r1, [pc, #24]	@ (80002cc <__NVIC_EnableIRQ+0x34>)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	095b      	lsrs	r3, r3, #5
 80002b8:	2001      	movs	r0, #1
 80002ba:	fa00 f202 	lsl.w	r2, r0, r2
 80002be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	e000e100 	.word	0xe000e100

080002d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	6039      	str	r1, [r7, #0]
 80002da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	db0a      	blt.n	80002fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	490c      	ldr	r1, [pc, #48]	@ (800031c <__NVIC_SetPriority+0x4c>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f8:	e00a      	b.n	8000310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4908      	ldr	r1, [pc, #32]	@ (8000320 <__NVIC_SetPriority+0x50>)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f003 030f 	and.w	r3, r3, #15
 8000306:	3b04      	subs	r3, #4
 8000308:	0112      	lsls	r2, r2, #4
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	440b      	add	r3, r1
 800030e:	761a      	strb	r2, [r3, #24]
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000e100 	.word	0xe000e100
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000324:	b480      	push	{r7}
 8000326:	b089      	sub	sp, #36	@ 0x24
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f003 0307 	and.w	r3, r3, #7
 8000336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	f1c3 0307 	rsb	r3, r3, #7
 800033e:	2b04      	cmp	r3, #4
 8000340:	bf28      	it	cs
 8000342:	2304      	movcs	r3, #4
 8000344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3304      	adds	r3, #4
 800034a:	2b06      	cmp	r3, #6
 800034c:	d902      	bls.n	8000354 <NVIC_EncodePriority+0x30>
 800034e:	69fb      	ldr	r3, [r7, #28]
 8000350:	3b03      	subs	r3, #3
 8000352:	e000      	b.n	8000356 <NVIC_EncodePriority+0x32>
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	f04f 32ff 	mov.w	r2, #4294967295
 800035c:	69bb      	ldr	r3, [r7, #24]
 800035e:	fa02 f303 	lsl.w	r3, r2, r3
 8000362:	43da      	mvns	r2, r3
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	401a      	ands	r2, r3
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800036c:	f04f 31ff 	mov.w	r1, #4294967295
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	43d9      	mvns	r1, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800037c:	4313      	orrs	r3, r2
         );
}
 800037e:	4618      	mov	r0, r3
 8000380:	3724      	adds	r7, #36	@ 0x24
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800038c:	4b04      	ldr	r3, [pc, #16]	@ (80003a0 <LL_RCC_HSI_Enable+0x18>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a03      	ldr	r2, [pc, #12]	@ (80003a0 <LL_RCC_HSI_Enable+0x18>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6013      	str	r3, [r2, #0]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000

080003a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <LL_RCC_HSI_IsReady+0x20>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f003 0302 	and.w	r3, r3, #2
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	bf0c      	ite	eq
 80003b4:	2301      	moveq	r3, #1
 80003b6:	2300      	movne	r3, #0
 80003b8:	b2db      	uxtb	r3, r3
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80003d0:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	00db      	lsls	r3, r3, #3
 80003dc:	4903      	ldr	r1, [pc, #12]	@ (80003ec <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80003de:	4313      	orrs	r3, r2
 80003e0:	600b      	str	r3, [r1, #0]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000

080003f0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003f8:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <LL_RCC_SetSysClkSource+0x24>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	f023 0203 	bic.w	r2, r3, #3
 8000400:	4904      	ldr	r1, [pc, #16]	@ (8000414 <LL_RCC_SetSysClkSource+0x24>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4313      	orrs	r3, r2
 8000406:	604b      	str	r3, [r1, #4]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800041c:	4b03      	ldr	r3, [pc, #12]	@ (800042c <LL_RCC_GetSysClkSource+0x14>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	f003 030c 	and.w	r3, r3, #12
}
 8000424:	4618      	mov	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000

08000430 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <LL_RCC_SetAHBPrescaler+0x24>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000440:	4904      	ldr	r1, [pc, #16]	@ (8000454 <LL_RCC_SetAHBPrescaler+0x24>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4313      	orrs	r3, r2
 8000446:	604b      	str	r3, [r1, #4]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000

08000458 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000468:	4904      	ldr	r1, [pc, #16]	@ (800047c <LL_RCC_SetAPB1Prescaler+0x24>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4313      	orrs	r3, r2
 800046e:	604b      	str	r3, [r1, #4]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000490:	4904      	ldr	r1, [pc, #16]	@ (80004a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4313      	orrs	r3, r2
 8000496:	604b      	str	r3, [r1, #4]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <LL_RCC_PLL_Enable+0x18>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a03      	ldr	r2, [pc, #12]	@ (80004c0 <LL_RCC_PLL_Enable+0x18>)
 80004b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004b6:	6013      	str	r3, [r2, #0]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000

080004c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <LL_RCC_PLL_IsReady+0x20>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80004d4:	bf0c      	ite	eq
 80004d6:	2301      	moveq	r3, #1
 80004d8:	2300      	movne	r3, #0
 80004da:	b2db      	uxtb	r3, r3
}
 80004dc:	4618      	mov	r0, r3
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80004f2:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	430b      	orrs	r3, r1
 8000504:	4903      	ldr	r1, [pc, #12]	@ (8000514 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000506:	4313      	orrs	r3, r2
 8000508:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000

08000518 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000522:	69da      	ldr	r2, [r3, #28]
 8000524:	4907      	ldr	r1, [pc, #28]	@ (8000544 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <LL_APB1_GRP1_EnableClock+0x2c>)
 800052e:	69da      	ldr	r2, [r3, #28]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4013      	ands	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000550:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000552:	699a      	ldr	r2, [r3, #24]
 8000554:	4907      	ldr	r1, [pc, #28]	@ (8000574 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4313      	orrs	r3, r2
 800055a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <LL_APB2_GRP1_EnableClock+0x2c>)
 800055e:	699a      	ldr	r2, [r3, #24]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <LL_FLASH_SetLatency+0x24>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f023 0207 	bic.w	r2, r3, #7
 8000588:	4904      	ldr	r1, [pc, #16]	@ (800059c <LL_FLASH_SetLatency+0x24>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4313      	orrs	r3, r2
 800058e:	600b      	str	r3, [r1, #0]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40022000 	.word	0x40022000

080005a0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005a4:	4b03      	ldr	r3, [pc, #12]	@ (80005b4 <LL_FLASH_GetLatency+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 0307 	and.w	r3, r3, #7
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40022000 	.word	0x40022000

080005b8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f043 0201 	orr.w	r2, r3, #1
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	601a      	str	r2, [r3, #0]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000642:	f023 0307 	bic.w	r3, r3, #7
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	431a      	orrs	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	609a      	str	r2, [r3, #8]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	431a      	orrs	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	605a      	str	r2, [r3, #4]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	609a      	str	r2, [r3, #8]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f06f 0201 	mvn.w	r2, #1
 80006a8:	611a      	str	r2, [r3, #16]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	691b      	ldr	r3, [r3, #16]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d101      	bne.n	80006cc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f043 0201 	orr.w	r2, r3, #1
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	60da      	str	r2, [r3, #12]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60da      	str	r2, [r3, #12]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	691b      	ldr	r3, [r3, #16]
 8000720:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	615a      	str	r2, [r3, #20]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074e:	2b80      	cmp	r3, #128	@ 0x80
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800076e:	78fa      	ldrb	r2, [r7, #3]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	605a      	str	r2, [r3, #4]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	43da      	mvns	r2, r3
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	4013      	ands	r3, r2
 8000794:	b29b      	uxth	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	bf0c      	ite	eq
 800079a:	2301      	moveq	r3, #1
 800079c:	2300      	movne	r3, #0
 800079e:	b2db      	uxtb	r3, r3
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	611a      	str	r2, [r3, #16]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	615a      	str	r2, [r3, #20]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b085      	sub	sp, #20
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4013      	ands	r3, r2
 8000804:	041a      	lsls	r2, r3, #16
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	43d9      	mvns	r1, r3
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	400b      	ands	r3, r1
 800080e:	431a      	orrs	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	611a      	str	r2, [r3, #16]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
	...

08000820 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800082c:	4a03      	ldr	r2, [pc, #12]	@ (800083c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800082e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000832:	6053      	str	r3, [r2, #4]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	40010000 	.word	0x40010000

08000840 <UART_Transmit_Flash>:
volatile uint32_t timer_count = 0;
static uint32_t flash_addr = 0;
static uint32_t led_toggle_count = 0;


void UART_Transmit_Flash(uint32_t start_addr, uint32_t len) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b09e      	sub	sp, #120	@ 0x78
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
    uint8_t buffer[UART_CHUNK_SIZE];
    uint32_t remaining = len - (flash_addr - start_addr);
 800084a:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <UART_Transmit_Flash+0x80>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t chunk = (remaining > UART_CHUNK_SIZE) ? UART_CHUNK_SIZE : remaining;
 8000858:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800085a:	2b64      	cmp	r3, #100	@ 0x64
 800085c:	bf28      	it	cs
 800085e:	2364      	movcs	r3, #100	@ 0x64
 8000860:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (chunk > 0) {
 8000862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000864:	2b00      	cmp	r3, #0
 8000866:	d027      	beq.n	80008b8 <UART_Transmit_Flash+0x78>
        GD25Q16E_Read(&flash, flash_addr, buffer, chunk);
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <UART_Transmit_Flash+0x80>)
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	f107 0208 	add.w	r2, r7, #8
 8000870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000872:	4814      	ldr	r0, [pc, #80]	@ (80008c4 <UART_Transmit_Flash+0x84>)
 8000874:	f000 fe83 	bl	800157e <GD25Q16E_Read>
        for (uint32_t i = 0; i < chunk; i++) {
 8000878:	2300      	movs	r3, #0
 800087a:	677b      	str	r3, [r7, #116]	@ 0x74
 800087c:	e012      	b.n	80008a4 <UART_Transmit_Flash+0x64>
            while (!LL_USART_IsActiveFlag_TXE(USART1));
 800087e:	bf00      	nop
 8000880:	4811      	ldr	r0, [pc, #68]	@ (80008c8 <UART_Transmit_Flash+0x88>)
 8000882:	f7ff ff5c 	bl	800073e <LL_USART_IsActiveFlag_TXE>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0f9      	beq.n	8000880 <UART_Transmit_Flash+0x40>
            LL_USART_TransmitData8(USART1, buffer[i]);
 800088c:	f107 0208 	add.w	r2, r7, #8
 8000890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000892:	4413      	add	r3, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <UART_Transmit_Flash+0x88>)
 800089a:	f7ff ff62 	bl	8000762 <LL_USART_TransmitData8>
        for (uint32_t i = 0; i < chunk; i++) {
 800089e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80008a0:	3301      	adds	r3, #1
 80008a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80008a4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80008a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d3e8      	bcc.n	800087e <UART_Transmit_Flash+0x3e>
        }
        flash_addr += chunk;
 80008ac:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <UART_Transmit_Flash+0x80>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008b2:	4413      	add	r3, r2
 80008b4:	4a02      	ldr	r2, [pc, #8]	@ (80008c0 <UART_Transmit_Flash+0x80>)
 80008b6:	6013      	str	r3, [r2, #0]
    }
}
 80008b8:	bf00      	nop
 80008ba:	3778      	adds	r7, #120	@ 0x78
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000a4 	.word	0x200000a4
 80008c4:	20000000 	.word	0x20000000
 80008c8:	40013800 	.word	0x40013800

080008cc <EraseAllFlash>:

void EraseAllFlash(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
    for (uint32_t addr = 0x000000; addr <= FLASH_END_ADDR; addr += 4096) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	e00e      	b.n	80008f6 <EraseAllFlash+0x2a>
        GD25Q16E_EraseSector(&flash, addr);
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <EraseAllFlash+0x3c>)
 80008dc:	f000 fecf 	bl	800167e <GD25Q16E_EraseSector>
        // Chớp LED đỏ
        LL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80008e0:	490a      	ldr	r1, [pc, #40]	@ (800090c <EraseAllFlash+0x40>)
 80008e2:	480b      	ldr	r0, [pc, #44]	@ (8000910 <EraseAllFlash+0x44>)
 80008e4:	f7ff ff7f 	bl	80007e6 <LL_GPIO_TogglePin>
        LL_mDelay(20);
 80008e8:	2014      	movs	r0, #20
 80008ea:	f001 fc6f 	bl	80021cc <LL_mDelay>
    for (uint32_t addr = 0x000000; addr <= FLASH_END_ADDR; addr += 4096) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f5b3 2f7c 	cmp.w	r3, #1032192	@ 0xfc000
 80008fc:	d3ec      	bcc.n	80008d8 <EraseAllFlash+0xc>
    }
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	04020002 	.word	0x04020002
 8000910:	40011000 	.word	0x40011000

08000914 <Timer2_10ms_handle>:

void Timer2_10ms_handle(void) {
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 800091a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800091e:	f7ff fec9 	bl	80006b4 <LL_TIM_IsActiveFlag_UPDATE>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 8205 	beq.w	8000d34 <Timer2_10ms_handle+0x420>
        LL_TIM_ClearFlag_UPDATE(TIM2);
 800092a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800092e:	f7ff feb4 	bl	800069a <LL_TIM_ClearFlag_UPDATE>
        timer_count++;
 8000932:	4b7c      	ldr	r3, [pc, #496]	@ (8000b24 <Timer2_10ms_handle+0x210>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	4a7a      	ldr	r2, [pc, #488]	@ (8000b24 <Timer2_10ms_handle+0x210>)
 800093a:	6013      	str	r3, [r2, #0]
        led_toggle_count++;
 800093c:	4b7a      	ldr	r3, [pc, #488]	@ (8000b28 <Timer2_10ms_handle+0x214>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	4a79      	ldr	r2, [pc, #484]	@ (8000b28 <Timer2_10ms_handle+0x214>)
 8000944:	6013      	str	r3, [r2, #0]

        // Debouncing SW1
        bool sw1_current = !LL_GPIO_IsInputPinSet(SW1_GPIO_Port, SW1_Pin);
 8000946:	4979      	ldr	r1, [pc, #484]	@ (8000b2c <Timer2_10ms_handle+0x218>)
 8000948:	4879      	ldr	r0, [pc, #484]	@ (8000b30 <Timer2_10ms_handle+0x21c>)
 800094a:	f7ff ff18 	bl	800077e <LL_GPIO_IsInputPinSet>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	75fb      	strb	r3, [r7, #23]
        if (sw1_current == sw1_state) {
 800095a:	4b76      	ldr	r3, [pc, #472]	@ (8000b34 <Timer2_10ms_handle+0x220>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	7dfa      	ldrb	r2, [r7, #23]
 8000960:	429a      	cmp	r2, r3
 8000962:	d103      	bne.n	800096c <Timer2_10ms_handle+0x58>
            sw1_debounce = 0;
 8000964:	4b74      	ldr	r3, [pc, #464]	@ (8000b38 <Timer2_10ms_handle+0x224>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e018      	b.n	800099e <Timer2_10ms_handle+0x8a>
        } else {
            sw1_debounce++;
 800096c:	4b72      	ldr	r3, [pc, #456]	@ (8000b38 <Timer2_10ms_handle+0x224>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a71      	ldr	r2, [pc, #452]	@ (8000b38 <Timer2_10ms_handle+0x224>)
 8000974:	6013      	str	r3, [r2, #0]
            if (sw1_debounce >= DEBOUNCE_TICKS) {
 8000976:	4b70      	ldr	r3, [pc, #448]	@ (8000b38 <Timer2_10ms_handle+0x224>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b04      	cmp	r3, #4
 800097c:	d90f      	bls.n	800099e <Timer2_10ms_handle+0x8a>
                sw1_state = sw1_current;
 800097e:	4a6d      	ldr	r2, [pc, #436]	@ (8000b34 <Timer2_10ms_handle+0x220>)
 8000980:	7dfb      	ldrb	r3, [r7, #23]
 8000982:	7013      	strb	r3, [r2, #0]
                sw1_debounce = 0;
 8000984:	4b6c      	ldr	r3, [pc, #432]	@ (8000b38 <Timer2_10ms_handle+0x224>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
                if (!sw1_state) {
 800098a:	4b6a      	ldr	r3, [pc, #424]	@ (8000b34 <Timer2_10ms_handle+0x220>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f083 0301 	eor.w	r3, r3, #1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <Timer2_10ms_handle+0x8a>
                    sw1_hold_time = 0;
 8000998:	4b68      	ldr	r3, [pc, #416]	@ (8000b3c <Timer2_10ms_handle+0x228>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
                }
            }
        }
        if (sw1_state) {
 800099e:	4b65      	ldr	r3, [pc, #404]	@ (8000b34 <Timer2_10ms_handle+0x220>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d004      	beq.n	80009b0 <Timer2_10ms_handle+0x9c>
            sw1_hold_time++;
 80009a6:	4b65      	ldr	r3, [pc, #404]	@ (8000b3c <Timer2_10ms_handle+0x228>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	4a63      	ldr	r2, [pc, #396]	@ (8000b3c <Timer2_10ms_handle+0x228>)
 80009ae:	6013      	str	r3, [r2, #0]
        }

        // Debouncing SW2
        bool sw2_current = !LL_GPIO_IsInputPinSet(SW2_GPIO_Port, SW2_Pin);
 80009b0:	4963      	ldr	r1, [pc, #396]	@ (8000b40 <Timer2_10ms_handle+0x22c>)
 80009b2:	4864      	ldr	r0, [pc, #400]	@ (8000b44 <Timer2_10ms_handle+0x230>)
 80009b4:	f7ff fee3 	bl	800077e <LL_GPIO_IsInputPinSet>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf0c      	ite	eq
 80009be:	2301      	moveq	r3, #1
 80009c0:	2300      	movne	r3, #0
 80009c2:	75bb      	strb	r3, [r7, #22]
        if (sw2_current == sw2_state) {
 80009c4:	4b60      	ldr	r3, [pc, #384]	@ (8000b48 <Timer2_10ms_handle+0x234>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	7dba      	ldrb	r2, [r7, #22]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d103      	bne.n	80009d6 <Timer2_10ms_handle+0xc2>
            sw2_debounce = 0;
 80009ce:	4b5f      	ldr	r3, [pc, #380]	@ (8000b4c <Timer2_10ms_handle+0x238>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e018      	b.n	8000a08 <Timer2_10ms_handle+0xf4>
        } else {
            sw2_debounce++;
 80009d6:	4b5d      	ldr	r3, [pc, #372]	@ (8000b4c <Timer2_10ms_handle+0x238>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a5b      	ldr	r2, [pc, #364]	@ (8000b4c <Timer2_10ms_handle+0x238>)
 80009de:	6013      	str	r3, [r2, #0]
            if (sw2_debounce >= DEBOUNCE_TICKS) {
 80009e0:	4b5a      	ldr	r3, [pc, #360]	@ (8000b4c <Timer2_10ms_handle+0x238>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d90f      	bls.n	8000a08 <Timer2_10ms_handle+0xf4>
                sw2_state = sw2_current;
 80009e8:	4a57      	ldr	r2, [pc, #348]	@ (8000b48 <Timer2_10ms_handle+0x234>)
 80009ea:	7dbb      	ldrb	r3, [r7, #22]
 80009ec:	7013      	strb	r3, [r2, #0]
                sw2_debounce = 0;
 80009ee:	4b57      	ldr	r3, [pc, #348]	@ (8000b4c <Timer2_10ms_handle+0x238>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
                if (!sw2_state) {
 80009f4:	4b54      	ldr	r3, [pc, #336]	@ (8000b48 <Timer2_10ms_handle+0x234>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	f083 0301 	eor.w	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <Timer2_10ms_handle+0xf4>
                    sw2_hold_time = 0;
 8000a02:	4b53      	ldr	r3, [pc, #332]	@ (8000b50 <Timer2_10ms_handle+0x23c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
                }
            }
        }
        if (sw2_state) {
 8000a08:	4b4f      	ldr	r3, [pc, #316]	@ (8000b48 <Timer2_10ms_handle+0x234>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d004      	beq.n	8000a1a <Timer2_10ms_handle+0x106>
            sw2_hold_time++;
 8000a10:	4b4f      	ldr	r3, [pc, #316]	@ (8000b50 <Timer2_10ms_handle+0x23c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a4e      	ldr	r2, [pc, #312]	@ (8000b50 <Timer2_10ms_handle+0x23c>)
 8000a18:	6013      	str	r3, [r2, #0]
        }

        // Nhấp nháy LED trong UART_SENDING và WAIT_ERASE
        if ((current_state == STATE_UART_SENDING || current_state == STATE_WAIT_ERASE) && led_toggle_count >= LED_TOGGLE_TICKS) {
 8000a1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000b54 <Timer2_10ms_handle+0x240>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	d003      	beq.n	8000a2a <Timer2_10ms_handle+0x116>
 8000a22:	4b4c      	ldr	r3, [pc, #304]	@ (8000b54 <Timer2_10ms_handle+0x240>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b05      	cmp	r3, #5
 8000a28:	d11d      	bne.n	8000a66 <Timer2_10ms_handle+0x152>
 8000a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b28 <Timer2_10ms_handle+0x214>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b13      	cmp	r3, #19
 8000a30:	d919      	bls.n	8000a66 <Timer2_10ms_handle+0x152>
            if (current_state == STATE_UART_SENDING) {
 8000a32:	4b48      	ldr	r3, [pc, #288]	@ (8000b54 <Timer2_10ms_handle+0x240>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d105      	bne.n	8000a46 <Timer2_10ms_handle+0x132>
                LL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000a3a:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000a3e:	4846      	ldr	r0, [pc, #280]	@ (8000b58 <Timer2_10ms_handle+0x244>)
 8000a40:	f7ff fed1 	bl	80007e6 <LL_GPIO_TogglePin>
 8000a44:	e00c      	b.n	8000a60 <Timer2_10ms_handle+0x14c>
            } else {
                LL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000a46:	4945      	ldr	r1, [pc, #276]	@ (8000b5c <Timer2_10ms_handle+0x248>)
 8000a48:	4843      	ldr	r0, [pc, #268]	@ (8000b58 <Timer2_10ms_handle+0x244>)
 8000a4a:	f7ff fecc 	bl	80007e6 <LL_GPIO_TogglePin>
                LL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000a4e:	4944      	ldr	r1, [pc, #272]	@ (8000b60 <Timer2_10ms_handle+0x24c>)
 8000a50:	4841      	ldr	r0, [pc, #260]	@ (8000b58 <Timer2_10ms_handle+0x244>)
 8000a52:	f7ff fec8 	bl	80007e6 <LL_GPIO_TogglePin>
                LL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000a56:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000a5a:	483f      	ldr	r0, [pc, #252]	@ (8000b58 <Timer2_10ms_handle+0x244>)
 8000a5c:	f7ff fec3 	bl	80007e6 <LL_GPIO_TogglePin>
            }
            led_toggle_count = 0;
 8000a60:	4b31      	ldr	r3, [pc, #196]	@ (8000b28 <Timer2_10ms_handle+0x214>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
        }

        // Xử lý trạng thái
        switch (current_state) {
 8000a66:	4b3b      	ldr	r3, [pc, #236]	@ (8000b54 <Timer2_10ms_handle+0x240>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	f200 8162 	bhi.w	8000d34 <Timer2_10ms_handle+0x420>
 8000a70:	a201      	add	r2, pc, #4	@ (adr r2, 8000a78 <Timer2_10ms_handle+0x164>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000a91 	.word	0x08000a91
 8000a7c:	08000aef 	.word	0x08000aef
 8000a80:	08000b71 	.word	0x08000b71
 8000a84:	08000c3d 	.word	0x08000c3d
 8000a88:	08000c9d 	.word	0x08000c9d
 8000a8c:	08000cb9 	.word	0x08000cb9
            case STATE_IDLE:
                LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000a90:	4932      	ldr	r1, [pc, #200]	@ (8000b5c <Timer2_10ms_handle+0x248>)
 8000a92:	4831      	ldr	r0, [pc, #196]	@ (8000b58 <Timer2_10ms_handle+0x244>)
 8000a94:	f7ff fe89 	bl	80007aa <LL_GPIO_SetOutputPin>
                LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000a98:	4931      	ldr	r1, [pc, #196]	@ (8000b60 <Timer2_10ms_handle+0x24c>)
 8000a9a:	482f      	ldr	r0, [pc, #188]	@ (8000b58 <Timer2_10ms_handle+0x244>)
 8000a9c:	f7ff fe94 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000aa0:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000aa4:	482c      	ldr	r0, [pc, #176]	@ (8000b58 <Timer2_10ms_handle+0x244>)
 8000aa6:	f7ff fe8f 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                if (sw2_hold_time == 1) {
 8000aaa:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <Timer2_10ms_handle+0x23c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d109      	bne.n	8000ac6 <Timer2_10ms_handle+0x1b2>
                    current_state = STATE_WAIT_SW2_RELEASE;
 8000ab2:	4b28      	ldr	r3, [pc, #160]	@ (8000b54 <Timer2_10ms_handle+0x240>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
                    sw2_debounce = 0;
 8000ab8:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <Timer2_10ms_handle+0x238>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
                    sw2_state = true;
 8000abe:	4b22      	ldr	r3, [pc, #136]	@ (8000b48 <Timer2_10ms_handle+0x234>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
                    current_state = STATE_WAIT_ERASE;
                	LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
                    sw1_hold_time = 0;
                    erase_wait_delay = 0;
                }
                break;
 8000ac4:	e12b      	b.n	8000d1e <Timer2_10ms_handle+0x40a>
                } else if (sw1_hold_time >= 500) { // 5 giây
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <Timer2_10ms_handle+0x228>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ace:	f0c0 8126 	bcc.w	8000d1e <Timer2_10ms_handle+0x40a>
                    current_state = STATE_WAIT_ERASE;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	@ (8000b54 <Timer2_10ms_handle+0x240>)
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	701a      	strb	r2, [r3, #0]
                	LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000ad8:	4920      	ldr	r1, [pc, #128]	@ (8000b5c <Timer2_10ms_handle+0x248>)
 8000ada:	481f      	ldr	r0, [pc, #124]	@ (8000b58 <Timer2_10ms_handle+0x244>)
 8000adc:	f7ff fe74 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                    sw1_hold_time = 0;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <Timer2_10ms_handle+0x228>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
                    erase_wait_delay = 0;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <Timer2_10ms_handle+0x250>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
                break;
 8000aec:	e117      	b.n	8000d1e <Timer2_10ms_handle+0x40a>

            case STATE_WAIT_SW2_RELEASE:
                if (sw2_hold_time >= 300) {
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <Timer2_10ms_handle+0x23c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000af6:	d309      	bcc.n	8000b0c <Timer2_10ms_handle+0x1f8>
                    current_state = STATE_UART_WAIT_SEND;
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <Timer2_10ms_handle+0x240>)
 8000afa:	2203      	movs	r2, #3
 8000afc:	701a      	strb	r2, [r3, #0]
                    sw2_hold_time = 0;
 8000afe:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <Timer2_10ms_handle+0x23c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
                    uart_wait_delay = 0;
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <Timer2_10ms_handle+0x254>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
                } else if (sw2_hold_time == 0) {
                    current_state = STATE_RECORD;
                    sample_count = 0;
                }
                break;
 8000b0a:	e10a      	b.n	8000d22 <Timer2_10ms_handle+0x40e>
                } else if (sw2_hold_time == 0) {
 8000b0c:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <Timer2_10ms_handle+0x23c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f040 8106 	bne.w	8000d22 <Timer2_10ms_handle+0x40e>
                    current_state = STATE_RECORD;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <Timer2_10ms_handle+0x240>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	701a      	strb	r2, [r3, #0]
                    sample_count = 0;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <Timer2_10ms_handle+0x258>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
                break;
 8000b22:	e0fe      	b.n	8000d22 <Timer2_10ms_handle+0x40e>
 8000b24:	200000a0 	.word	0x200000a0
 8000b28:	200000a8 	.word	0x200000a8
 8000b2c:	04800080 	.word	0x04800080
 8000b30:	40010800 	.word	0x40010800
 8000b34:	20000094 	.word	0x20000094
 8000b38:	2000008c 	.word	0x2000008c
 8000b3c:	20000084 	.word	0x20000084
 8000b40:	04100010 	.word	0x04100010
 8000b44:	40010c00 	.word	0x40010c00
 8000b48:	20000095 	.word	0x20000095
 8000b4c:	20000090 	.word	0x20000090
 8000b50:	20000088 	.word	0x20000088
 8000b54:	2000007c 	.word	0x2000007c
 8000b58:	40011000 	.word	0x40011000
 8000b5c:	04020002 	.word	0x04020002
 8000b60:	04010001 	.word	0x04010001
 8000b64:	2000009c 	.word	0x2000009c
 8000b68:	20000098 	.word	0x20000098
 8000b6c:	20000080 	.word	0x20000080

            case STATE_RECORD:
                LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000b70:	4972      	ldr	r1, [pc, #456]	@ (8000d3c <Timer2_10ms_handle+0x428>)
 8000b72:	4873      	ldr	r0, [pc, #460]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000b74:	f7ff fe28 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000b78:	4972      	ldr	r1, [pc, #456]	@ (8000d44 <Timer2_10ms_handle+0x430>)
 8000b7a:	4871      	ldr	r0, [pc, #452]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000b7c:	f7ff fe15 	bl	80007aa <LL_GPIO_SetOutputPin>
                LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000b80:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000b84:	486e      	ldr	r0, [pc, #440]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000b86:	f7ff fe1f 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                if (sw1_hold_time == 1 || sample_count >= SONG_DATA_SIZE) {
 8000b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8000d48 <Timer2_10ms_handle+0x434>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d005      	beq.n	8000b9e <Timer2_10ms_handle+0x28a>
 8000b92:	4b6e      	ldr	r3, [pc, #440]	@ (8000d4c <Timer2_10ms_handle+0x438>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d939      	bls.n	8000c12 <Timer2_10ms_handle+0x2fe>
                    char name[16];
                    memset(song_name, 0xFF, SONG_NAME_SIZE);
 8000b9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ba2:	21ff      	movs	r1, #255	@ 0xff
 8000ba4:	486a      	ldr	r0, [pc, #424]	@ (8000d50 <Timer2_10ms_handle+0x43c>)
 8000ba6:	f001 fb79 	bl	800229c <memset>
                    snprintf(name, sizeof(name), "Bai so %d", song_index + 1);
 8000baa:	4b6a      	ldr	r3, [pc, #424]	@ (8000d54 <Timer2_10ms_handle+0x440>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	1d38      	adds	r0, r7, #4
 8000bb2:	4a69      	ldr	r2, [pc, #420]	@ (8000d58 <Timer2_10ms_handle+0x444>)
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	f001 fb3b 	bl	8002230 <sniprintf>
                    memcpy(song_name, name, strlen(name) + 1);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fb31 	bl	8000224 <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4861      	ldr	r0, [pc, #388]	@ (8000d50 <Timer2_10ms_handle+0x43c>)
 8000bcc:	f001 fb9a 	bl	8002304 <memcpy>
                    song_write(&flash, song_index);
 8000bd0:	4b60      	ldr	r3, [pc, #384]	@ (8000d54 <Timer2_10ms_handle+0x440>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4861      	ldr	r0, [pc, #388]	@ (8000d5c <Timer2_10ms_handle+0x448>)
 8000bd8:	f000 fdd2 	bl	8001780 <song_write>
                    song_index = (song_index + 1) % SONG_COUNT;
 8000bdc:	4b5d      	ldr	r3, [pc, #372]	@ (8000d54 <Timer2_10ms_handle+0x440>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a5f      	ldr	r2, [pc, #380]	@ (8000d60 <Timer2_10ms_handle+0x44c>)
 8000be4:	fb82 1203 	smull	r1, r2, r2, r3
 8000be8:	1111      	asrs	r1, r2, #4
 8000bea:	17da      	asrs	r2, r3, #31
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	2132      	movs	r1, #50	@ 0x32
 8000bf0:	fb01 f202 	mul.w	r2, r1, r2
 8000bf4:	1a9a      	subs	r2, r3, r2
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	4b56      	ldr	r3, [pc, #344]	@ (8000d54 <Timer2_10ms_handle+0x440>)
 8000bfa:	701a      	strb	r2, [r3, #0]
                    song_save_index(&flash, song_index);
 8000bfc:	4b55      	ldr	r3, [pc, #340]	@ (8000d54 <Timer2_10ms_handle+0x440>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	4856      	ldr	r0, [pc, #344]	@ (8000d5c <Timer2_10ms_handle+0x448>)
 8000c04:	f000 fd90 	bl	8001728 <song_save_index>
                    current_state = STATE_IDLE;
 8000c08:	4b56      	ldr	r3, [pc, #344]	@ (8000d64 <Timer2_10ms_handle+0x450>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
                if (sw1_hold_time == 1 || sample_count >= SONG_DATA_SIZE) {
 8000c0e:	bf00      	nop
                    if (sample_count < SONG_DATA_SIZE) {
                        song_data[sample_count] = TTP229_Read_8Keys();
                        sample_count++;
                    }
                }
                break;
 8000c10:	e089      	b.n	8000d26 <Timer2_10ms_handle+0x412>
                    if (sample_count < SONG_DATA_SIZE) {
 8000c12:	4b4e      	ldr	r3, [pc, #312]	@ (8000d4c <Timer2_10ms_handle+0x438>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	f200 8083 	bhi.w	8000d26 <Timer2_10ms_handle+0x412>
                        song_data[sample_count] = TTP229_Read_8Keys();
 8000c20:	4b4a      	ldr	r3, [pc, #296]	@ (8000d4c <Timer2_10ms_handle+0x438>)
 8000c22:	681c      	ldr	r4, [r3, #0]
 8000c24:	f000 fdf0 	bl	8001808 <TTP229_Read_8Keys>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b4e      	ldr	r3, [pc, #312]	@ (8000d68 <Timer2_10ms_handle+0x454>)
 8000c2e:	551a      	strb	r2, [r3, r4]
                        sample_count++;
 8000c30:	4b46      	ldr	r3, [pc, #280]	@ (8000d4c <Timer2_10ms_handle+0x438>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a45      	ldr	r2, [pc, #276]	@ (8000d4c <Timer2_10ms_handle+0x438>)
 8000c38:	6013      	str	r3, [r2, #0]
                break;
 8000c3a:	e074      	b.n	8000d26 <Timer2_10ms_handle+0x412>

            case STATE_UART_WAIT_SEND:
                LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000c3c:	493f      	ldr	r1, [pc, #252]	@ (8000d3c <Timer2_10ms_handle+0x428>)
 8000c3e:	4840      	ldr	r0, [pc, #256]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000c40:	f7ff fdc2 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000c44:	493f      	ldr	r1, [pc, #252]	@ (8000d44 <Timer2_10ms_handle+0x430>)
 8000c46:	483e      	ldr	r0, [pc, #248]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000c48:	f7ff fdbe 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000c4c:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000c50:	483b      	ldr	r0, [pc, #236]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000c52:	f7ff fdaa 	bl	80007aa <LL_GPIO_SetOutputPin>
                uart_wait_delay++;
 8000c56:	4b45      	ldr	r3, [pc, #276]	@ (8000d6c <Timer2_10ms_handle+0x458>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a43      	ldr	r2, [pc, #268]	@ (8000d6c <Timer2_10ms_handle+0x458>)
 8000c5e:	6013      	str	r3, [r2, #0]
                if (uart_wait_delay >= 50 && sw2_hold_time == 1) {
 8000c60:	4b42      	ldr	r3, [pc, #264]	@ (8000d6c <Timer2_10ms_handle+0x458>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b31      	cmp	r3, #49	@ 0x31
 8000c66:	d90d      	bls.n	8000c84 <Timer2_10ms_handle+0x370>
 8000c68:	4b41      	ldr	r3, [pc, #260]	@ (8000d70 <Timer2_10ms_handle+0x45c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d109      	bne.n	8000c84 <Timer2_10ms_handle+0x370>
                    current_state = STATE_UART_SENDING;
 8000c70:	4b3c      	ldr	r3, [pc, #240]	@ (8000d64 <Timer2_10ms_handle+0x450>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	701a      	strb	r2, [r3, #0]
                    flash_addr = 0x000000;
 8000c76:	4b3f      	ldr	r3, [pc, #252]	@ (8000d74 <Timer2_10ms_handle+0x460>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
                    led_toggle_count = 0;
 8000c7c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d78 <Timer2_10ms_handle+0x464>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
                } else if (uart_wait_delay >= 50 && sw1_hold_time == 1) {
                	current_state = STATE_IDLE;
                }
                break;
 8000c82:	e052      	b.n	8000d2a <Timer2_10ms_handle+0x416>
                } else if (uart_wait_delay >= 50 && sw1_hold_time == 1) {
 8000c84:	4b39      	ldr	r3, [pc, #228]	@ (8000d6c <Timer2_10ms_handle+0x458>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b31      	cmp	r3, #49	@ 0x31
 8000c8a:	d94e      	bls.n	8000d2a <Timer2_10ms_handle+0x416>
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d48 <Timer2_10ms_handle+0x434>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d14a      	bne.n	8000d2a <Timer2_10ms_handle+0x416>
                	current_state = STATE_IDLE;
 8000c94:	4b33      	ldr	r3, [pc, #204]	@ (8000d64 <Timer2_10ms_handle+0x450>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
                break;
 8000c9a:	e046      	b.n	8000d2a <Timer2_10ms_handle+0x416>

            case STATE_UART_SENDING:
                UART_Transmit_Flash(0x000000, FLASH_END_ADDR + 1);
 8000c9c:	f44f 217c 	mov.w	r1, #1032192	@ 0xfc000
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fdcd 	bl	8000840 <UART_Transmit_Flash>
                if (flash_addr > FLASH_END_ADDR) {
 8000ca6:	4b33      	ldr	r3, [pc, #204]	@ (8000d74 <Timer2_10ms_handle+0x460>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f5b3 2f7c 	cmp.w	r3, #1032192	@ 0xfc000
 8000cae:	d33e      	bcc.n	8000d2e <Timer2_10ms_handle+0x41a>
                    current_state = STATE_IDLE;
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <Timer2_10ms_handle+0x450>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000cb6:	e03a      	b.n	8000d2e <Timer2_10ms_handle+0x41a>

            case STATE_WAIT_ERASE:
                erase_wait_delay++;
 8000cb8:	4b30      	ldr	r3, [pc, #192]	@ (8000d7c <Timer2_10ms_handle+0x468>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8000d7c <Timer2_10ms_handle+0x468>)
 8000cc0:	6013      	str	r3, [r2, #0]
                if (erase_wait_delay >= 50 && sw2_state && sw2_hold_time == 1) {
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d7c <Timer2_10ms_handle+0x468>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b31      	cmp	r3, #49	@ 0x31
 8000cc8:	d919      	bls.n	8000cfe <Timer2_10ms_handle+0x3ea>
 8000cca:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <Timer2_10ms_handle+0x46c>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d015      	beq.n	8000cfe <Timer2_10ms_handle+0x3ea>
 8000cd2:	4b27      	ldr	r3, [pc, #156]	@ (8000d70 <Timer2_10ms_handle+0x45c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d111      	bne.n	8000cfe <Timer2_10ms_handle+0x3ea>
                	LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000cda:	491a      	ldr	r1, [pc, #104]	@ (8000d44 <Timer2_10ms_handle+0x430>)
 8000cdc:	4818      	ldr	r0, [pc, #96]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000cde:	f7ff fd73 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                	LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000ce2:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000ce6:	4816      	ldr	r0, [pc, #88]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000ce8:	f7ff fd6e 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                    EraseAllFlash();
 8000cec:	f7ff fdee 	bl	80008cc <EraseAllFlash>
                    song_index = 0;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <Timer2_10ms_handle+0x440>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
                    current_state = STATE_IDLE;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <Timer2_10ms_handle+0x450>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
                } else if (erase_wait_delay >= 50 && sw1_state && sw1_hold_time == 1) {
                    current_state = STATE_IDLE;
                }
                break;
 8000cfc:	e019      	b.n	8000d32 <Timer2_10ms_handle+0x41e>
                } else if (erase_wait_delay >= 50 && sw1_state && sw1_hold_time == 1) {
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <Timer2_10ms_handle+0x468>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b31      	cmp	r3, #49	@ 0x31
 8000d04:	d915      	bls.n	8000d32 <Timer2_10ms_handle+0x41e>
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <Timer2_10ms_handle+0x470>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d011      	beq.n	8000d32 <Timer2_10ms_handle+0x41e>
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <Timer2_10ms_handle+0x434>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d10d      	bne.n	8000d32 <Timer2_10ms_handle+0x41e>
                    current_state = STATE_IDLE;
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <Timer2_10ms_handle+0x450>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
                break;
 8000d1c:	e009      	b.n	8000d32 <Timer2_10ms_handle+0x41e>
                break;
 8000d1e:	bf00      	nop
 8000d20:	e008      	b.n	8000d34 <Timer2_10ms_handle+0x420>
                break;
 8000d22:	bf00      	nop
 8000d24:	e006      	b.n	8000d34 <Timer2_10ms_handle+0x420>
                break;
 8000d26:	bf00      	nop
 8000d28:	e004      	b.n	8000d34 <Timer2_10ms_handle+0x420>
                break;
 8000d2a:	bf00      	nop
 8000d2c:	e002      	b.n	8000d34 <Timer2_10ms_handle+0x420>
                break;
 8000d2e:	bf00      	nop
 8000d30:	e000      	b.n	8000d34 <Timer2_10ms_handle+0x420>
                break;
 8000d32:	bf00      	nop
        }
    }
}
 8000d34:	bf00      	nop
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	04020002 	.word	0x04020002
 8000d40:	40011000 	.word	0x40011000
 8000d44:	04010001 	.word	0x04010001
 8000d48:	20000084 	.word	0x20000084
 8000d4c:	20000080 	.word	0x20000080
 8000d50:	200000b4 	.word	0x200000b4
 8000d54:	200000b0 	.word	0x200000b0
 8000d58:	08002bd0 	.word	0x08002bd0
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	51eb851f 	.word	0x51eb851f
 8000d64:	2000007c 	.word	0x2000007c
 8000d68:	200001b4 	.word	0x200001b4
 8000d6c:	20000098 	.word	0x20000098
 8000d70:	20000088 	.word	0x20000088
 8000d74:	200000a4 	.word	0x200000a4
 8000d78:	200000a8 	.word	0x200000a8
 8000d7c:	2000009c 	.word	0x2000009c
 8000d80:	20000095 	.word	0x20000095
 8000d84:	20000094 	.word	0x20000094

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	f7ff fbdb 	bl	8000548 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000d92:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000d96:	f7ff fbbf 	bl	8000518 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f7ff fa4a 	bl	8000234 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000da0:	f7ff fa6c 	bl	800027c <__NVIC_GetPriorityGrouping>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2200      	movs	r2, #0
 8000da8:	210f      	movs	r1, #15
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff faba 	bl	8000324 <NVIC_EncodePriority>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4619      	mov	r1, r3
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff fa8a 	bl	80002d0 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000dbc:	f7ff fd30 	bl	8000820 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc0:	f000 f81a 	bl	8000df8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc4:	f000 f982 	bl	80010cc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dc8:	f000 f856 	bl	8000e78 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000dcc:	f000 f926 	bl	800101c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000dd0:	f000 f8f4 	bl	8000fbc <MX_TIM4_Init>
  MX_TIM2_Init();
 8000dd4:	f000 f8a8 	bl	8000f28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Đọc song_index từ flash
  GD25Q16E_Init(&flash);
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <main+0x68>)
 8000dda:	f000 fbc5 	bl	8001568 <GD25Q16E_Init>
  song_index = song_read_index(&flash);
 8000dde:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <main+0x68>)
 8000de0:	f000 fcb6 	bl	8001750 <song_read_index>
 8000de4:	4603      	mov	r3, r0
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b02      	ldr	r3, [pc, #8]	@ (8000df4 <main+0x6c>)
 8000dea:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint8_t key_state = 0;
//  char buffer[100];
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <main+0x64>
 8000df0:	20000000 	.word	0x20000000
 8000df4:	200000b0 	.word	0x200000b0

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fbbb 	bl	8000578 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000e02:	bf00      	nop
 8000e04:	f7ff fbcc 	bl	80005a0 <LL_FLASH_GetLatency>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1fa      	bne.n	8000e04 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000e0e:	2010      	movs	r0, #16
 8000e10:	f7ff fada 	bl	80003c8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000e14:	f7ff fab8 	bl	8000388 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000e18:	bf00      	nop
 8000e1a:	f7ff fac3 	bl	80003a4 <LL_RCC_HSI_IsReady>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d1fa      	bne.n	8000e1a <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_6);
 8000e24:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fb5d 	bl	80004e8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000e2e:	f7ff fb3b 	bl	80004a8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000e32:	bf00      	nop
 8000e34:	f7ff fb46 	bl	80004c4 <LL_RCC_PLL_IsReady>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d1fa      	bne.n	8000e34 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f7ff faf6 	bl	8000430 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000e44:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e48:	f7ff fb06 	bl	8000458 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fb17 	bl	8000480 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e52:	2002      	movs	r0, #2
 8000e54:	f7ff facc 	bl	80003f0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e58:	bf00      	nop
 8000e5a:	f7ff fadd 	bl	8000418 <LL_RCC_GetSysClkSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b08      	cmp	r3, #8
 8000e62:	d1fa      	bne.n	8000e5a <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(24000000);
 8000e64:	4803      	ldr	r0, [pc, #12]	@ (8000e74 <SystemClock_Config+0x7c>)
 8000e66:	f001 f9a3 	bl	80021b0 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 8000e6a:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <SystemClock_Config+0x7c>)
 8000e6c:	f001 f9d2 	bl	8002214 <LL_SetSystemCoreClock>
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	016e3600 	.word	0x016e3600

08000e78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b090      	sub	sp, #64	@ 0x40
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000e7e:	f107 0318 	add.w	r3, r7, #24
 8000e82:	2228      	movs	r2, #40	@ 0x28
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 fa08 	bl	800229c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000e9a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e9e:	f7ff fb53 	bl	8000548 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000ea2:	2004      	movs	r0, #4
 8000ea4:	f7ff fb50 	bl	8000548 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = FL_SCK_Pin|FL_MOSI_Pin;
 8000ea8:	f24a 03a0 	movw	r3, #41120	@ 0xa0a0
 8000eac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000eae:	2309      	movs	r3, #9
 8000eb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4818      	ldr	r0, [pc, #96]	@ (8000f20 <MX_SPI1_Init+0xa8>)
 8000ec0:	f000 fdbc 	bl	8001a3c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FL_MISO_Pin;
 8000ec4:	f244 0340 	movw	r3, #16448	@ 0x4040
 8000ec8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(FL_MISO_GPIO_Port, &GPIO_InitStruct);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4813      	ldr	r0, [pc, #76]	@ (8000f20 <MX_SPI1_Init+0xa8>)
 8000ed4:	f000 fdb2 	bl	8001a3c <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000edc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000ee0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000eee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000f00:	230a      	movs	r3, #10
 8000f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000f04:	f107 0318 	add.w	r3, r7, #24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <MX_SPI1_Init+0xac>)
 8000f0c:	f000 ff2f 	bl	8001d6e <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_SPI1_Init+0xac>)
 8000f12:	f7ff fb51 	bl	80005b8 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3740      	adds	r7, #64	@ 0x40
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40010800 	.word	0x40010800
 8000f24:	40013000 	.word	0x40013000

08000f28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f7ff faeb 	bl	8000518 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f42:	f7ff f99b 	bl	800027c <__NVIC_GetPriorityGrouping>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff f9e9 	bl	8000324 <NVIC_EncodePriority>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4619      	mov	r1, r3
 8000f56:	201c      	movs	r0, #28
 8000f58:	f7ff f9ba 	bl	80002d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000f5c:	201c      	movs	r0, #28
 8000f5e:	f7ff f99b 	bl	8000298 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 8000f62:	23ef      	movs	r3, #239	@ 0xef
 8000f64:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8000f6a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000f6e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f7c:	f000 ff80 	bl	8001e80 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8000f80:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f84:	f7ff fb36 	bl	80005f4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f8e:	f7ff fb4f 	bl	8000630 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000f92:	2100      	movs	r1, #0
 8000f94:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f98:	f7ff fb5e 	bl	8000658 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000f9c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000fa0:	f7ff fb6c 	bl	800067c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  LL_TIM_EnableIT_UPDATE(TIM2); // Bật ngắt Update
 8000fa4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000fa8:	f7ff fb96 	bl	80006d8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);   // Khởi động timer
 8000fac:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000fb0:	f7ff fb11 	bl	80005d6 <LL_TIM_EnableCounter>

  /* USER CODE END TIM2_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8000fd0:	2004      	movs	r0, #4
 8000fd2:	f7ff faa1 	bl	8000518 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 23;
 8000fd6:	2317      	movs	r3, #23
 8000fd8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000fde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fe2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	480a      	ldr	r0, [pc, #40]	@ (8001018 <MX_TIM4_Init+0x5c>)
 8000fee:	f000 ff47 	bl	8001e80 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8000ff2:	4809      	ldr	r0, [pc, #36]	@ (8001018 <MX_TIM4_Init+0x5c>)
 8000ff4:	f7ff fb0d 	bl	8000612 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4807      	ldr	r0, [pc, #28]	@ (8001018 <MX_TIM4_Init+0x5c>)
 8000ffc:	f7ff fb18 	bl	8000630 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001000:	2100      	movs	r1, #0
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_TIM4_Init+0x5c>)
 8001004:	f7ff fb28 	bl	8000658 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001008:	4803      	ldr	r0, [pc, #12]	@ (8001018 <MX_TIM4_Init+0x5c>)
 800100a:	f7ff fb37 	bl	800067c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40000800 	.word	0x40000800

0800101c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	@ 0x30
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	463b      	mov	r3, r7
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001044:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001048:	f7ff fa7e 	bl	8000548 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800104c:	2004      	movs	r0, #4
 800104e:	f7ff fa7b 	bl	8000548 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001052:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <MX_USART1_UART_Init+0xa0>)
 8001054:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001056:	2309      	movs	r3, #9
 8001058:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800105a:	2303      	movs	r3, #3
 800105c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4816      	ldr	r0, [pc, #88]	@ (80010c0 <MX_USART1_UART_Init+0xa4>)
 8001068:	f000 fce8 	bl	8001a3c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <MX_USART1_UART_Init+0xa8>)
 800106e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001070:	2304      	movs	r3, #4
 8001072:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4811      	ldr	r0, [pc, #68]	@ (80010c0 <MX_USART1_UART_Init+0xa4>)
 800107a:	f000 fcdf 	bl	8001a3c <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800107e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001082:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001084:	2300      	movs	r3, #0
 8001086:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800108c:	2300      	movs	r3, #0
 800108e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001090:	230c      	movs	r3, #12
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <MX_USART1_UART_Init+0xac>)
 80010a4:	f000 fff8 	bl	8002098 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80010a8:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <MX_USART1_UART_Init+0xac>)
 80010aa:	f7ff fb33 	bl	8000714 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80010ae:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <MX_USART1_UART_Init+0xac>)
 80010b0:	f7ff fb21 	bl	80006f6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	3730      	adds	r7, #48	@ 0x30
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	04020002 	.word	0x04020002
 80010c0:	40010800 	.word	0x40010800
 80010c4:	04040004 	.word	0x04040004
 80010c8:	40013800 	.word	0x40013800

080010cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80010e0:	2004      	movs	r0, #4
 80010e2:	f7ff fa31 	bl	8000548 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80010e6:	2008      	movs	r0, #8
 80010e8:	f7ff fa2e 	bl	8000548 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80010ec:	2010      	movs	r0, #16
 80010ee:	f7ff fa2b 	bl	8000548 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(FL_CS_GPIO_Port, FL_CS_Pin);
 80010f2:	f241 0110 	movw	r1, #4112	@ 0x1010
 80010f6:	482a      	ldr	r0, [pc, #168]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010f8:	f7ff fb66 	bl	80007c8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TTP_CLK_GPIO_Port, TTP_CLK_Pin);
 80010fc:	4929      	ldr	r1, [pc, #164]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010fe:	482a      	ldr	r0, [pc, #168]	@ (80011a8 <MX_GPIO_Init+0xdc>)
 8001100:	f7ff fb62 	bl	80007c8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_B_Pin|LED_G_Pin|LED_R_Pin);
 8001104:	4929      	ldr	r1, [pc, #164]	@ (80011ac <MX_GPIO_Init+0xe0>)
 8001106:	482a      	ldr	r0, [pc, #168]	@ (80011b0 <MX_GPIO_Init+0xe4>)
 8001108:	f7ff fb5e 	bl	80007c8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = FL_CS_Pin;
 800110c:	f241 0310 	movw	r3, #4112	@ 0x1010
 8001110:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001112:	2301      	movs	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001116:	2302      	movs	r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FL_CS_GPIO_Port, &GPIO_InitStruct);
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	481f      	ldr	r0, [pc, #124]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001124:	f000 fc8a 	bl	8001a3c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW2_Pin|TTP_SDO_Pin;
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <MX_GPIO_Init+0xe8>)
 800112a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800112c:	2304      	movs	r3, #4
 800112e:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	481c      	ldr	r0, [pc, #112]	@ (80011a8 <MX_GPIO_Init+0xdc>)
 8001136:	f000 fc81 	bl	8001a3c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TTP_CLK_Pin;
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 800113c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800113e:	2301      	movs	r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001142:	2302      	movs	r3, #2
 8001144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TTP_CLK_GPIO_Port, &GPIO_InitStruct);
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4816      	ldr	r0, [pc, #88]	@ (80011a8 <MX_GPIO_Init+0xdc>)
 8001150:	f000 fc74 	bl	8001a3c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 8001154:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <MX_GPIO_Init+0xe0>)
 8001156:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001158:	2301      	movs	r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800115c:	2302      	movs	r3, #2
 800115e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4811      	ldr	r0, [pc, #68]	@ (80011b0 <MX_GPIO_Init+0xe4>)
 800116a:	f000 fc67 	bl	8001a3c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW1_Pin;
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_GPIO_Init+0xec>)
 8001170:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001172:	2304      	movs	r3, #4
 8001174:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 800117c:	f000 fc5e 	bl	8001a3c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KQ0_Pin|KQ1_Pin|KQ2_Pin|KQ3_Pin
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <MX_GPIO_Init+0xf0>)
 8001182:	607b      	str	r3, [r7, #4]
                          |KQ4_Pin|KQ5_Pin|KQ6_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001184:	2308      	movs	r3, #8
 8001186:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001188:	2301      	movs	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_GPIO_Init+0xdc>)
 8001192:	f000 fc53 	bl	8001a3c <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001196:	bf00      	nop
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40010800 	.word	0x40010800
 80011a4:	04200020 	.word	0x04200020
 80011a8:	40010c00 	.word	0x40010c00
 80011ac:	04038083 	.word	0x04038083
 80011b0:	40011000 	.word	0x40011000
 80011b4:	04500050 	.word	0x04500050
 80011b8:	04800080 	.word	0x04800080
 80011bc:	0403f8fb 	.word	0x0403f8fb

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <NMI_Handler+0x4>

080011c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <MemManage_Handler+0x4>

080011d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	Timer2_10ms_handle();
 800121c:	f7ff fb7a 	bl	8000914 <Timer2_10ms_handle>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f001 f82a 	bl	80022ac <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000c000 	.word	0x2000c000
 8001284:	00000400 	.word	0x00000400
 8001288:	200000ac 	.word	0x200000ac
 800128c:	200031e0 	.word	0x200031e0

08001290 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800129c:	f7ff fff8 	bl	8001290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012a2:	490c      	ldr	r1, [pc, #48]	@ (80012d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012a4:	4a0c      	ldr	r2, [pc, #48]	@ (80012d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012b8:	4c09      	ldr	r4, [pc, #36]	@ (80012e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f000 fff7 	bl	80022b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ca:	f7ff fd5d 	bl	8000d88 <main>
  bx lr
 80012ce:	4770      	bx	lr
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012d8:	08002dc8 	.word	0x08002dc8
  ldr r2, =_sbss
 80012dc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012e0:	200031dc 	.word	0x200031dc

080012e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_2_IRQHandler>

080012e6 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <LL_SPI_IsActiveFlag_RXNE+0x18>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr

0800130a <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b02      	cmp	r3, #2
 800131c:	d101      	bne.n	8001322 <LL_SPI_IsActiveFlag_TXE+0x18>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	330c      	adds	r3, #12
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b2db      	uxtb	r3, r3
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	330c      	adds	r3, #12
 8001358:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	78fa      	ldrb	r2, [r7, #3]
 800135e:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <LL_GPIO_SetOutputPin>:
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b29a      	uxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <LL_GPIO_ResetOutputPin>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29a      	uxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	615a      	str	r2, [r3, #20]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <CS_LOW>:
 */


#include "gd25q16e.h"

static void CS_LOW(GD25Q16E_Dev_t *flash) {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
    LL_GPIO_ResetOutputPin(flash->cs_port, flash->cs_pin);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4610      	mov	r0, r2
 80013ba:	f7ff ffe5 	bl	8001388 <LL_GPIO_ResetOutputPin>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <CS_HIGH>:

static void CS_HIGH(GD25Q16E_Dev_t *flash) {
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
    LL_GPIO_SetOutputPin(flash->cs_port, flash->cs_pin);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f7ff ffc6 	bl	800136a <LL_GPIO_SetOutputPin>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <SPI_Send>:

static void SPI_Send(GD25Q16E_Dev_t *flash, uint8_t data) {
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	460b      	mov	r3, r1
 80013f0:	70fb      	strb	r3, [r7, #3]
    while (!LL_SPI_IsActiveFlag_TXE(flash->spi));
 80013f2:	bf00      	nop
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff86 	bl	800130a <LL_SPI_IsActiveFlag_TXE>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f7      	beq.n	80013f4 <SPI_Send+0xe>
    LL_SPI_TransmitData8(flash->spi, data);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	78fa      	ldrb	r2, [r7, #3]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff9b 	bl	8001348 <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_RXNE(flash->spi));
 8001412:	bf00      	nop
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff64 	bl	80012e6 <LL_SPI_IsActiveFlag_RXNE>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f7      	beq.n	8001414 <SPI_Send+0x2e>
    (void)LL_SPI_ReceiveData8(flash->spi);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff80 	bl	800132e <LL_SPI_ReceiveData8>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <SPI_Transceive>:

static uint8_t SPI_Transceive(GD25Q16E_Dev_t *flash, uint8_t data) {
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	460b      	mov	r3, r1
 8001440:	70fb      	strb	r3, [r7, #3]
    while (!LL_SPI_IsActiveFlag_TXE(flash->spi));
 8001442:	bf00      	nop
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff5e 	bl	800130a <LL_SPI_IsActiveFlag_TXE>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0f7      	beq.n	8001444 <SPI_Transceive+0xe>
    LL_SPI_TransmitData8(flash->spi, data);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	78fa      	ldrb	r2, [r7, #3]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff73 	bl	8001348 <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_RXNE(flash->spi));
 8001462:	bf00      	nop
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff3c 	bl	80012e6 <LL_SPI_IsActiveFlag_RXNE>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f7      	beq.n	8001464 <SPI_Transceive+0x2e>
    return LL_SPI_ReceiveData8(flash->spi);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff58 	bl	800132e <LL_SPI_ReceiveData8>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <SPI_ReadBuffer>:

static void SPI_ReadBuffer(GD25Q16E_Dev_t *flash, uint8_t *buf, uint32_t len) {
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
    while (len--) {
 8001494:	e008      	b.n	80014a8 <SPI_ReadBuffer+0x20>
        *buf++ = SPI_Transceive(flash, 0xFF);
 8001496:	68bc      	ldr	r4, [r7, #8]
 8001498:	1c63      	adds	r3, r4, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	21ff      	movs	r1, #255	@ 0xff
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff ffc9 	bl	8001436 <SPI_Transceive>
 80014a4:	4603      	mov	r3, r0
 80014a6:	7023      	strb	r3, [r4, #0]
    while (len--) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	1e5a      	subs	r2, r3, #1
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f1      	bne.n	8001496 <SPI_ReadBuffer+0xe>
    }
}
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd90      	pop	{r4, r7, pc}

080014bc <SPI_WriteBuffer>:

static void SPI_WriteBuffer(GD25Q16E_Dev_t *flash, const uint8_t *buf, uint32_t len) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
    while (len--) {
 80014c8:	e007      	b.n	80014da <SPI_WriteBuffer+0x1e>
        SPI_Transceive(flash, *buf++);
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	60ba      	str	r2, [r7, #8]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff ffae 	bl	8001436 <SPI_Transceive>
    while (len--) {
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	1e5a      	subs	r2, r3, #1
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f2      	bne.n	80014ca <SPI_WriteBuffer+0xe>
    }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <GD25Q16E_WriteEnable>:

static void GD25Q16E_WriteEnable(GD25Q16E_Dev_t *flash) {
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
    CS_LOW(flash);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff55 	bl	80013a6 <CS_LOW>
    SPI_Send(flash, GD25Q16E_CMD_WRITE_ENABLE);
 80014fc:	2106      	movs	r1, #6
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff71 	bl	80013e6 <SPI_Send>
    CS_HIGH(flash);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff5e 	bl	80013c6 <CS_HIGH>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <GD25Q16E_ReadStatus>:

static uint8_t GD25Q16E_ReadStatus(GD25Q16E_Dev_t *flash) {
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
    CS_LOW(flash);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ff43 	bl	80013a6 <CS_LOW>
    SPI_Send(flash, GD25Q16E_CMD_READ_STATUS);
 8001520:	2105      	movs	r1, #5
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ff5f 	bl	80013e6 <SPI_Send>
    uint8_t status = SPI_Transceive(flash, 0xFF);
 8001528:	21ff      	movs	r1, #255	@ 0xff
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff83 	bl	8001436 <SPI_Transceive>
 8001530:	4603      	mov	r3, r0
 8001532:	73fb      	strb	r3, [r7, #15]
    CS_HIGH(flash);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff46 	bl	80013c6 <CS_HIGH>
    return status;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <GD25Q16E_WaitBusy>:

static void GD25Q16E_WaitBusy(GD25Q16E_Dev_t *flash) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
    while (GD25Q16E_ReadStatus(flash) & 0x01);
 800154c:	bf00      	nop
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffdf 	bl	8001512 <GD25Q16E_ReadStatus>
 8001554:	4603      	mov	r3, r0
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f7      	bne.n	800154e <GD25Q16E_WaitBusy+0xa>
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <GD25Q16E_Init>:

void GD25Q16E_Init(GD25Q16E_Dev_t *flash) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    CS_HIGH(flash);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff28 	bl	80013c6 <CS_HIGH>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <GD25Q16E_Read>:
    uint8_t id3 = SPI_Transceive(flash, 0xFF);
    CS_HIGH(flash);
    return (id1 << 16) | (id2 << 8) | id3;
}

void GD25Q16E_Read(GD25Q16E_Dev_t *flash, uint32_t addr, uint8_t *data, uint32_t len) {
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	603b      	str	r3, [r7, #0]
    CS_LOW(flash);
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f7ff ff0a 	bl	80013a6 <CS_LOW>
    SPI_Send(flash, GD25Q16E_CMD_READ_DATA);
 8001592:	2103      	movs	r1, #3
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f7ff ff26 	bl	80013e6 <SPI_Send>
    SPI_Send(flash, (addr >> 16) & 0xFF);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	0c1b      	lsrs	r3, r3, #16
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff ff1f 	bl	80013e6 <SPI_Send>
    SPI_Send(flash, (addr >> 8) & 0xFF);
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4619      	mov	r1, r3
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f7ff ff18 	bl	80013e6 <SPI_Send>
    SPI_Send(flash, addr & 0xFF);
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4619      	mov	r1, r3
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f7ff ff12 	bl	80013e6 <SPI_Send>
    SPI_ReadBuffer(flash, data, len);
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f7ff ff5e 	bl	8001488 <SPI_ReadBuffer>
    CS_HIGH(flash);
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff fefa 	bl	80013c6 <CS_HIGH>
}
 80015d2:	bf00      	nop
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <GD25Q16E_Write>:

void GD25Q16E_Write(GD25Q16E_Dev_t *flash, uint32_t addr, const uint8_t *data, uint32_t len) {
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	603b      	str	r3, [r7, #0]
    while (len > 0) {
 80015e8:	e041      	b.n	800166e <GD25Q16E_Write+0x94>
        uint32_t page_offset = addr % GD25Q16E_PAGE_SIZE;
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	613b      	str	r3, [r7, #16]
        uint32_t write_size = GD25Q16E_PAGE_SIZE - page_offset;
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80015f6:	617b      	str	r3, [r7, #20]
        if (write_size > len) write_size = len;
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d901      	bls.n	8001604 <GD25Q16E_Write+0x2a>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	617b      	str	r3, [r7, #20]

        GD25Q16E_WriteEnable(flash);
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff ff72 	bl	80014ee <GD25Q16E_WriteEnable>

        CS_LOW(flash);
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff fecb 	bl	80013a6 <CS_LOW>
        SPI_Send(flash, GD25Q16E_CMD_PAGE_PROGRAM);
 8001610:	2102      	movs	r1, #2
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff fee7 	bl	80013e6 <SPI_Send>
        SPI_Send(flash, (addr >> 16) & 0xFF);
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	0c1b      	lsrs	r3, r3, #16
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4619      	mov	r1, r3
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f7ff fee0 	bl	80013e6 <SPI_Send>
        SPI_Send(flash, (addr >> 8) & 0xFF);
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f7ff fed9 	bl	80013e6 <SPI_Send>
        SPI_Send(flash, addr & 0xFF);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4619      	mov	r1, r3
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff fed3 	bl	80013e6 <SPI_Send>
        SPI_WriteBuffer(flash, data, write_size);
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff ff39 	bl	80014bc <SPI_WriteBuffer>
        CS_HIGH(flash);
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff febb 	bl	80013c6 <CS_HIGH>

        GD25Q16E_WaitBusy(flash);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff ff77 	bl	8001544 <GD25Q16E_WaitBusy>

        addr += write_size;
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
        data += write_size;
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	4413      	add	r3, r2
 8001664:	607b      	str	r3, [r7, #4]
        len -= write_size;
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	603b      	str	r3, [r7, #0]
    while (len > 0) {
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ba      	bne.n	80015ea <GD25Q16E_Write+0x10>
    }
}
 8001674:	bf00      	nop
 8001676:	bf00      	nop
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <GD25Q16E_EraseSector>:

void GD25Q16E_EraseSector(GD25Q16E_Dev_t *flash, uint32_t addr) {
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
    GD25Q16E_WriteEnable(flash);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff30 	bl	80014ee <GD25Q16E_WriteEnable>
    CS_LOW(flash);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fe89 	bl	80013a6 <CS_LOW>
    SPI_Send(flash, GD25Q16E_CMD_SECTOR_ERASE);
 8001694:	2120      	movs	r1, #32
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fea5 	bl	80013e6 <SPI_Send>
    SPI_Send(flash, (addr >> 16) & 0xFF);
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	0c1b      	lsrs	r3, r3, #16
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fe9e 	bl	80013e6 <SPI_Send>
    SPI_Send(flash, (addr >> 8) & 0xFF);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fe97 	bl	80013e6 <SPI_Send>
    SPI_Send(flash, addr & 0xFF);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fe91 	bl	80013e6 <SPI_Send>
    CS_HIGH(flash);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fe7e 	bl	80013c6 <CS_HIGH>
    GD25Q16E_WaitBusy(flash);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ff3a 	bl	8001544 <GD25Q16E_WaitBusy>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <song_erase>:

uint8_t song_index;
uint8_t song_name[SONG_NAME_SIZE];
uint8_t song_data[SONG_DATA_SIZE];

void song_erase(uint8_t song_index) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
    if (song_index >= SONG_COUNT) return;
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b31      	cmp	r3, #49	@ 0x31
 80016e6:	d817      	bhi.n	8001718 <song_erase+0x40>

    for (uint32_t addr = SONG_NAME_START[song_index]; addr < SONG_NAME_START[song_index] + SONG_BLOCK; addr += 4096) {
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <song_erase+0x48>)
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	e007      	b.n	8001704 <song_erase+0x2c>
        GD25Q16E_EraseSector(&flash, addr);
 80016f4:	68f9      	ldr	r1, [r7, #12]
 80016f6:	480b      	ldr	r0, [pc, #44]	@ (8001724 <song_erase+0x4c>)
 80016f8:	f7ff ffc1 	bl	800167e <GD25Q16E_EraseSector>
    for (uint32_t addr = SONG_NAME_START[song_index]; addr < SONG_NAME_START[song_index] + SONG_BLOCK; addr += 4096) {
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	4a06      	ldr	r2, [pc, #24]	@ (8001720 <song_erase+0x48>)
 8001708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170c:	f503 43a0 	add.w	r3, r3, #20480	@ 0x5000
 8001710:	68fa      	ldr	r2, [r7, #12]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3ee      	bcc.n	80016f4 <song_erase+0x1c>
 8001716:	e000      	b.n	800171a <song_erase+0x42>
    if (song_index >= SONG_COUNT) return;
 8001718:	bf00      	nop
    }
}
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	08002bf4 	.word	0x08002bf4
 8001724:	20000000 	.word	0x20000000

08001728 <song_save_index>:

void song_save_index(GD25Q16E_Dev_t *flash, uint8_t index) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	70fb      	strb	r3, [r7, #3]
    GD25Q16E_EraseSector(flash, INDEX_STORAGE_START);
 8001734:	2100      	movs	r1, #0
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa1 	bl	800167e <GD25Q16E_EraseSector>
    GD25Q16E_Write(flash, INDEX_STORAGE_START, (uint8_t *)&index, sizeof(index));
 800173c:	1cfa      	adds	r2, r7, #3
 800173e:	2301      	movs	r3, #1
 8001740:	2100      	movs	r1, #0
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff49 	bl	80015da <GD25Q16E_Write>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <song_read_index>:

uint8_t song_read_index(GD25Q16E_Dev_t *flash) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	uint8_t index;
    GD25Q16E_Read(flash, INDEX_STORAGE_START, (uint8_t *)&index, sizeof(index));
 8001758:	f107 020f 	add.w	r2, r7, #15
 800175c:	2301      	movs	r3, #1
 800175e:	2100      	movs	r1, #0
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff0c 	bl	800157e <GD25Q16E_Read>
    if (index >= SONG_COUNT || index == 0xFF) {
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b31      	cmp	r3, #49	@ 0x31
 800176a:	d802      	bhi.n	8001772 <song_read_index+0x22>
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	2bff      	cmp	r3, #255	@ 0xff
 8001770:	d101      	bne.n	8001776 <song_read_index+0x26>
        return 0;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <song_read_index+0x28>
    }
    return index;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <song_write>:

void song_write(GD25Q16E_Dev_t *flash, uint8_t song_index) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	70fb      	strb	r3, [r7, #3]
    if (song_index >= SONG_COUNT) return;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	2b31      	cmp	r3, #49	@ 0x31
 8001790:	d818      	bhi.n	80017c4 <song_write+0x44>

    song_erase(song_index);
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff9f 	bl	80016d8 <song_erase>

    GD25Q16E_Write(flash, SONG_NAME_START[song_index], song_name, SONG_NAME_SIZE);
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	4a0b      	ldr	r2, [pc, #44]	@ (80017cc <song_write+0x4c>)
 800179e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <song_write+0x50>)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff16 	bl	80015da <GD25Q16E_Write>

    GD25Q16E_Write(flash, SONG_DATA_START[song_index], song_data, SONG_DATA_SIZE);
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <song_write+0x54>)
 80017b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017b6:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 80017ba:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <song_write+0x58>)
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff0c 	bl	80015da <GD25Q16E_Write>
 80017c2:	e000      	b.n	80017c6 <song_write+0x46>
    if (song_index >= SONG_COUNT) return;
 80017c4:	bf00      	nop
}
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	08002bf4 	.word	0x08002bf4
 80017d0:	200000b4 	.word	0x200000b4
 80017d4:	08002cbc 	.word	0x08002cbc
 80017d8:	200001b4 	.word	0x200001b4

080017dc <LL_GPIO_IsInputPinSet>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	43da      	mvns	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	4013      	ands	r3, r2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <TTP229_Read_8Keys>:
//    while (!LL_TIM_IsActiveFlag_UPDATE(TIM4));
//    // Stop the timer
//    LL_TIM_DisableCounter(TIM4);
//}

uint8_t TTP229_Read_8Keys(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
//        }
//        TTP229_Delay_us(50);
//    }
//    return key_state;

    uint8_t key_state = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ0_GPIO_Port, KQ0_Pin))
 8001812:	f640 0108 	movw	r1, #2056	@ 0x808
 8001816:	482a      	ldr	r0, [pc, #168]	@ (80018c0 <TTP229_Read_8Keys+0xb8>)
 8001818:	f7ff ffe0 	bl	80017dc <LL_GPIO_IsInputPinSet>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d103      	bne.n	800182a <TTP229_Read_8Keys+0x22>
    	key_state |= 1;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ1_GPIO_Port, KQ1_Pin))
 800182a:	f241 0110 	movw	r1, #4112	@ 0x1010
 800182e:	4824      	ldr	r0, [pc, #144]	@ (80018c0 <TTP229_Read_8Keys+0xb8>)
 8001830:	f7ff ffd4 	bl	80017dc <LL_GPIO_IsInputPinSet>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d103      	bne.n	8001842 <TTP229_Read_8Keys+0x3a>
		key_state |= 2;
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ2_GPIO_Port, KQ2_Pin))
 8001842:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001846:	481e      	ldr	r0, [pc, #120]	@ (80018c0 <TTP229_Read_8Keys+0xb8>)
 8001848:	f7ff ffc8 	bl	80017dc <LL_GPIO_IsInputPinSet>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <TTP229_Read_8Keys+0x52>
		key_state |= 4;
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ3_GPIO_Port, KQ3_Pin))
 800185a:	f244 0140 	movw	r1, #16448	@ 0x4040
 800185e:	4818      	ldr	r0, [pc, #96]	@ (80018c0 <TTP229_Read_8Keys+0xb8>)
 8001860:	f7ff ffbc 	bl	80017dc <LL_GPIO_IsInputPinSet>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d103      	bne.n	8001872 <TTP229_Read_8Keys+0x6a>
		key_state |= 8;
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ4_GPIO_Port, KQ4_Pin))
 8001872:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001876:	4812      	ldr	r0, [pc, #72]	@ (80018c0 <TTP229_Read_8Keys+0xb8>)
 8001878:	f7ff ffb0 	bl	80017dc <LL_GPIO_IsInputPinSet>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d103      	bne.n	800188a <TTP229_Read_8Keys+0x82>
		key_state |= 16;
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ5_GPIO_Port, KQ5_Pin))
 800188a:	490e      	ldr	r1, [pc, #56]	@ (80018c4 <TTP229_Read_8Keys+0xbc>)
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <TTP229_Read_8Keys+0xb8>)
 800188e:	f7ff ffa5 	bl	80017dc <LL_GPIO_IsInputPinSet>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d103      	bne.n	80018a0 <TTP229_Read_8Keys+0x98>
		key_state |= 32;
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f043 0320 	orr.w	r3, r3, #32
 800189e:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ6_GPIO_Port, KQ6_Pin))
 80018a0:	4909      	ldr	r1, [pc, #36]	@ (80018c8 <TTP229_Read_8Keys+0xc0>)
 80018a2:	4807      	ldr	r0, [pc, #28]	@ (80018c0 <TTP229_Read_8Keys+0xb8>)
 80018a4:	f7ff ff9a 	bl	80017dc <LL_GPIO_IsInputPinSet>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <TTP229_Read_8Keys+0xae>
		key_state |= 64;
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b4:	71fb      	strb	r3, [r7, #7]
    return key_state;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	04010001 	.word	0x04010001
 80018c8:	04020002 	.word	0x04020002

080018cc <LL_GPIO_SetPinMode>:
{
 80018cc:	b490      	push	{r4, r7}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	0e1b      	lsrs	r3, r3, #24
 80018e0:	4413      	add	r3, r2
 80018e2:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80018e4:	6822      	ldr	r2, [r4, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa93 f3a3 	rbit	r3, r3
 80018f0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	210f      	movs	r1, #15
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	401a      	ands	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa93 f3a3 	rbit	r3, r3
 8001910:	61bb      	str	r3, [r7, #24]
  return result;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	6023      	str	r3, [r4, #0]
}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bc90      	pop	{r4, r7}
 800192e:	4770      	bx	lr

08001930 <LL_GPIO_SetPinSpeed>:
{
 8001930:	b490      	push	{r4, r7}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	461a      	mov	r2, r3
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	0e1b      	lsrs	r3, r3, #24
 8001944:	4413      	add	r3, r2
 8001946:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001948:	6822      	ldr	r2, [r4, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa93 f3a3 	rbit	r3, r3
 8001954:	613b      	str	r3, [r7, #16]
  return result;
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	2103      	movs	r1, #3
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	401a      	ands	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	61bb      	str	r3, [r7, #24]
  return result;
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	6023      	str	r3, [r4, #0]
}
 800198a:	bf00      	nop
 800198c:	3720      	adds	r7, #32
 800198e:	46bd      	mov	sp, r7
 8001990:	bc90      	pop	{r4, r7}
 8001992:	4770      	bx	lr

08001994 <LL_GPIO_SetPinOutputType>:
{
 8001994:	b490      	push	{r4, r7}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	0e1b      	lsrs	r3, r3, #24
 80019a8:	4413      	add	r3, r2
 80019aa:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80019ac:	6822      	ldr	r2, [r4, #0]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	613b      	str	r3, [r7, #16]
  return result;
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	2104      	movs	r1, #4
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43db      	mvns	r3, r3
 80019cc:	401a      	ands	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	61bb      	str	r3, [r7, #24]
  return result;
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	6023      	str	r3, [r4, #0]
}
 80019ee:	bf00      	nop
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc90      	pop	{r4, r7}
 80019f6:	4770      	bx	lr

080019f8 <LL_GPIO_SetPinPull>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	0a1b      	lsrs	r3, r3, #8
 8001a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	613b      	str	r3, [r7, #16]
  return result;
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	4619      	mov	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	408b      	lsls	r3, r1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	60da      	str	r2, [r3, #12]
}
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	60fb      	str	r3, [r7, #12]
  return result;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001a66:	e044      	b.n	8001af2 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d03a      	beq.n	8001aec <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	2b07      	cmp	r3, #7
 8001a7a:	d806      	bhi.n	8001a8a <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001a7c:	f240 1201 	movw	r2, #257	@ 0x101
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	e008      	b.n	8001a9c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3b08      	subs	r3, #8
 8001a8e:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a9a:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d106      	bne.n	8001ab2 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ffa3 	bl	80019f8 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	69b9      	ldr	r1, [r7, #24]
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ff06 	bl	80018cc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d003      	beq.n	8001ad0 <LL_GPIO_Init+0x94>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d10d      	bne.n	8001aec <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	69b9      	ldr	r1, [r7, #24]
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ff29 	bl	8001930 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	69b9      	ldr	r1, [r7, #24]
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff54 	bl	8001994 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	3301      	adds	r3, #1
 8001af0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	fa22 f303 	lsr.w	r3, r2, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1b4      	bne.n	8001a68 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <LL_RCC_GetSysClkSource>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <LL_RCC_GetSysClkSource+0x14>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000

08001b20 <LL_RCC_GetAHBPrescaler>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <LL_RCC_GetAHBPrescaler+0x14>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	40021000 	.word	0x40021000

08001b38 <LL_RCC_GetAPB1Prescaler>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000

08001b50 <LL_RCC_GetAPB2Prescaler>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <LL_RCC_GetAPB2Prescaler+0x14>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	40021000 	.word	0x40021000

08001b68 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001b6c:	4b03      	ldr	r3, [pc, #12]	@ (8001b7c <LL_RCC_PLL_GetMainSource+0x14>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000

08001b80 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001b84:	4b03      	ldr	r3, [pc, #12]	@ (8001b94 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	40021000 	.word	0x40021000

08001b98 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <LL_RCC_PLL_GetPrediv+0x18>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	0c5b      	lsrs	r3, r3, #17
 8001ba2:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001bbc:	f000 f820 	bl	8001c00 <RCC_GetSystemClockFreq>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f83e 	bl	8001c4c <RCC_GetHCLKClockFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f84c 	bl	8001c78 <RCC_GetPCLK1ClockFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f858 	bl	8001ca0 <RCC_GetPCLK2ClockFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60da      	str	r2, [r3, #12]
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001c0a:	f7ff ff7d 	bl	8001b08 <LL_RCC_GetSysClkSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d00c      	beq.n	8001c2e <RCC_GetSystemClockFreq+0x2e>
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d80e      	bhi.n	8001c36 <RCC_GetSystemClockFreq+0x36>
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <RCC_GetSystemClockFreq+0x22>
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d003      	beq.n	8001c28 <RCC_GetSystemClockFreq+0x28>
 8001c20:	e009      	b.n	8001c36 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <RCC_GetSystemClockFreq+0x48>)
 8001c24:	607b      	str	r3, [r7, #4]
      break;
 8001c26:	e009      	b.n	8001c3c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001c28:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <RCC_GetSystemClockFreq+0x48>)
 8001c2a:	607b      	str	r3, [r7, #4]
      break;
 8001c2c:	e006      	b.n	8001c3c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001c2e:	f000 f84b 	bl	8001cc8 <RCC_PLL_GetFreqDomain_SYS>
 8001c32:	6078      	str	r0, [r7, #4]
      break;
 8001c34:	e002      	b.n	8001c3c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001c36:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <RCC_GetSystemClockFreq+0x48>)
 8001c38:	607b      	str	r3, [r7, #4]
      break;
 8001c3a:	bf00      	nop
  }

  return frequency;
 8001c3c:	687b      	ldr	r3, [r7, #4]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	007a1200 	.word	0x007a1200

08001c4c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001c54:	f7ff ff64 	bl	8001b20 <LL_RCC_GetAHBPrescaler>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	f003 030f 	and.w	r3, r3, #15
 8001c60:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <RCC_GetHCLKClockFreq+0x28>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	461a      	mov	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	40d3      	lsrs	r3, r2
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	08002bdc 	.word	0x08002bdc

08001c78 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001c80:	f7ff ff5a 	bl	8001b38 <LL_RCC_GetAPB1Prescaler>
 8001c84:	4603      	mov	r3, r0
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <RCC_GetPCLK1ClockFreq+0x24>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	40d3      	lsrs	r3, r2
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	08002bec 	.word	0x08002bec

08001ca0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001ca8:	f7ff ff52 	bl	8001b50 <LL_RCC_GetAPB2Prescaler>
 8001cac:	4603      	mov	r3, r0
 8001cae:	0adb      	lsrs	r3, r3, #11
 8001cb0:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <RCC_GetPCLK2ClockFreq+0x24>)
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	40d3      	lsrs	r3, r2
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08002bec 	.word	0x08002bec

08001cc8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001cd6:	f7ff ff47 	bl	8001b68 <LL_RCC_PLL_GetMainSource>
 8001cda:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce8:	d003      	beq.n	8001cf2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001cea:	e00b      	b.n	8001d04 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001cec:	4b0d      	ldr	r3, [pc, #52]	@ (8001d24 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001cee:	607b      	str	r3, [r7, #4]
      break;
 8001cf0:	e00b      	b.n	8001d0a <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001cf2:	f7ff ff51 	bl	8001b98 <LL_RCC_PLL_GetPrediv>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	@ (8001d28 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	607b      	str	r3, [r7, #4]
      break;
 8001d02:	e002      	b.n	8001d0a <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001d04:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001d06:	607b      	str	r3, [r7, #4]
      break;
 8001d08:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001d0a:	f7ff ff39 	bl	8001b80 <LL_RCC_PLL_GetMultiplicator>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	0c9b      	lsrs	r3, r3, #18
 8001d12:	3302      	adds	r3, #2
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	003d0900 	.word	0x003d0900
 8001d28:	007a1200 	.word	0x007a1200

08001d2c <LL_SPI_IsEnabled>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3c:	2b40      	cmp	r3, #64	@ 0x40
 8001d3e:	d101      	bne.n	8001d44 <LL_SPI_IsEnabled+0x18>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <LL_SPI_IsEnabled+0x1a>
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <LL_SPI_SetCRCPolynomial>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	611a      	str	r2, [r3, #16]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
 8001d76:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ffd5 	bl	8001d2c <LL_SPI_IsEnabled>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d139      	bne.n	8001dfc <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d90:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	6811      	ldr	r1, [r2, #0]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	6852      	ldr	r2, [r2, #4]
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	6892      	ldr	r2, [r2, #8]
 8001da2:	4311      	orrs	r1, r2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	68d2      	ldr	r2, [r2, #12]
 8001da8:	4311      	orrs	r1, r2
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	6912      	ldr	r2, [r2, #16]
 8001dae:	4311      	orrs	r1, r2
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	6952      	ldr	r2, [r2, #20]
 8001db4:	4311      	orrs	r1, r2
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	6992      	ldr	r2, [r2, #24]
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	69d2      	ldr	r2, [r2, #28]
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	6a12      	ldr	r2, [r2, #32]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f023 0204 	bic.w	r2, r3, #4
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	0c1b      	lsrs	r3, r3, #16
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dea:	d105      	bne.n	8001df8 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df0:	4619      	mov	r1, r3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffac 	bl	8001d50 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <LL_TIM_SetPrescaler>:
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <LL_TIM_SetAutoReload>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <LL_TIM_SetRepetitionCounter>:
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	615a      	str	r2, [r3, #20]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
	...

08001e80 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a31      	ldr	r2, [pc, #196]	@ (8001f58 <LL_TIM_Init+0xd8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d013      	beq.n	8001ec0 <LL_TIM_Init+0x40>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a30      	ldr	r2, [pc, #192]	@ (8001f5c <LL_TIM_Init+0xdc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d00f      	beq.n	8001ec0 <LL_TIM_Init+0x40>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea6:	d00b      	beq.n	8001ec0 <LL_TIM_Init+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001f60 <LL_TIM_Init+0xe0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d007      	beq.n	8001ec0 <LL_TIM_Init+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001f64 <LL_TIM_Init+0xe4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d003      	beq.n	8001ec0 <LL_TIM_Init+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a2b      	ldr	r2, [pc, #172]	@ (8001f68 <LL_TIM_Init+0xe8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d106      	bne.n	8001ece <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a21      	ldr	r2, [pc, #132]	@ (8001f58 <LL_TIM_Init+0xd8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <LL_TIM_Init+0x7e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	@ (8001f5c <LL_TIM_Init+0xdc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00f      	beq.n	8001efe <LL_TIM_Init+0x7e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ee4:	d00b      	beq.n	8001efe <LL_TIM_Init+0x7e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f60 <LL_TIM_Init+0xe0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <LL_TIM_Init+0x7e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f64 <LL_TIM_Init+0xe4>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d003      	beq.n	8001efe <LL_TIM_Init+0x7e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <LL_TIM_Init+0xe8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d106      	bne.n	8001f0c <LL_TIM_Init+0x8c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4619      	mov	r1, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ff87 	bl	8001e2c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff ff74 	bl	8001e12 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <LL_TIM_Init+0xd8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d003      	beq.n	8001f3a <LL_TIM_Init+0xba>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <LL_TIM_Init+0xdc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d105      	bne.n	8001f46 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff80 	bl	8001e46 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ff8a 	bl	8001e60 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40012c00 	.word	0x40012c00
 8001f5c:	40013400 	.word	0x40013400
 8001f60:	40000400 	.word	0x40000400
 8001f64:	40000800 	.word	0x40000800
 8001f68:	40000c00 	.word	0x40000c00

08001f6c <LL_USART_IsEnabled>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <LL_USART_SetStopBitsLength>:
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	611a      	str	r2, [r3, #16]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <LL_USART_SetHWFlowCtrl>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	615a      	str	r2, [r3, #20]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <LL_USART_SetBaudRate>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009a      	lsls	r2, r3, #2
 8001ff2:	441a      	add	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	4a25      	ldr	r2, [pc, #148]	@ (8002094 <LL_USART_SetBaudRate+0xb8>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	b29b      	uxth	r3, r3
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	b299      	uxth	r1, r3
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	4613      	mov	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	009a      	lsls	r2, r3, #2
 8002014:	441a      	add	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	fbb2 f2f3 	udiv	r2, r2, r3
 800201e:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <LL_USART_SetBaudRate+0xb8>)
 8002020:	fba3 0302 	umull	r0, r3, r3, r2
 8002024:	095b      	lsrs	r3, r3, #5
 8002026:	2064      	movs	r0, #100	@ 0x64
 8002028:	fb00 f303 	mul.w	r3, r0, r3
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	3332      	adds	r3, #50	@ 0x32
 8002032:	4a18      	ldr	r2, [pc, #96]	@ (8002094 <LL_USART_SetBaudRate+0xb8>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	b29b      	uxth	r3, r3
 800203c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002040:	b29b      	uxth	r3, r3
 8002042:	440b      	add	r3, r1
 8002044:	b299      	uxth	r1, r3
 8002046:	68ba      	ldr	r2, [r7, #8]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	009a      	lsls	r2, r3, #2
 8002050:	441a      	add	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	fbb2 f2f3 	udiv	r2, r2, r3
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <LL_USART_SetBaudRate+0xb8>)
 800205c:	fba3 0302 	umull	r0, r3, r3, r2
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	2064      	movs	r0, #100	@ 0x64
 8002064:	fb00 f303 	mul.w	r3, r0, r3
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	3332      	adds	r3, #50	@ 0x32
 800206e:	4a09      	ldr	r2, [pc, #36]	@ (8002094 <LL_USART_SetBaudRate+0xb8>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	095b      	lsrs	r3, r3, #5
 8002076:	b29b      	uxth	r3, r3
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	b29b      	uxth	r3, r3
 800207e:	440b      	add	r3, r1
 8002080:	b29b      	uxth	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	609a      	str	r2, [r3, #8]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	51eb851f 	.word	0x51eb851f

08002098 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ff5e 	bl	8001f6c <LL_USART_IsEnabled>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d153      	bne.n	800215e <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80020be:	f023 030c 	bic.w	r3, r3, #12
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	6851      	ldr	r1, [r2, #4]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	68d2      	ldr	r2, [r2, #12]
 80020ca:	4311      	orrs	r1, r2
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	6912      	ldr	r2, [r2, #16]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4619      	mov	r1, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ff57 	bl	8001f92 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff63 	bl	8001fb6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fd5d 	bl	8001bb4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002168 <LL_USART_Init+0xd0>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d102      	bne.n	8002108 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	e01a      	b.n	800213e <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a18      	ldr	r2, [pc, #96]	@ (800216c <LL_USART_Init+0xd4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d102      	bne.n	8002116 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e013      	b.n	800213e <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a15      	ldr	r2, [pc, #84]	@ (8002170 <LL_USART_Init+0xd8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d102      	bne.n	8002124 <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e00c      	b.n	800213e <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a13      	ldr	r2, [pc, #76]	@ (8002174 <LL_USART_Init+0xdc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d102      	bne.n	8002132 <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	61bb      	str	r3, [r7, #24]
 8002130:	e005      	b.n	800213e <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a10      	ldr	r2, [pc, #64]	@ (8002178 <LL_USART_Init+0xe0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00c      	beq.n	800215e <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002154:	461a      	mov	r2, r3
 8002156:	69b9      	ldr	r1, [r7, #24]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff3f 	bl	8001fdc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800215e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3720      	adds	r7, #32
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013800 	.word	0x40013800
 800216c:	40004400 	.word	0x40004400
 8002170:	40004800 	.word	0x40004800
 8002174:	40004c00 	.word	0x40004c00
 8002178:	40005000 	.word	0x40005000

0800217c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4a07      	ldr	r2, [pc, #28]	@ (80021ac <LL_InitTick+0x30>)
 8002190:	3b01      	subs	r3, #1
 8002192:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <LL_InitTick+0x30>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219a:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <LL_InitTick+0x30>)
 800219c:	2205      	movs	r2, #5
 800219e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e010 	.word	0xe000e010

080021b0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80021b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ffdd 	bl	800217c <LL_InitTick>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80021d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <LL_mDelay+0x44>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80021da:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e2:	d00c      	beq.n	80021fe <LL_mDelay+0x32>
  {
    Delay++;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3301      	adds	r3, #1
 80021e8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80021ea:	e008      	b.n	80021fe <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <LL_mDelay+0x44>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <LL_mDelay+0x32>
    {
      Delay--;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f3      	bne.n	80021ec <LL_mDelay+0x20>
    }
  }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	e000e010 	.word	0xe000e010

08002214 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800221c:	4a03      	ldr	r2, [pc, #12]	@ (800222c <LL_SetSystemCoreClock+0x18>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	2000000c 	.word	0x2000000c

08002230 <sniprintf>:
 8002230:	b40c      	push	{r2, r3}
 8002232:	b530      	push	{r4, r5, lr}
 8002234:	4b18      	ldr	r3, [pc, #96]	@ (8002298 <sniprintf+0x68>)
 8002236:	1e0c      	subs	r4, r1, #0
 8002238:	681d      	ldr	r5, [r3, #0]
 800223a:	b09d      	sub	sp, #116	@ 0x74
 800223c:	da08      	bge.n	8002250 <sniprintf+0x20>
 800223e:	238b      	movs	r3, #139	@ 0x8b
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	602b      	str	r3, [r5, #0]
 8002246:	b01d      	add	sp, #116	@ 0x74
 8002248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800224c:	b002      	add	sp, #8
 800224e:	4770      	bx	lr
 8002250:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002254:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800225e:	bf0c      	ite	eq
 8002260:	4623      	moveq	r3, r4
 8002262:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002266:	9304      	str	r3, [sp, #16]
 8002268:	9307      	str	r3, [sp, #28]
 800226a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800226e:	9002      	str	r0, [sp, #8]
 8002270:	9006      	str	r0, [sp, #24]
 8002272:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002276:	4628      	mov	r0, r5
 8002278:	ab21      	add	r3, sp, #132	@ 0x84
 800227a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800227c:	a902      	add	r1, sp, #8
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f000 f9a0 	bl	80025c4 <_svfiprintf_r>
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	bfbc      	itt	lt
 8002288:	238b      	movlt	r3, #139	@ 0x8b
 800228a:	602b      	strlt	r3, [r5, #0]
 800228c:	2c00      	cmp	r4, #0
 800228e:	d0da      	beq.n	8002246 <sniprintf+0x16>
 8002290:	2200      	movs	r2, #0
 8002292:	9b02      	ldr	r3, [sp, #8]
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e7d6      	b.n	8002246 <sniprintf+0x16>
 8002298:	20000010 	.word	0x20000010

0800229c <memset>:
 800229c:	4603      	mov	r3, r0
 800229e:	4402      	add	r2, r0
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d100      	bne.n	80022a6 <memset+0xa>
 80022a4:	4770      	bx	lr
 80022a6:	f803 1b01 	strb.w	r1, [r3], #1
 80022aa:	e7f9      	b.n	80022a0 <memset+0x4>

080022ac <__errno>:
 80022ac:	4b01      	ldr	r3, [pc, #4]	@ (80022b4 <__errno+0x8>)
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000010 	.word	0x20000010

080022b8 <__libc_init_array>:
 80022b8:	b570      	push	{r4, r5, r6, lr}
 80022ba:	2600      	movs	r6, #0
 80022bc:	4d0c      	ldr	r5, [pc, #48]	@ (80022f0 <__libc_init_array+0x38>)
 80022be:	4c0d      	ldr	r4, [pc, #52]	@ (80022f4 <__libc_init_array+0x3c>)
 80022c0:	1b64      	subs	r4, r4, r5
 80022c2:	10a4      	asrs	r4, r4, #2
 80022c4:	42a6      	cmp	r6, r4
 80022c6:	d109      	bne.n	80022dc <__libc_init_array+0x24>
 80022c8:	f000 fc76 	bl	8002bb8 <_init>
 80022cc:	2600      	movs	r6, #0
 80022ce:	4d0a      	ldr	r5, [pc, #40]	@ (80022f8 <__libc_init_array+0x40>)
 80022d0:	4c0a      	ldr	r4, [pc, #40]	@ (80022fc <__libc_init_array+0x44>)
 80022d2:	1b64      	subs	r4, r4, r5
 80022d4:	10a4      	asrs	r4, r4, #2
 80022d6:	42a6      	cmp	r6, r4
 80022d8:	d105      	bne.n	80022e6 <__libc_init_array+0x2e>
 80022da:	bd70      	pop	{r4, r5, r6, pc}
 80022dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e0:	4798      	blx	r3
 80022e2:	3601      	adds	r6, #1
 80022e4:	e7ee      	b.n	80022c4 <__libc_init_array+0xc>
 80022e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ea:	4798      	blx	r3
 80022ec:	3601      	adds	r6, #1
 80022ee:	e7f2      	b.n	80022d6 <__libc_init_array+0x1e>
 80022f0:	08002dc0 	.word	0x08002dc0
 80022f4:	08002dc0 	.word	0x08002dc0
 80022f8:	08002dc0 	.word	0x08002dc0
 80022fc:	08002dc4 	.word	0x08002dc4

08002300 <__retarget_lock_acquire_recursive>:
 8002300:	4770      	bx	lr

08002302 <__retarget_lock_release_recursive>:
 8002302:	4770      	bx	lr

08002304 <memcpy>:
 8002304:	440a      	add	r2, r1
 8002306:	4291      	cmp	r1, r2
 8002308:	f100 33ff 	add.w	r3, r0, #4294967295
 800230c:	d100      	bne.n	8002310 <memcpy+0xc>
 800230e:	4770      	bx	lr
 8002310:	b510      	push	{r4, lr}
 8002312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002316:	4291      	cmp	r1, r2
 8002318:	f803 4f01 	strb.w	r4, [r3, #1]!
 800231c:	d1f9      	bne.n	8002312 <memcpy+0xe>
 800231e:	bd10      	pop	{r4, pc}

08002320 <_free_r>:
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4605      	mov	r5, r0
 8002324:	2900      	cmp	r1, #0
 8002326:	d040      	beq.n	80023aa <_free_r+0x8a>
 8002328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800232c:	1f0c      	subs	r4, r1, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	bfb8      	it	lt
 8002332:	18e4      	addlt	r4, r4, r3
 8002334:	f000 f8de 	bl	80024f4 <__malloc_lock>
 8002338:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <_free_r+0x8c>)
 800233a:	6813      	ldr	r3, [r2, #0]
 800233c:	b933      	cbnz	r3, 800234c <_free_r+0x2c>
 800233e:	6063      	str	r3, [r4, #4]
 8002340:	6014      	str	r4, [r2, #0]
 8002342:	4628      	mov	r0, r5
 8002344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002348:	f000 b8da 	b.w	8002500 <__malloc_unlock>
 800234c:	42a3      	cmp	r3, r4
 800234e:	d908      	bls.n	8002362 <_free_r+0x42>
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	1821      	adds	r1, r4, r0
 8002354:	428b      	cmp	r3, r1
 8002356:	bf01      	itttt	eq
 8002358:	6819      	ldreq	r1, [r3, #0]
 800235a:	685b      	ldreq	r3, [r3, #4]
 800235c:	1809      	addeq	r1, r1, r0
 800235e:	6021      	streq	r1, [r4, #0]
 8002360:	e7ed      	b.n	800233e <_free_r+0x1e>
 8002362:	461a      	mov	r2, r3
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	b10b      	cbz	r3, 800236c <_free_r+0x4c>
 8002368:	42a3      	cmp	r3, r4
 800236a:	d9fa      	bls.n	8002362 <_free_r+0x42>
 800236c:	6811      	ldr	r1, [r2, #0]
 800236e:	1850      	adds	r0, r2, r1
 8002370:	42a0      	cmp	r0, r4
 8002372:	d10b      	bne.n	800238c <_free_r+0x6c>
 8002374:	6820      	ldr	r0, [r4, #0]
 8002376:	4401      	add	r1, r0
 8002378:	1850      	adds	r0, r2, r1
 800237a:	4283      	cmp	r3, r0
 800237c:	6011      	str	r1, [r2, #0]
 800237e:	d1e0      	bne.n	8002342 <_free_r+0x22>
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4408      	add	r0, r1
 8002386:	6010      	str	r0, [r2, #0]
 8002388:	6053      	str	r3, [r2, #4]
 800238a:	e7da      	b.n	8002342 <_free_r+0x22>
 800238c:	d902      	bls.n	8002394 <_free_r+0x74>
 800238e:	230c      	movs	r3, #12
 8002390:	602b      	str	r3, [r5, #0]
 8002392:	e7d6      	b.n	8002342 <_free_r+0x22>
 8002394:	6820      	ldr	r0, [r4, #0]
 8002396:	1821      	adds	r1, r4, r0
 8002398:	428b      	cmp	r3, r1
 800239a:	bf01      	itttt	eq
 800239c:	6819      	ldreq	r1, [r3, #0]
 800239e:	685b      	ldreq	r3, [r3, #4]
 80023a0:	1809      	addeq	r1, r1, r0
 80023a2:	6021      	streq	r1, [r4, #0]
 80023a4:	6063      	str	r3, [r4, #4]
 80023a6:	6054      	str	r4, [r2, #4]
 80023a8:	e7cb      	b.n	8002342 <_free_r+0x22>
 80023aa:	bd38      	pop	{r3, r4, r5, pc}
 80023ac:	200031d8 	.word	0x200031d8

080023b0 <sbrk_aligned>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4e0f      	ldr	r6, [pc, #60]	@ (80023f0 <sbrk_aligned+0x40>)
 80023b4:	460c      	mov	r4, r1
 80023b6:	6831      	ldr	r1, [r6, #0]
 80023b8:	4605      	mov	r5, r0
 80023ba:	b911      	cbnz	r1, 80023c2 <sbrk_aligned+0x12>
 80023bc:	f000 fba8 	bl	8002b10 <_sbrk_r>
 80023c0:	6030      	str	r0, [r6, #0]
 80023c2:	4621      	mov	r1, r4
 80023c4:	4628      	mov	r0, r5
 80023c6:	f000 fba3 	bl	8002b10 <_sbrk_r>
 80023ca:	1c43      	adds	r3, r0, #1
 80023cc:	d103      	bne.n	80023d6 <sbrk_aligned+0x26>
 80023ce:	f04f 34ff 	mov.w	r4, #4294967295
 80023d2:	4620      	mov	r0, r4
 80023d4:	bd70      	pop	{r4, r5, r6, pc}
 80023d6:	1cc4      	adds	r4, r0, #3
 80023d8:	f024 0403 	bic.w	r4, r4, #3
 80023dc:	42a0      	cmp	r0, r4
 80023de:	d0f8      	beq.n	80023d2 <sbrk_aligned+0x22>
 80023e0:	1a21      	subs	r1, r4, r0
 80023e2:	4628      	mov	r0, r5
 80023e4:	f000 fb94 	bl	8002b10 <_sbrk_r>
 80023e8:	3001      	adds	r0, #1
 80023ea:	d1f2      	bne.n	80023d2 <sbrk_aligned+0x22>
 80023ec:	e7ef      	b.n	80023ce <sbrk_aligned+0x1e>
 80023ee:	bf00      	nop
 80023f0:	200031d4 	.word	0x200031d4

080023f4 <_malloc_r>:
 80023f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023f8:	1ccd      	adds	r5, r1, #3
 80023fa:	f025 0503 	bic.w	r5, r5, #3
 80023fe:	3508      	adds	r5, #8
 8002400:	2d0c      	cmp	r5, #12
 8002402:	bf38      	it	cc
 8002404:	250c      	movcc	r5, #12
 8002406:	2d00      	cmp	r5, #0
 8002408:	4606      	mov	r6, r0
 800240a:	db01      	blt.n	8002410 <_malloc_r+0x1c>
 800240c:	42a9      	cmp	r1, r5
 800240e:	d904      	bls.n	800241a <_malloc_r+0x26>
 8002410:	230c      	movs	r3, #12
 8002412:	6033      	str	r3, [r6, #0]
 8002414:	2000      	movs	r0, #0
 8002416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800241a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80024f0 <_malloc_r+0xfc>
 800241e:	f000 f869 	bl	80024f4 <__malloc_lock>
 8002422:	f8d8 3000 	ldr.w	r3, [r8]
 8002426:	461c      	mov	r4, r3
 8002428:	bb44      	cbnz	r4, 800247c <_malloc_r+0x88>
 800242a:	4629      	mov	r1, r5
 800242c:	4630      	mov	r0, r6
 800242e:	f7ff ffbf 	bl	80023b0 <sbrk_aligned>
 8002432:	1c43      	adds	r3, r0, #1
 8002434:	4604      	mov	r4, r0
 8002436:	d158      	bne.n	80024ea <_malloc_r+0xf6>
 8002438:	f8d8 4000 	ldr.w	r4, [r8]
 800243c:	4627      	mov	r7, r4
 800243e:	2f00      	cmp	r7, #0
 8002440:	d143      	bne.n	80024ca <_malloc_r+0xd6>
 8002442:	2c00      	cmp	r4, #0
 8002444:	d04b      	beq.n	80024de <_malloc_r+0xea>
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	4639      	mov	r1, r7
 800244a:	4630      	mov	r0, r6
 800244c:	eb04 0903 	add.w	r9, r4, r3
 8002450:	f000 fb5e 	bl	8002b10 <_sbrk_r>
 8002454:	4581      	cmp	r9, r0
 8002456:	d142      	bne.n	80024de <_malloc_r+0xea>
 8002458:	6821      	ldr	r1, [r4, #0]
 800245a:	4630      	mov	r0, r6
 800245c:	1a6d      	subs	r5, r5, r1
 800245e:	4629      	mov	r1, r5
 8002460:	f7ff ffa6 	bl	80023b0 <sbrk_aligned>
 8002464:	3001      	adds	r0, #1
 8002466:	d03a      	beq.n	80024de <_malloc_r+0xea>
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	442b      	add	r3, r5
 800246c:	6023      	str	r3, [r4, #0]
 800246e:	f8d8 3000 	ldr.w	r3, [r8]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	bb62      	cbnz	r2, 80024d0 <_malloc_r+0xdc>
 8002476:	f8c8 7000 	str.w	r7, [r8]
 800247a:	e00f      	b.n	800249c <_malloc_r+0xa8>
 800247c:	6822      	ldr	r2, [r4, #0]
 800247e:	1b52      	subs	r2, r2, r5
 8002480:	d420      	bmi.n	80024c4 <_malloc_r+0xd0>
 8002482:	2a0b      	cmp	r2, #11
 8002484:	d917      	bls.n	80024b6 <_malloc_r+0xc2>
 8002486:	1961      	adds	r1, r4, r5
 8002488:	42a3      	cmp	r3, r4
 800248a:	6025      	str	r5, [r4, #0]
 800248c:	bf18      	it	ne
 800248e:	6059      	strne	r1, [r3, #4]
 8002490:	6863      	ldr	r3, [r4, #4]
 8002492:	bf08      	it	eq
 8002494:	f8c8 1000 	streq.w	r1, [r8]
 8002498:	5162      	str	r2, [r4, r5]
 800249a:	604b      	str	r3, [r1, #4]
 800249c:	4630      	mov	r0, r6
 800249e:	f000 f82f 	bl	8002500 <__malloc_unlock>
 80024a2:	f104 000b 	add.w	r0, r4, #11
 80024a6:	1d23      	adds	r3, r4, #4
 80024a8:	f020 0007 	bic.w	r0, r0, #7
 80024ac:	1ac2      	subs	r2, r0, r3
 80024ae:	bf1c      	itt	ne
 80024b0:	1a1b      	subne	r3, r3, r0
 80024b2:	50a3      	strne	r3, [r4, r2]
 80024b4:	e7af      	b.n	8002416 <_malloc_r+0x22>
 80024b6:	6862      	ldr	r2, [r4, #4]
 80024b8:	42a3      	cmp	r3, r4
 80024ba:	bf0c      	ite	eq
 80024bc:	f8c8 2000 	streq.w	r2, [r8]
 80024c0:	605a      	strne	r2, [r3, #4]
 80024c2:	e7eb      	b.n	800249c <_malloc_r+0xa8>
 80024c4:	4623      	mov	r3, r4
 80024c6:	6864      	ldr	r4, [r4, #4]
 80024c8:	e7ae      	b.n	8002428 <_malloc_r+0x34>
 80024ca:	463c      	mov	r4, r7
 80024cc:	687f      	ldr	r7, [r7, #4]
 80024ce:	e7b6      	b.n	800243e <_malloc_r+0x4a>
 80024d0:	461a      	mov	r2, r3
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	42a3      	cmp	r3, r4
 80024d6:	d1fb      	bne.n	80024d0 <_malloc_r+0xdc>
 80024d8:	2300      	movs	r3, #0
 80024da:	6053      	str	r3, [r2, #4]
 80024dc:	e7de      	b.n	800249c <_malloc_r+0xa8>
 80024de:	230c      	movs	r3, #12
 80024e0:	4630      	mov	r0, r6
 80024e2:	6033      	str	r3, [r6, #0]
 80024e4:	f000 f80c 	bl	8002500 <__malloc_unlock>
 80024e8:	e794      	b.n	8002414 <_malloc_r+0x20>
 80024ea:	6005      	str	r5, [r0, #0]
 80024ec:	e7d6      	b.n	800249c <_malloc_r+0xa8>
 80024ee:	bf00      	nop
 80024f0:	200031d8 	.word	0x200031d8

080024f4 <__malloc_lock>:
 80024f4:	4801      	ldr	r0, [pc, #4]	@ (80024fc <__malloc_lock+0x8>)
 80024f6:	f7ff bf03 	b.w	8002300 <__retarget_lock_acquire_recursive>
 80024fa:	bf00      	nop
 80024fc:	200031d0 	.word	0x200031d0

08002500 <__malloc_unlock>:
 8002500:	4801      	ldr	r0, [pc, #4]	@ (8002508 <__malloc_unlock+0x8>)
 8002502:	f7ff befe 	b.w	8002302 <__retarget_lock_release_recursive>
 8002506:	bf00      	nop
 8002508:	200031d0 	.word	0x200031d0

0800250c <__ssputs_r>:
 800250c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002510:	461f      	mov	r7, r3
 8002512:	688e      	ldr	r6, [r1, #8]
 8002514:	4682      	mov	sl, r0
 8002516:	42be      	cmp	r6, r7
 8002518:	460c      	mov	r4, r1
 800251a:	4690      	mov	r8, r2
 800251c:	680b      	ldr	r3, [r1, #0]
 800251e:	d82d      	bhi.n	800257c <__ssputs_r+0x70>
 8002520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002524:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002528:	d026      	beq.n	8002578 <__ssputs_r+0x6c>
 800252a:	6965      	ldr	r5, [r4, #20]
 800252c:	6909      	ldr	r1, [r1, #16]
 800252e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002532:	eba3 0901 	sub.w	r9, r3, r1
 8002536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800253a:	1c7b      	adds	r3, r7, #1
 800253c:	444b      	add	r3, r9
 800253e:	106d      	asrs	r5, r5, #1
 8002540:	429d      	cmp	r5, r3
 8002542:	bf38      	it	cc
 8002544:	461d      	movcc	r5, r3
 8002546:	0553      	lsls	r3, r2, #21
 8002548:	d527      	bpl.n	800259a <__ssputs_r+0x8e>
 800254a:	4629      	mov	r1, r5
 800254c:	f7ff ff52 	bl	80023f4 <_malloc_r>
 8002550:	4606      	mov	r6, r0
 8002552:	b360      	cbz	r0, 80025ae <__ssputs_r+0xa2>
 8002554:	464a      	mov	r2, r9
 8002556:	6921      	ldr	r1, [r4, #16]
 8002558:	f7ff fed4 	bl	8002304 <memcpy>
 800255c:	89a3      	ldrh	r3, [r4, #12]
 800255e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002566:	81a3      	strh	r3, [r4, #12]
 8002568:	6126      	str	r6, [r4, #16]
 800256a:	444e      	add	r6, r9
 800256c:	6026      	str	r6, [r4, #0]
 800256e:	463e      	mov	r6, r7
 8002570:	6165      	str	r5, [r4, #20]
 8002572:	eba5 0509 	sub.w	r5, r5, r9
 8002576:	60a5      	str	r5, [r4, #8]
 8002578:	42be      	cmp	r6, r7
 800257a:	d900      	bls.n	800257e <__ssputs_r+0x72>
 800257c:	463e      	mov	r6, r7
 800257e:	4632      	mov	r2, r6
 8002580:	4641      	mov	r1, r8
 8002582:	6820      	ldr	r0, [r4, #0]
 8002584:	f000 faaa 	bl	8002adc <memmove>
 8002588:	2000      	movs	r0, #0
 800258a:	68a3      	ldr	r3, [r4, #8]
 800258c:	1b9b      	subs	r3, r3, r6
 800258e:	60a3      	str	r3, [r4, #8]
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	4433      	add	r3, r6
 8002594:	6023      	str	r3, [r4, #0]
 8002596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800259a:	462a      	mov	r2, r5
 800259c:	f000 fad6 	bl	8002b4c <_realloc_r>
 80025a0:	4606      	mov	r6, r0
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d1e0      	bne.n	8002568 <__ssputs_r+0x5c>
 80025a6:	4650      	mov	r0, sl
 80025a8:	6921      	ldr	r1, [r4, #16]
 80025aa:	f7ff feb9 	bl	8002320 <_free_r>
 80025ae:	230c      	movs	r3, #12
 80025b0:	f8ca 3000 	str.w	r3, [sl]
 80025b4:	89a3      	ldrh	r3, [r4, #12]
 80025b6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025be:	81a3      	strh	r3, [r4, #12]
 80025c0:	e7e9      	b.n	8002596 <__ssputs_r+0x8a>
	...

080025c4 <_svfiprintf_r>:
 80025c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c8:	4698      	mov	r8, r3
 80025ca:	898b      	ldrh	r3, [r1, #12]
 80025cc:	4607      	mov	r7, r0
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	460d      	mov	r5, r1
 80025d2:	4614      	mov	r4, r2
 80025d4:	b09d      	sub	sp, #116	@ 0x74
 80025d6:	d510      	bpl.n	80025fa <_svfiprintf_r+0x36>
 80025d8:	690b      	ldr	r3, [r1, #16]
 80025da:	b973      	cbnz	r3, 80025fa <_svfiprintf_r+0x36>
 80025dc:	2140      	movs	r1, #64	@ 0x40
 80025de:	f7ff ff09 	bl	80023f4 <_malloc_r>
 80025e2:	6028      	str	r0, [r5, #0]
 80025e4:	6128      	str	r0, [r5, #16]
 80025e6:	b930      	cbnz	r0, 80025f6 <_svfiprintf_r+0x32>
 80025e8:	230c      	movs	r3, #12
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	b01d      	add	sp, #116	@ 0x74
 80025f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f6:	2340      	movs	r3, #64	@ 0x40
 80025f8:	616b      	str	r3, [r5, #20]
 80025fa:	2300      	movs	r3, #0
 80025fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80025fe:	2320      	movs	r3, #32
 8002600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002604:	2330      	movs	r3, #48	@ 0x30
 8002606:	f04f 0901 	mov.w	r9, #1
 800260a:	f8cd 800c 	str.w	r8, [sp, #12]
 800260e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80027a8 <_svfiprintf_r+0x1e4>
 8002612:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002616:	4623      	mov	r3, r4
 8002618:	469a      	mov	sl, r3
 800261a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800261e:	b10a      	cbz	r2, 8002624 <_svfiprintf_r+0x60>
 8002620:	2a25      	cmp	r2, #37	@ 0x25
 8002622:	d1f9      	bne.n	8002618 <_svfiprintf_r+0x54>
 8002624:	ebba 0b04 	subs.w	fp, sl, r4
 8002628:	d00b      	beq.n	8002642 <_svfiprintf_r+0x7e>
 800262a:	465b      	mov	r3, fp
 800262c:	4622      	mov	r2, r4
 800262e:	4629      	mov	r1, r5
 8002630:	4638      	mov	r0, r7
 8002632:	f7ff ff6b 	bl	800250c <__ssputs_r>
 8002636:	3001      	adds	r0, #1
 8002638:	f000 80a7 	beq.w	800278a <_svfiprintf_r+0x1c6>
 800263c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800263e:	445a      	add	r2, fp
 8002640:	9209      	str	r2, [sp, #36]	@ 0x24
 8002642:	f89a 3000 	ldrb.w	r3, [sl]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 809f 	beq.w	800278a <_svfiprintf_r+0x1c6>
 800264c:	2300      	movs	r3, #0
 800264e:	f04f 32ff 	mov.w	r2, #4294967295
 8002652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002656:	f10a 0a01 	add.w	sl, sl, #1
 800265a:	9304      	str	r3, [sp, #16]
 800265c:	9307      	str	r3, [sp, #28]
 800265e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002662:	931a      	str	r3, [sp, #104]	@ 0x68
 8002664:	4654      	mov	r4, sl
 8002666:	2205      	movs	r2, #5
 8002668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800266c:	484e      	ldr	r0, [pc, #312]	@ (80027a8 <_svfiprintf_r+0x1e4>)
 800266e:	f000 fa5f 	bl	8002b30 <memchr>
 8002672:	9a04      	ldr	r2, [sp, #16]
 8002674:	b9d8      	cbnz	r0, 80026ae <_svfiprintf_r+0xea>
 8002676:	06d0      	lsls	r0, r2, #27
 8002678:	bf44      	itt	mi
 800267a:	2320      	movmi	r3, #32
 800267c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002680:	0711      	lsls	r1, r2, #28
 8002682:	bf44      	itt	mi
 8002684:	232b      	movmi	r3, #43	@ 0x2b
 8002686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800268a:	f89a 3000 	ldrb.w	r3, [sl]
 800268e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002690:	d015      	beq.n	80026be <_svfiprintf_r+0xfa>
 8002692:	4654      	mov	r4, sl
 8002694:	2000      	movs	r0, #0
 8002696:	f04f 0c0a 	mov.w	ip, #10
 800269a:	9a07      	ldr	r2, [sp, #28]
 800269c:	4621      	mov	r1, r4
 800269e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026a2:	3b30      	subs	r3, #48	@ 0x30
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	d94b      	bls.n	8002740 <_svfiprintf_r+0x17c>
 80026a8:	b1b0      	cbz	r0, 80026d8 <_svfiprintf_r+0x114>
 80026aa:	9207      	str	r2, [sp, #28]
 80026ac:	e014      	b.n	80026d8 <_svfiprintf_r+0x114>
 80026ae:	eba0 0308 	sub.w	r3, r0, r8
 80026b2:	fa09 f303 	lsl.w	r3, r9, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	46a2      	mov	sl, r4
 80026ba:	9304      	str	r3, [sp, #16]
 80026bc:	e7d2      	b.n	8002664 <_svfiprintf_r+0xa0>
 80026be:	9b03      	ldr	r3, [sp, #12]
 80026c0:	1d19      	adds	r1, r3, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	9103      	str	r1, [sp, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bfbb      	ittet	lt
 80026ca:	425b      	neglt	r3, r3
 80026cc:	f042 0202 	orrlt.w	r2, r2, #2
 80026d0:	9307      	strge	r3, [sp, #28]
 80026d2:	9307      	strlt	r3, [sp, #28]
 80026d4:	bfb8      	it	lt
 80026d6:	9204      	strlt	r2, [sp, #16]
 80026d8:	7823      	ldrb	r3, [r4, #0]
 80026da:	2b2e      	cmp	r3, #46	@ 0x2e
 80026dc:	d10a      	bne.n	80026f4 <_svfiprintf_r+0x130>
 80026de:	7863      	ldrb	r3, [r4, #1]
 80026e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80026e2:	d132      	bne.n	800274a <_svfiprintf_r+0x186>
 80026e4:	9b03      	ldr	r3, [sp, #12]
 80026e6:	3402      	adds	r4, #2
 80026e8:	1d1a      	adds	r2, r3, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	9203      	str	r2, [sp, #12]
 80026ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80026f2:	9305      	str	r3, [sp, #20]
 80026f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80027ac <_svfiprintf_r+0x1e8>
 80026f8:	2203      	movs	r2, #3
 80026fa:	4650      	mov	r0, sl
 80026fc:	7821      	ldrb	r1, [r4, #0]
 80026fe:	f000 fa17 	bl	8002b30 <memchr>
 8002702:	b138      	cbz	r0, 8002714 <_svfiprintf_r+0x150>
 8002704:	2240      	movs	r2, #64	@ 0x40
 8002706:	9b04      	ldr	r3, [sp, #16]
 8002708:	eba0 000a 	sub.w	r0, r0, sl
 800270c:	4082      	lsls	r2, r0
 800270e:	4313      	orrs	r3, r2
 8002710:	3401      	adds	r4, #1
 8002712:	9304      	str	r3, [sp, #16]
 8002714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002718:	2206      	movs	r2, #6
 800271a:	4825      	ldr	r0, [pc, #148]	@ (80027b0 <_svfiprintf_r+0x1ec>)
 800271c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002720:	f000 fa06 	bl	8002b30 <memchr>
 8002724:	2800      	cmp	r0, #0
 8002726:	d036      	beq.n	8002796 <_svfiprintf_r+0x1d2>
 8002728:	4b22      	ldr	r3, [pc, #136]	@ (80027b4 <_svfiprintf_r+0x1f0>)
 800272a:	bb1b      	cbnz	r3, 8002774 <_svfiprintf_r+0x1b0>
 800272c:	9b03      	ldr	r3, [sp, #12]
 800272e:	3307      	adds	r3, #7
 8002730:	f023 0307 	bic.w	r3, r3, #7
 8002734:	3308      	adds	r3, #8
 8002736:	9303      	str	r3, [sp, #12]
 8002738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800273a:	4433      	add	r3, r6
 800273c:	9309      	str	r3, [sp, #36]	@ 0x24
 800273e:	e76a      	b.n	8002616 <_svfiprintf_r+0x52>
 8002740:	460c      	mov	r4, r1
 8002742:	2001      	movs	r0, #1
 8002744:	fb0c 3202 	mla	r2, ip, r2, r3
 8002748:	e7a8      	b.n	800269c <_svfiprintf_r+0xd8>
 800274a:	2300      	movs	r3, #0
 800274c:	f04f 0c0a 	mov.w	ip, #10
 8002750:	4619      	mov	r1, r3
 8002752:	3401      	adds	r4, #1
 8002754:	9305      	str	r3, [sp, #20]
 8002756:	4620      	mov	r0, r4
 8002758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800275c:	3a30      	subs	r2, #48	@ 0x30
 800275e:	2a09      	cmp	r2, #9
 8002760:	d903      	bls.n	800276a <_svfiprintf_r+0x1a6>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0c6      	beq.n	80026f4 <_svfiprintf_r+0x130>
 8002766:	9105      	str	r1, [sp, #20]
 8002768:	e7c4      	b.n	80026f4 <_svfiprintf_r+0x130>
 800276a:	4604      	mov	r4, r0
 800276c:	2301      	movs	r3, #1
 800276e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002772:	e7f0      	b.n	8002756 <_svfiprintf_r+0x192>
 8002774:	ab03      	add	r3, sp, #12
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	462a      	mov	r2, r5
 800277a:	4638      	mov	r0, r7
 800277c:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <_svfiprintf_r+0x1f4>)
 800277e:	a904      	add	r1, sp, #16
 8002780:	f3af 8000 	nop.w
 8002784:	1c42      	adds	r2, r0, #1
 8002786:	4606      	mov	r6, r0
 8002788:	d1d6      	bne.n	8002738 <_svfiprintf_r+0x174>
 800278a:	89ab      	ldrh	r3, [r5, #12]
 800278c:	065b      	lsls	r3, r3, #25
 800278e:	f53f af2d 	bmi.w	80025ec <_svfiprintf_r+0x28>
 8002792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002794:	e72c      	b.n	80025f0 <_svfiprintf_r+0x2c>
 8002796:	ab03      	add	r3, sp, #12
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	462a      	mov	r2, r5
 800279c:	4638      	mov	r0, r7
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <_svfiprintf_r+0x1f4>)
 80027a0:	a904      	add	r1, sp, #16
 80027a2:	f000 f87d 	bl	80028a0 <_printf_i>
 80027a6:	e7ed      	b.n	8002784 <_svfiprintf_r+0x1c0>
 80027a8:	08002d84 	.word	0x08002d84
 80027ac:	08002d8a 	.word	0x08002d8a
 80027b0:	08002d8e 	.word	0x08002d8e
 80027b4:	00000000 	.word	0x00000000
 80027b8:	0800250d 	.word	0x0800250d

080027bc <_printf_common>:
 80027bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c0:	4616      	mov	r6, r2
 80027c2:	4698      	mov	r8, r3
 80027c4:	688a      	ldr	r2, [r1, #8]
 80027c6:	690b      	ldr	r3, [r1, #16]
 80027c8:	4607      	mov	r7, r0
 80027ca:	4293      	cmp	r3, r2
 80027cc:	bfb8      	it	lt
 80027ce:	4613      	movlt	r3, r2
 80027d0:	6033      	str	r3, [r6, #0]
 80027d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80027d6:	460c      	mov	r4, r1
 80027d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80027dc:	b10a      	cbz	r2, 80027e2 <_printf_common+0x26>
 80027de:	3301      	adds	r3, #1
 80027e0:	6033      	str	r3, [r6, #0]
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	0699      	lsls	r1, r3, #26
 80027e6:	bf42      	ittt	mi
 80027e8:	6833      	ldrmi	r3, [r6, #0]
 80027ea:	3302      	addmi	r3, #2
 80027ec:	6033      	strmi	r3, [r6, #0]
 80027ee:	6825      	ldr	r5, [r4, #0]
 80027f0:	f015 0506 	ands.w	r5, r5, #6
 80027f4:	d106      	bne.n	8002804 <_printf_common+0x48>
 80027f6:	f104 0a19 	add.w	sl, r4, #25
 80027fa:	68e3      	ldr	r3, [r4, #12]
 80027fc:	6832      	ldr	r2, [r6, #0]
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	42ab      	cmp	r3, r5
 8002802:	dc2b      	bgt.n	800285c <_printf_common+0xa0>
 8002804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002808:	6822      	ldr	r2, [r4, #0]
 800280a:	3b00      	subs	r3, #0
 800280c:	bf18      	it	ne
 800280e:	2301      	movne	r3, #1
 8002810:	0692      	lsls	r2, r2, #26
 8002812:	d430      	bmi.n	8002876 <_printf_common+0xba>
 8002814:	4641      	mov	r1, r8
 8002816:	4638      	mov	r0, r7
 8002818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800281c:	47c8      	blx	r9
 800281e:	3001      	adds	r0, #1
 8002820:	d023      	beq.n	800286a <_printf_common+0xae>
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	6922      	ldr	r2, [r4, #16]
 8002826:	f003 0306 	and.w	r3, r3, #6
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf14      	ite	ne
 800282e:	2500      	movne	r5, #0
 8002830:	6833      	ldreq	r3, [r6, #0]
 8002832:	f04f 0600 	mov.w	r6, #0
 8002836:	bf08      	it	eq
 8002838:	68e5      	ldreq	r5, [r4, #12]
 800283a:	f104 041a 	add.w	r4, r4, #26
 800283e:	bf08      	it	eq
 8002840:	1aed      	subeq	r5, r5, r3
 8002842:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002846:	bf08      	it	eq
 8002848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800284c:	4293      	cmp	r3, r2
 800284e:	bfc4      	itt	gt
 8002850:	1a9b      	subgt	r3, r3, r2
 8002852:	18ed      	addgt	r5, r5, r3
 8002854:	42b5      	cmp	r5, r6
 8002856:	d11a      	bne.n	800288e <_printf_common+0xd2>
 8002858:	2000      	movs	r0, #0
 800285a:	e008      	b.n	800286e <_printf_common+0xb2>
 800285c:	2301      	movs	r3, #1
 800285e:	4652      	mov	r2, sl
 8002860:	4641      	mov	r1, r8
 8002862:	4638      	mov	r0, r7
 8002864:	47c8      	blx	r9
 8002866:	3001      	adds	r0, #1
 8002868:	d103      	bne.n	8002872 <_printf_common+0xb6>
 800286a:	f04f 30ff 	mov.w	r0, #4294967295
 800286e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002872:	3501      	adds	r5, #1
 8002874:	e7c1      	b.n	80027fa <_printf_common+0x3e>
 8002876:	2030      	movs	r0, #48	@ 0x30
 8002878:	18e1      	adds	r1, r4, r3
 800287a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002884:	4422      	add	r2, r4
 8002886:	3302      	adds	r3, #2
 8002888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800288c:	e7c2      	b.n	8002814 <_printf_common+0x58>
 800288e:	2301      	movs	r3, #1
 8002890:	4622      	mov	r2, r4
 8002892:	4641      	mov	r1, r8
 8002894:	4638      	mov	r0, r7
 8002896:	47c8      	blx	r9
 8002898:	3001      	adds	r0, #1
 800289a:	d0e6      	beq.n	800286a <_printf_common+0xae>
 800289c:	3601      	adds	r6, #1
 800289e:	e7d9      	b.n	8002854 <_printf_common+0x98>

080028a0 <_printf_i>:
 80028a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028a4:	7e0f      	ldrb	r7, [r1, #24]
 80028a6:	4691      	mov	r9, r2
 80028a8:	2f78      	cmp	r7, #120	@ 0x78
 80028aa:	4680      	mov	r8, r0
 80028ac:	460c      	mov	r4, r1
 80028ae:	469a      	mov	sl, r3
 80028b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80028b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80028b6:	d807      	bhi.n	80028c8 <_printf_i+0x28>
 80028b8:	2f62      	cmp	r7, #98	@ 0x62
 80028ba:	d80a      	bhi.n	80028d2 <_printf_i+0x32>
 80028bc:	2f00      	cmp	r7, #0
 80028be:	f000 80d1 	beq.w	8002a64 <_printf_i+0x1c4>
 80028c2:	2f58      	cmp	r7, #88	@ 0x58
 80028c4:	f000 80b8 	beq.w	8002a38 <_printf_i+0x198>
 80028c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80028d0:	e03a      	b.n	8002948 <_printf_i+0xa8>
 80028d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80028d6:	2b15      	cmp	r3, #21
 80028d8:	d8f6      	bhi.n	80028c8 <_printf_i+0x28>
 80028da:	a101      	add	r1, pc, #4	@ (adr r1, 80028e0 <_printf_i+0x40>)
 80028dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028e0:	08002939 	.word	0x08002939
 80028e4:	0800294d 	.word	0x0800294d
 80028e8:	080028c9 	.word	0x080028c9
 80028ec:	080028c9 	.word	0x080028c9
 80028f0:	080028c9 	.word	0x080028c9
 80028f4:	080028c9 	.word	0x080028c9
 80028f8:	0800294d 	.word	0x0800294d
 80028fc:	080028c9 	.word	0x080028c9
 8002900:	080028c9 	.word	0x080028c9
 8002904:	080028c9 	.word	0x080028c9
 8002908:	080028c9 	.word	0x080028c9
 800290c:	08002a4b 	.word	0x08002a4b
 8002910:	08002977 	.word	0x08002977
 8002914:	08002a05 	.word	0x08002a05
 8002918:	080028c9 	.word	0x080028c9
 800291c:	080028c9 	.word	0x080028c9
 8002920:	08002a6d 	.word	0x08002a6d
 8002924:	080028c9 	.word	0x080028c9
 8002928:	08002977 	.word	0x08002977
 800292c:	080028c9 	.word	0x080028c9
 8002930:	080028c9 	.word	0x080028c9
 8002934:	08002a0d 	.word	0x08002a0d
 8002938:	6833      	ldr	r3, [r6, #0]
 800293a:	1d1a      	adds	r2, r3, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6032      	str	r2, [r6, #0]
 8002940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002944:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002948:	2301      	movs	r3, #1
 800294a:	e09c      	b.n	8002a86 <_printf_i+0x1e6>
 800294c:	6833      	ldr	r3, [r6, #0]
 800294e:	6820      	ldr	r0, [r4, #0]
 8002950:	1d19      	adds	r1, r3, #4
 8002952:	6031      	str	r1, [r6, #0]
 8002954:	0606      	lsls	r6, r0, #24
 8002956:	d501      	bpl.n	800295c <_printf_i+0xbc>
 8002958:	681d      	ldr	r5, [r3, #0]
 800295a:	e003      	b.n	8002964 <_printf_i+0xc4>
 800295c:	0645      	lsls	r5, r0, #25
 800295e:	d5fb      	bpl.n	8002958 <_printf_i+0xb8>
 8002960:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002964:	2d00      	cmp	r5, #0
 8002966:	da03      	bge.n	8002970 <_printf_i+0xd0>
 8002968:	232d      	movs	r3, #45	@ 0x2d
 800296a:	426d      	negs	r5, r5
 800296c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002970:	230a      	movs	r3, #10
 8002972:	4858      	ldr	r0, [pc, #352]	@ (8002ad4 <_printf_i+0x234>)
 8002974:	e011      	b.n	800299a <_printf_i+0xfa>
 8002976:	6821      	ldr	r1, [r4, #0]
 8002978:	6833      	ldr	r3, [r6, #0]
 800297a:	0608      	lsls	r0, r1, #24
 800297c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002980:	d402      	bmi.n	8002988 <_printf_i+0xe8>
 8002982:	0649      	lsls	r1, r1, #25
 8002984:	bf48      	it	mi
 8002986:	b2ad      	uxthmi	r5, r5
 8002988:	2f6f      	cmp	r7, #111	@ 0x6f
 800298a:	6033      	str	r3, [r6, #0]
 800298c:	bf14      	ite	ne
 800298e:	230a      	movne	r3, #10
 8002990:	2308      	moveq	r3, #8
 8002992:	4850      	ldr	r0, [pc, #320]	@ (8002ad4 <_printf_i+0x234>)
 8002994:	2100      	movs	r1, #0
 8002996:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800299a:	6866      	ldr	r6, [r4, #4]
 800299c:	2e00      	cmp	r6, #0
 800299e:	60a6      	str	r6, [r4, #8]
 80029a0:	db05      	blt.n	80029ae <_printf_i+0x10e>
 80029a2:	6821      	ldr	r1, [r4, #0]
 80029a4:	432e      	orrs	r6, r5
 80029a6:	f021 0104 	bic.w	r1, r1, #4
 80029aa:	6021      	str	r1, [r4, #0]
 80029ac:	d04b      	beq.n	8002a46 <_printf_i+0x1a6>
 80029ae:	4616      	mov	r6, r2
 80029b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80029b4:	fb03 5711 	mls	r7, r3, r1, r5
 80029b8:	5dc7      	ldrb	r7, [r0, r7]
 80029ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80029be:	462f      	mov	r7, r5
 80029c0:	42bb      	cmp	r3, r7
 80029c2:	460d      	mov	r5, r1
 80029c4:	d9f4      	bls.n	80029b0 <_printf_i+0x110>
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d10b      	bne.n	80029e2 <_printf_i+0x142>
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	07df      	lsls	r7, r3, #31
 80029ce:	d508      	bpl.n	80029e2 <_printf_i+0x142>
 80029d0:	6923      	ldr	r3, [r4, #16]
 80029d2:	6861      	ldr	r1, [r4, #4]
 80029d4:	4299      	cmp	r1, r3
 80029d6:	bfde      	ittt	le
 80029d8:	2330      	movle	r3, #48	@ 0x30
 80029da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80029de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80029e2:	1b92      	subs	r2, r2, r6
 80029e4:	6122      	str	r2, [r4, #16]
 80029e6:	464b      	mov	r3, r9
 80029e8:	4621      	mov	r1, r4
 80029ea:	4640      	mov	r0, r8
 80029ec:	f8cd a000 	str.w	sl, [sp]
 80029f0:	aa03      	add	r2, sp, #12
 80029f2:	f7ff fee3 	bl	80027bc <_printf_common>
 80029f6:	3001      	adds	r0, #1
 80029f8:	d14a      	bne.n	8002a90 <_printf_i+0x1f0>
 80029fa:	f04f 30ff 	mov.w	r0, #4294967295
 80029fe:	b004      	add	sp, #16
 8002a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	f043 0320 	orr.w	r3, r3, #32
 8002a0a:	6023      	str	r3, [r4, #0]
 8002a0c:	2778      	movs	r7, #120	@ 0x78
 8002a0e:	4832      	ldr	r0, [pc, #200]	@ (8002ad8 <_printf_i+0x238>)
 8002a10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	6831      	ldr	r1, [r6, #0]
 8002a18:	061f      	lsls	r7, r3, #24
 8002a1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002a1e:	d402      	bmi.n	8002a26 <_printf_i+0x186>
 8002a20:	065f      	lsls	r7, r3, #25
 8002a22:	bf48      	it	mi
 8002a24:	b2ad      	uxthmi	r5, r5
 8002a26:	6031      	str	r1, [r6, #0]
 8002a28:	07d9      	lsls	r1, r3, #31
 8002a2a:	bf44      	itt	mi
 8002a2c:	f043 0320 	orrmi.w	r3, r3, #32
 8002a30:	6023      	strmi	r3, [r4, #0]
 8002a32:	b11d      	cbz	r5, 8002a3c <_printf_i+0x19c>
 8002a34:	2310      	movs	r3, #16
 8002a36:	e7ad      	b.n	8002994 <_printf_i+0xf4>
 8002a38:	4826      	ldr	r0, [pc, #152]	@ (8002ad4 <_printf_i+0x234>)
 8002a3a:	e7e9      	b.n	8002a10 <_printf_i+0x170>
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	f023 0320 	bic.w	r3, r3, #32
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	e7f6      	b.n	8002a34 <_printf_i+0x194>
 8002a46:	4616      	mov	r6, r2
 8002a48:	e7bd      	b.n	80029c6 <_printf_i+0x126>
 8002a4a:	6833      	ldr	r3, [r6, #0]
 8002a4c:	6825      	ldr	r5, [r4, #0]
 8002a4e:	1d18      	adds	r0, r3, #4
 8002a50:	6961      	ldr	r1, [r4, #20]
 8002a52:	6030      	str	r0, [r6, #0]
 8002a54:	062e      	lsls	r6, r5, #24
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	d501      	bpl.n	8002a5e <_printf_i+0x1be>
 8002a5a:	6019      	str	r1, [r3, #0]
 8002a5c:	e002      	b.n	8002a64 <_printf_i+0x1c4>
 8002a5e:	0668      	lsls	r0, r5, #25
 8002a60:	d5fb      	bpl.n	8002a5a <_printf_i+0x1ba>
 8002a62:	8019      	strh	r1, [r3, #0]
 8002a64:	2300      	movs	r3, #0
 8002a66:	4616      	mov	r6, r2
 8002a68:	6123      	str	r3, [r4, #16]
 8002a6a:	e7bc      	b.n	80029e6 <_printf_i+0x146>
 8002a6c:	6833      	ldr	r3, [r6, #0]
 8002a6e:	2100      	movs	r1, #0
 8002a70:	1d1a      	adds	r2, r3, #4
 8002a72:	6032      	str	r2, [r6, #0]
 8002a74:	681e      	ldr	r6, [r3, #0]
 8002a76:	6862      	ldr	r2, [r4, #4]
 8002a78:	4630      	mov	r0, r6
 8002a7a:	f000 f859 	bl	8002b30 <memchr>
 8002a7e:	b108      	cbz	r0, 8002a84 <_printf_i+0x1e4>
 8002a80:	1b80      	subs	r0, r0, r6
 8002a82:	6060      	str	r0, [r4, #4]
 8002a84:	6863      	ldr	r3, [r4, #4]
 8002a86:	6123      	str	r3, [r4, #16]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a8e:	e7aa      	b.n	80029e6 <_printf_i+0x146>
 8002a90:	4632      	mov	r2, r6
 8002a92:	4649      	mov	r1, r9
 8002a94:	4640      	mov	r0, r8
 8002a96:	6923      	ldr	r3, [r4, #16]
 8002a98:	47d0      	blx	sl
 8002a9a:	3001      	adds	r0, #1
 8002a9c:	d0ad      	beq.n	80029fa <_printf_i+0x15a>
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	079b      	lsls	r3, r3, #30
 8002aa2:	d413      	bmi.n	8002acc <_printf_i+0x22c>
 8002aa4:	68e0      	ldr	r0, [r4, #12]
 8002aa6:	9b03      	ldr	r3, [sp, #12]
 8002aa8:	4298      	cmp	r0, r3
 8002aaa:	bfb8      	it	lt
 8002aac:	4618      	movlt	r0, r3
 8002aae:	e7a6      	b.n	80029fe <_printf_i+0x15e>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	4632      	mov	r2, r6
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	47d0      	blx	sl
 8002aba:	3001      	adds	r0, #1
 8002abc:	d09d      	beq.n	80029fa <_printf_i+0x15a>
 8002abe:	3501      	adds	r5, #1
 8002ac0:	68e3      	ldr	r3, [r4, #12]
 8002ac2:	9903      	ldr	r1, [sp, #12]
 8002ac4:	1a5b      	subs	r3, r3, r1
 8002ac6:	42ab      	cmp	r3, r5
 8002ac8:	dcf2      	bgt.n	8002ab0 <_printf_i+0x210>
 8002aca:	e7eb      	b.n	8002aa4 <_printf_i+0x204>
 8002acc:	2500      	movs	r5, #0
 8002ace:	f104 0619 	add.w	r6, r4, #25
 8002ad2:	e7f5      	b.n	8002ac0 <_printf_i+0x220>
 8002ad4:	08002d95 	.word	0x08002d95
 8002ad8:	08002da6 	.word	0x08002da6

08002adc <memmove>:
 8002adc:	4288      	cmp	r0, r1
 8002ade:	b510      	push	{r4, lr}
 8002ae0:	eb01 0402 	add.w	r4, r1, r2
 8002ae4:	d902      	bls.n	8002aec <memmove+0x10>
 8002ae6:	4284      	cmp	r4, r0
 8002ae8:	4623      	mov	r3, r4
 8002aea:	d807      	bhi.n	8002afc <memmove+0x20>
 8002aec:	1e43      	subs	r3, r0, #1
 8002aee:	42a1      	cmp	r1, r4
 8002af0:	d008      	beq.n	8002b04 <memmove+0x28>
 8002af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002afa:	e7f8      	b.n	8002aee <memmove+0x12>
 8002afc:	4601      	mov	r1, r0
 8002afe:	4402      	add	r2, r0
 8002b00:	428a      	cmp	r2, r1
 8002b02:	d100      	bne.n	8002b06 <memmove+0x2a>
 8002b04:	bd10      	pop	{r4, pc}
 8002b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b0e:	e7f7      	b.n	8002b00 <memmove+0x24>

08002b10 <_sbrk_r>:
 8002b10:	b538      	push	{r3, r4, r5, lr}
 8002b12:	2300      	movs	r3, #0
 8002b14:	4d05      	ldr	r5, [pc, #20]	@ (8002b2c <_sbrk_r+0x1c>)
 8002b16:	4604      	mov	r4, r0
 8002b18:	4608      	mov	r0, r1
 8002b1a:	602b      	str	r3, [r5, #0]
 8002b1c:	f7fe fb82 	bl	8001224 <_sbrk>
 8002b20:	1c43      	adds	r3, r0, #1
 8002b22:	d102      	bne.n	8002b2a <_sbrk_r+0x1a>
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	b103      	cbz	r3, 8002b2a <_sbrk_r+0x1a>
 8002b28:	6023      	str	r3, [r4, #0]
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
 8002b2c:	200031cc 	.word	0x200031cc

08002b30 <memchr>:
 8002b30:	4603      	mov	r3, r0
 8002b32:	b510      	push	{r4, lr}
 8002b34:	b2c9      	uxtb	r1, r1
 8002b36:	4402      	add	r2, r0
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	d101      	bne.n	8002b42 <memchr+0x12>
 8002b3e:	2000      	movs	r0, #0
 8002b40:	e003      	b.n	8002b4a <memchr+0x1a>
 8002b42:	7804      	ldrb	r4, [r0, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	428c      	cmp	r4, r1
 8002b48:	d1f6      	bne.n	8002b38 <memchr+0x8>
 8002b4a:	bd10      	pop	{r4, pc}

08002b4c <_realloc_r>:
 8002b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b50:	4607      	mov	r7, r0
 8002b52:	4614      	mov	r4, r2
 8002b54:	460d      	mov	r5, r1
 8002b56:	b921      	cbnz	r1, 8002b62 <_realloc_r+0x16>
 8002b58:	4611      	mov	r1, r2
 8002b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b5e:	f7ff bc49 	b.w	80023f4 <_malloc_r>
 8002b62:	b92a      	cbnz	r2, 8002b70 <_realloc_r+0x24>
 8002b64:	f7ff fbdc 	bl	8002320 <_free_r>
 8002b68:	4625      	mov	r5, r4
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b70:	f000 f81a 	bl	8002ba8 <_malloc_usable_size_r>
 8002b74:	4284      	cmp	r4, r0
 8002b76:	4606      	mov	r6, r0
 8002b78:	d802      	bhi.n	8002b80 <_realloc_r+0x34>
 8002b7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b7e:	d8f4      	bhi.n	8002b6a <_realloc_r+0x1e>
 8002b80:	4621      	mov	r1, r4
 8002b82:	4638      	mov	r0, r7
 8002b84:	f7ff fc36 	bl	80023f4 <_malloc_r>
 8002b88:	4680      	mov	r8, r0
 8002b8a:	b908      	cbnz	r0, 8002b90 <_realloc_r+0x44>
 8002b8c:	4645      	mov	r5, r8
 8002b8e:	e7ec      	b.n	8002b6a <_realloc_r+0x1e>
 8002b90:	42b4      	cmp	r4, r6
 8002b92:	4622      	mov	r2, r4
 8002b94:	4629      	mov	r1, r5
 8002b96:	bf28      	it	cs
 8002b98:	4632      	movcs	r2, r6
 8002b9a:	f7ff fbb3 	bl	8002304 <memcpy>
 8002b9e:	4629      	mov	r1, r5
 8002ba0:	4638      	mov	r0, r7
 8002ba2:	f7ff fbbd 	bl	8002320 <_free_r>
 8002ba6:	e7f1      	b.n	8002b8c <_realloc_r+0x40>

08002ba8 <_malloc_usable_size_r>:
 8002ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bac:	1f18      	subs	r0, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bfbc      	itt	lt
 8002bb2:	580b      	ldrlt	r3, [r1, r0]
 8002bb4:	18c0      	addlt	r0, r0, r3
 8002bb6:	4770      	bx	lr

08002bb8 <_init>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	bf00      	nop
 8002bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bbe:	bc08      	pop	{r3}
 8002bc0:	469e      	mov	lr, r3
 8002bc2:	4770      	bx	lr

08002bc4 <_fini>:
 8002bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc6:	bf00      	nop
 8002bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bca:	bc08      	pop	{r3}
 8002bcc:	469e      	mov	lr, r3
 8002bce:	4770      	bx	lr
