
PIANO_GETTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002974  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08002b58  08002b58  00003b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d40  08002d40  00004260  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002d40  08002d40  00003d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d48  08002d48  00004260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d48  08002d48  00003d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d4c  08002d4c  00003d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000260  20000000  08002d50  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000307c  20000260  08002fb0  00004260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200032dc  08002fb0  000042dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004260  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005862  00000000  00000000  00004289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b4  00000000  00000000  00009aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f8  00000000  00000000  0000b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d2  00000000  00000000  0000ba98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003707  00000000  00000000  0000c06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007018  00000000  00000000  0000f771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007231d  00000000  00000000  00016789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00088aa6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f4  00000000  00000000  00088aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  0008afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000260 	.word	0x20000260
 8000200:	00000000 	.word	0x00000000
 8000204:	08002b40 	.word	0x08002b40

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000264 	.word	0x20000264
 8000220:	08002b40 	.word	0x08002b40

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f003 0307 	and.w	r3, r3, #7
 8000242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000244:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <__NVIC_SetPriorityGrouping+0x44>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800024a:	68ba      	ldr	r2, [r7, #8]
 800024c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000250:	4013      	ands	r3, r2
 8000252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800025c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000266:	4a04      	ldr	r2, [pc, #16]	@ (8000278 <__NVIC_SetPriorityGrouping+0x44>)
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	60d3      	str	r3, [r2, #12]
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000280:	4b04      	ldr	r3, [pc, #16]	@ (8000294 <__NVIC_GetPriorityGrouping+0x18>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	0a1b      	lsrs	r3, r3, #8
 8000286:	f003 0307 	and.w	r3, r3, #7
}
 800028a:	4618      	mov	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	db0b      	blt.n	80002c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f003 021f 	and.w	r2, r3, #31
 80002b0:	4906      	ldr	r1, [pc, #24]	@ (80002cc <__NVIC_EnableIRQ+0x34>)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	095b      	lsrs	r3, r3, #5
 80002b8:	2001      	movs	r0, #1
 80002ba:	fa00 f202 	lsl.w	r2, r0, r2
 80002be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	e000e100 	.word	0xe000e100

080002d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	6039      	str	r1, [r7, #0]
 80002da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	db0a      	blt.n	80002fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	490c      	ldr	r1, [pc, #48]	@ (800031c <__NVIC_SetPriority+0x4c>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f8:	e00a      	b.n	8000310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4908      	ldr	r1, [pc, #32]	@ (8000320 <__NVIC_SetPriority+0x50>)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f003 030f 	and.w	r3, r3, #15
 8000306:	3b04      	subs	r3, #4
 8000308:	0112      	lsls	r2, r2, #4
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	440b      	add	r3, r1
 800030e:	761a      	strb	r2, [r3, #24]
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000e100 	.word	0xe000e100
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000324:	b480      	push	{r7}
 8000326:	b089      	sub	sp, #36	@ 0x24
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f003 0307 	and.w	r3, r3, #7
 8000336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	f1c3 0307 	rsb	r3, r3, #7
 800033e:	2b04      	cmp	r3, #4
 8000340:	bf28      	it	cs
 8000342:	2304      	movcs	r3, #4
 8000344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3304      	adds	r3, #4
 800034a:	2b06      	cmp	r3, #6
 800034c:	d902      	bls.n	8000354 <NVIC_EncodePriority+0x30>
 800034e:	69fb      	ldr	r3, [r7, #28]
 8000350:	3b03      	subs	r3, #3
 8000352:	e000      	b.n	8000356 <NVIC_EncodePriority+0x32>
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	f04f 32ff 	mov.w	r2, #4294967295
 800035c:	69bb      	ldr	r3, [r7, #24]
 800035e:	fa02 f303 	lsl.w	r3, r2, r3
 8000362:	43da      	mvns	r2, r3
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	401a      	ands	r2, r3
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800036c:	f04f 31ff 	mov.w	r1, #4294967295
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	43d9      	mvns	r1, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800037c:	4313      	orrs	r3, r2
         );
}
 800037e:	4618      	mov	r0, r3
 8000380:	3724      	adds	r7, #36	@ 0x24
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800038c:	4b04      	ldr	r3, [pc, #16]	@ (80003a0 <LL_RCC_HSI_Enable+0x18>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a03      	ldr	r2, [pc, #12]	@ (80003a0 <LL_RCC_HSI_Enable+0x18>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6013      	str	r3, [r2, #0]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000

080003a4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <LL_RCC_HSI_IsReady+0x20>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f003 0302 	and.w	r3, r3, #2
 80003b0:	2b02      	cmp	r3, #2
 80003b2:	bf0c      	ite	eq
 80003b4:	2301      	moveq	r3, #1
 80003b6:	2300      	movne	r3, #0
 80003b8:	b2db      	uxtb	r3, r3
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40021000 	.word	0x40021000

080003c8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80003d0:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	00db      	lsls	r3, r3, #3
 80003dc:	4903      	ldr	r1, [pc, #12]	@ (80003ec <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80003de:	4313      	orrs	r3, r2
 80003e0:	600b      	str	r3, [r1, #0]
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000

080003f0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003f8:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <LL_RCC_SetSysClkSource+0x24>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	f023 0203 	bic.w	r2, r3, #3
 8000400:	4904      	ldr	r1, [pc, #16]	@ (8000414 <LL_RCC_SetSysClkSource+0x24>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4313      	orrs	r3, r2
 8000406:	604b      	str	r3, [r1, #4]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800041c:	4b03      	ldr	r3, [pc, #12]	@ (800042c <LL_RCC_GetSysClkSource+0x14>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	f003 030c 	and.w	r3, r3, #12
}
 8000424:	4618      	mov	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000

08000430 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <LL_RCC_SetAHBPrescaler+0x24>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000440:	4904      	ldr	r1, [pc, #16]	@ (8000454 <LL_RCC_SetAHBPrescaler+0x24>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4313      	orrs	r3, r2
 8000446:	604b      	str	r3, [r1, #4]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000

08000458 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000460:	4b06      	ldr	r3, [pc, #24]	@ (800047c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000468:	4904      	ldr	r1, [pc, #16]	@ (800047c <LL_RCC_SetAPB1Prescaler+0x24>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4313      	orrs	r3, r2
 800046e:	604b      	str	r3, [r1, #4]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000

08000480 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000490:	4904      	ldr	r1, [pc, #16]	@ (80004a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4313      	orrs	r3, r2
 8000496:	604b      	str	r3, [r1, #4]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000

080004a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <LL_RCC_PLL_Enable+0x18>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a03      	ldr	r2, [pc, #12]	@ (80004c0 <LL_RCC_PLL_Enable+0x18>)
 80004b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004b6:	6013      	str	r3, [r2, #0]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr
 80004c0:	40021000 	.word	0x40021000

080004c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <LL_RCC_PLL_IsReady+0x20>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80004d4:	bf0c      	ite	eq
 80004d6:	2301      	moveq	r3, #1
 80004d8:	2300      	movne	r3, #0
 80004da:	b2db      	uxtb	r3, r3
}
 80004dc:	4618      	mov	r0, r3
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80004f2:	4b08      	ldr	r3, [pc, #32]	@ (8000514 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	430b      	orrs	r3, r1
 8000504:	4903      	ldr	r1, [pc, #12]	@ (8000514 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000506:	4313      	orrs	r3, r2
 8000508:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000

08000518 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000522:	69da      	ldr	r2, [r3, #28]
 8000524:	4907      	ldr	r1, [pc, #28]	@ (8000544 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800052c:	4b05      	ldr	r3, [pc, #20]	@ (8000544 <LL_APB1_GRP1_EnableClock+0x2c>)
 800052e:	69da      	ldr	r2, [r3, #28]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4013      	ands	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	bf00      	nop
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000

08000548 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000550:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000552:	699a      	ldr	r2, [r3, #24]
 8000554:	4907      	ldr	r1, [pc, #28]	@ (8000574 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4313      	orrs	r3, r2
 800055a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800055c:	4b05      	ldr	r3, [pc, #20]	@ (8000574 <LL_APB2_GRP1_EnableClock+0x2c>)
 800055e:	699a      	ldr	r2, [r3, #24]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4013      	ands	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000

08000578 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <LL_FLASH_SetLatency+0x24>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f023 0207 	bic.w	r2, r3, #7
 8000588:	4904      	ldr	r1, [pc, #16]	@ (800059c <LL_FLASH_SetLatency+0x24>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4313      	orrs	r3, r2
 800058e:	600b      	str	r3, [r1, #0]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40022000 	.word	0x40022000

080005a0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005a4:	4b03      	ldr	r3, [pc, #12]	@ (80005b4 <LL_FLASH_GetLatency+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 0307 	and.w	r3, r3, #7
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40022000 	.word	0x40022000

080005b8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr

080005d6 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f043 0201 	orr.w	r2, r3, #1
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	601a      	str	r2, [r3, #0]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr

08000612 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000642:	f023 0307 	bic.w	r3, r3, #7
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	431a      	orrs	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	609a      	str	r2, [r3, #8]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	431a      	orrs	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	605a      	str	r2, [r3, #4]
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	609a      	str	r2, [r3, #8]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f06f 0201 	mvn.w	r2, #1
 80006a8:	611a      	str	r2, [r3, #16]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	691b      	ldr	r3, [r3, #16]
 80006c0:	f003 0301 	and.w	r3, r3, #1
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d101      	bne.n	80006cc <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f043 0201 	orr.w	r2, r3, #1
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	60da      	str	r2, [r3, #12]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60da      	str	r2, [r3, #12]
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	691b      	ldr	r3, [r3, #16]
 8000720:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	615a      	str	r2, [r3, #20]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074e:	2b80      	cmp	r3, #128	@ 0x80
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr

08000762 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800076e:	78fa      	ldrb	r2, [r7, #3]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	605a      	str	r2, [r3, #4]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800077e:	b480      	push	{r7}
 8000780:	b083      	sub	sp, #12
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
 8000786:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	43da      	mvns	r2, r3
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	4013      	ands	r3, r2
 8000794:	b29b      	uxth	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	bf0c      	ite	eq
 800079a:	2301      	moveq	r3, #1
 800079c:	2300      	movne	r3, #0
 800079e:	b2db      	uxtb	r3, r3
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	0a1b      	lsrs	r3, r3, #8
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	611a      	str	r2, [r3, #16]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	615a      	str	r2, [r3, #20]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007e6:	b480      	push	{r7}
 80007e8:	b085      	sub	sp, #20
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4013      	ands	r3, r2
 8000804:	041a      	lsls	r2, r3, #16
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	43d9      	mvns	r1, r3
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	400b      	ands	r3, r1
 800080e:	431a      	orrs	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	611a      	str	r2, [r3, #16]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
	...

08000820 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800082c:	4a03      	ldr	r2, [pc, #12]	@ (800083c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800082e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000832:	6053      	str	r3, [r2, #4]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	40010000 	.word	0x40010000

08000840 <UART_Transmit_Flash>:
volatile uint32_t timer_count = 0;
static uint32_t flash_addr = 0;
static uint32_t led_toggle_count = 0;


void UART_Transmit_Flash(uint32_t start_addr, uint32_t len) {
 8000840:	b580      	push	{r7, lr}
 8000842:	b09e      	sub	sp, #120	@ 0x78
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
    uint8_t buffer[UART_CHUNK_SIZE];
    uint32_t remaining = len - (flash_addr - start_addr);
 800084a:	4b1d      	ldr	r3, [pc, #116]	@ (80008c0 <UART_Transmit_Flash+0x80>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	683a      	ldr	r2, [r7, #0]
 8000854:	4413      	add	r3, r2
 8000856:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t chunk = (remaining > UART_CHUNK_SIZE) ? UART_CHUNK_SIZE : remaining;
 8000858:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800085a:	2b64      	cmp	r3, #100	@ 0x64
 800085c:	bf28      	it	cs
 800085e:	2364      	movcs	r3, #100	@ 0x64
 8000860:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (chunk > 0) {
 8000862:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000864:	2b00      	cmp	r3, #0
 8000866:	d027      	beq.n	80008b8 <UART_Transmit_Flash+0x78>
        GD25Q16E_Read(&flash, flash_addr, buffer, chunk);
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <UART_Transmit_Flash+0x80>)
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	f107 0208 	add.w	r2, r7, #8
 8000870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000872:	4814      	ldr	r0, [pc, #80]	@ (80008c4 <UART_Transmit_Flash+0x84>)
 8000874:	f000 fe65 	bl	8001542 <GD25Q16E_Read>
        for (uint32_t i = 0; i < chunk; i++) {
 8000878:	2300      	movs	r3, #0
 800087a:	677b      	str	r3, [r7, #116]	@ 0x74
 800087c:	e012      	b.n	80008a4 <UART_Transmit_Flash+0x64>
            while (!LL_USART_IsActiveFlag_TXE(USART1));
 800087e:	bf00      	nop
 8000880:	4811      	ldr	r0, [pc, #68]	@ (80008c8 <UART_Transmit_Flash+0x88>)
 8000882:	f7ff ff5c 	bl	800073e <LL_USART_IsActiveFlag_TXE>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0f9      	beq.n	8000880 <UART_Transmit_Flash+0x40>
            LL_USART_TransmitData8(USART1, buffer[i]);
 800088c:	f107 0208 	add.w	r2, r7, #8
 8000890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000892:	4413      	add	r3, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	480b      	ldr	r0, [pc, #44]	@ (80008c8 <UART_Transmit_Flash+0x88>)
 800089a:	f7ff ff62 	bl	8000762 <LL_USART_TransmitData8>
        for (uint32_t i = 0; i < chunk; i++) {
 800089e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80008a0:	3301      	adds	r3, #1
 80008a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80008a4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80008a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d3e8      	bcc.n	800087e <UART_Transmit_Flash+0x3e>
        }
        flash_addr += chunk;
 80008ac:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <UART_Transmit_Flash+0x80>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008b2:	4413      	add	r3, r2
 80008b4:	4a02      	ldr	r2, [pc, #8]	@ (80008c0 <UART_Transmit_Flash+0x80>)
 80008b6:	6013      	str	r3, [r2, #0]
    }
}
 80008b8:	bf00      	nop
 80008ba:	3778      	adds	r7, #120	@ 0x78
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200002a4 	.word	0x200002a4
 80008c4:	20000000 	.word	0x20000000
 80008c8:	40013800 	.word	0x40013800

080008cc <EraseAllFlash>:

void EraseAllFlash(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
    for (uint32_t addr = 0x000000; addr <= FLASH_END_ADDR; addr += 4096) {
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	e00e      	b.n	80008f6 <EraseAllFlash+0x2a>
        GD25Q16E_EraseSector(&flash, addr);
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <EraseAllFlash+0x3c>)
 80008dc:	f000 feb1 	bl	8001642 <GD25Q16E_EraseSector>
        // Chớp LED đỏ
        LL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80008e0:	490a      	ldr	r1, [pc, #40]	@ (800090c <EraseAllFlash+0x40>)
 80008e2:	480b      	ldr	r0, [pc, #44]	@ (8000910 <EraseAllFlash+0x44>)
 80008e4:	f7ff ff7f 	bl	80007e6 <LL_GPIO_TogglePin>
        LL_mDelay(50); // Đợi ngắn để chớp LED
 80008e8:	2032      	movs	r0, #50	@ 0x32
 80008ea:	f001 fc33 	bl	8002154 <LL_mDelay>
    for (uint32_t addr = 0x000000; addr <= FLASH_END_ADDR; addr += 4096) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f5b3 2fdc 	cmp.w	r3, #450560	@ 0x6e000
 80008fc:	d3ec      	bcc.n	80008d8 <EraseAllFlash+0xc>
    }
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000000 	.word	0x20000000
 800090c:	04020002 	.word	0x04020002
 8000910:	40011000 	.word	0x40011000

08000914 <Timer2_10ms_handle>:

void Timer2_10ms_handle(void) {
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 800091a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800091e:	f7ff fec9 	bl	80006b4 <LL_TIM_IsActiveFlag_UPDATE>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	f000 81f9 	beq.w	8000d1c <Timer2_10ms_handle+0x408>
        LL_TIM_ClearFlag_UPDATE(TIM2);
 800092a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800092e:	f7ff feb4 	bl	800069a <LL_TIM_ClearFlag_UPDATE>
        timer_count++;
 8000932:	4ba0      	ldr	r3, [pc, #640]	@ (8000bb4 <Timer2_10ms_handle+0x2a0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	4a9e      	ldr	r2, [pc, #632]	@ (8000bb4 <Timer2_10ms_handle+0x2a0>)
 800093a:	6013      	str	r3, [r2, #0]
        led_toggle_count++;
 800093c:	4b9e      	ldr	r3, [pc, #632]	@ (8000bb8 <Timer2_10ms_handle+0x2a4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	4a9d      	ldr	r2, [pc, #628]	@ (8000bb8 <Timer2_10ms_handle+0x2a4>)
 8000944:	6013      	str	r3, [r2, #0]

        // Debouncing SW1
        bool sw1_current = !LL_GPIO_IsInputPinSet(SW1_GPIO_Port, SW1_Pin);
 8000946:	499d      	ldr	r1, [pc, #628]	@ (8000bbc <Timer2_10ms_handle+0x2a8>)
 8000948:	489d      	ldr	r0, [pc, #628]	@ (8000bc0 <Timer2_10ms_handle+0x2ac>)
 800094a:	f7ff ff18 	bl	800077e <LL_GPIO_IsInputPinSet>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	bf0c      	ite	eq
 8000954:	2301      	moveq	r3, #1
 8000956:	2300      	movne	r3, #0
 8000958:	75fb      	strb	r3, [r7, #23]
        if (sw1_current == sw1_state) {
 800095a:	4b9a      	ldr	r3, [pc, #616]	@ (8000bc4 <Timer2_10ms_handle+0x2b0>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	7dfa      	ldrb	r2, [r7, #23]
 8000960:	429a      	cmp	r2, r3
 8000962:	d103      	bne.n	800096c <Timer2_10ms_handle+0x58>
            sw1_debounce = 0;
 8000964:	4b98      	ldr	r3, [pc, #608]	@ (8000bc8 <Timer2_10ms_handle+0x2b4>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e018      	b.n	800099e <Timer2_10ms_handle+0x8a>
        } else {
            sw1_debounce++;
 800096c:	4b96      	ldr	r3, [pc, #600]	@ (8000bc8 <Timer2_10ms_handle+0x2b4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	4a95      	ldr	r2, [pc, #596]	@ (8000bc8 <Timer2_10ms_handle+0x2b4>)
 8000974:	6013      	str	r3, [r2, #0]
            if (sw1_debounce >= DEBOUNCE_TICKS) {
 8000976:	4b94      	ldr	r3, [pc, #592]	@ (8000bc8 <Timer2_10ms_handle+0x2b4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b04      	cmp	r3, #4
 800097c:	d90f      	bls.n	800099e <Timer2_10ms_handle+0x8a>
                sw1_state = sw1_current;
 800097e:	4a91      	ldr	r2, [pc, #580]	@ (8000bc4 <Timer2_10ms_handle+0x2b0>)
 8000980:	7dfb      	ldrb	r3, [r7, #23]
 8000982:	7013      	strb	r3, [r2, #0]
                sw1_debounce = 0;
 8000984:	4b90      	ldr	r3, [pc, #576]	@ (8000bc8 <Timer2_10ms_handle+0x2b4>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
                if (!sw1_state) {
 800098a:	4b8e      	ldr	r3, [pc, #568]	@ (8000bc4 <Timer2_10ms_handle+0x2b0>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f083 0301 	eor.w	r3, r3, #1
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <Timer2_10ms_handle+0x8a>
                    sw1_hold_time = 0;
 8000998:	4b8c      	ldr	r3, [pc, #560]	@ (8000bcc <Timer2_10ms_handle+0x2b8>)
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
                }
            }
        }
        if (sw1_state) {
 800099e:	4b89      	ldr	r3, [pc, #548]	@ (8000bc4 <Timer2_10ms_handle+0x2b0>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d004      	beq.n	80009b0 <Timer2_10ms_handle+0x9c>
            sw1_hold_time++;
 80009a6:	4b89      	ldr	r3, [pc, #548]	@ (8000bcc <Timer2_10ms_handle+0x2b8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	4a87      	ldr	r2, [pc, #540]	@ (8000bcc <Timer2_10ms_handle+0x2b8>)
 80009ae:	6013      	str	r3, [r2, #0]
        }

        // Debouncing SW2
        bool sw2_current = !LL_GPIO_IsInputPinSet(SW2_GPIO_Port, SW2_Pin);
 80009b0:	4987      	ldr	r1, [pc, #540]	@ (8000bd0 <Timer2_10ms_handle+0x2bc>)
 80009b2:	4888      	ldr	r0, [pc, #544]	@ (8000bd4 <Timer2_10ms_handle+0x2c0>)
 80009b4:	f7ff fee3 	bl	800077e <LL_GPIO_IsInputPinSet>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf0c      	ite	eq
 80009be:	2301      	moveq	r3, #1
 80009c0:	2300      	movne	r3, #0
 80009c2:	75bb      	strb	r3, [r7, #22]
        if (sw2_current == sw2_state) {
 80009c4:	4b84      	ldr	r3, [pc, #528]	@ (8000bd8 <Timer2_10ms_handle+0x2c4>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	7dba      	ldrb	r2, [r7, #22]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d103      	bne.n	80009d6 <Timer2_10ms_handle+0xc2>
            sw2_debounce = 0;
 80009ce:	4b83      	ldr	r3, [pc, #524]	@ (8000bdc <Timer2_10ms_handle+0x2c8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e018      	b.n	8000a08 <Timer2_10ms_handle+0xf4>
        } else {
            sw2_debounce++;
 80009d6:	4b81      	ldr	r3, [pc, #516]	@ (8000bdc <Timer2_10ms_handle+0x2c8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a7f      	ldr	r2, [pc, #508]	@ (8000bdc <Timer2_10ms_handle+0x2c8>)
 80009de:	6013      	str	r3, [r2, #0]
            if (sw2_debounce >= DEBOUNCE_TICKS) {
 80009e0:	4b7e      	ldr	r3, [pc, #504]	@ (8000bdc <Timer2_10ms_handle+0x2c8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d90f      	bls.n	8000a08 <Timer2_10ms_handle+0xf4>
                sw2_state = sw2_current;
 80009e8:	4a7b      	ldr	r2, [pc, #492]	@ (8000bd8 <Timer2_10ms_handle+0x2c4>)
 80009ea:	7dbb      	ldrb	r3, [r7, #22]
 80009ec:	7013      	strb	r3, [r2, #0]
                sw2_debounce = 0;
 80009ee:	4b7b      	ldr	r3, [pc, #492]	@ (8000bdc <Timer2_10ms_handle+0x2c8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
                if (!sw2_state) {
 80009f4:	4b78      	ldr	r3, [pc, #480]	@ (8000bd8 <Timer2_10ms_handle+0x2c4>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	f083 0301 	eor.w	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <Timer2_10ms_handle+0xf4>
                    sw2_hold_time = 0;
 8000a02:	4b77      	ldr	r3, [pc, #476]	@ (8000be0 <Timer2_10ms_handle+0x2cc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
                }
            }
        }
        if (sw2_state) {
 8000a08:	4b73      	ldr	r3, [pc, #460]	@ (8000bd8 <Timer2_10ms_handle+0x2c4>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d004      	beq.n	8000a1a <Timer2_10ms_handle+0x106>
            sw2_hold_time++;
 8000a10:	4b73      	ldr	r3, [pc, #460]	@ (8000be0 <Timer2_10ms_handle+0x2cc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3301      	adds	r3, #1
 8000a16:	4a72      	ldr	r2, [pc, #456]	@ (8000be0 <Timer2_10ms_handle+0x2cc>)
 8000a18:	6013      	str	r3, [r2, #0]
        }

        // Nhấp nháy LED trong UART_SENDING và WAIT_ERASE
        if ((current_state == STATE_UART_SENDING || current_state == STATE_WAIT_ERASE) && led_toggle_count >= LED_TOGGLE_TICKS) {
 8000a1a:	4b72      	ldr	r3, [pc, #456]	@ (8000be4 <Timer2_10ms_handle+0x2d0>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	d003      	beq.n	8000a2a <Timer2_10ms_handle+0x116>
 8000a22:	4b70      	ldr	r3, [pc, #448]	@ (8000be4 <Timer2_10ms_handle+0x2d0>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b05      	cmp	r3, #5
 8000a28:	d11d      	bne.n	8000a66 <Timer2_10ms_handle+0x152>
 8000a2a:	4b63      	ldr	r3, [pc, #396]	@ (8000bb8 <Timer2_10ms_handle+0x2a4>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b31      	cmp	r3, #49	@ 0x31
 8000a30:	d919      	bls.n	8000a66 <Timer2_10ms_handle+0x152>
            if (current_state == STATE_UART_SENDING) {
 8000a32:	4b6c      	ldr	r3, [pc, #432]	@ (8000be4 <Timer2_10ms_handle+0x2d0>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d105      	bne.n	8000a46 <Timer2_10ms_handle+0x132>
                LL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000a3a:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000a3e:	486a      	ldr	r0, [pc, #424]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000a40:	f7ff fed1 	bl	80007e6 <LL_GPIO_TogglePin>
 8000a44:	e00c      	b.n	8000a60 <Timer2_10ms_handle+0x14c>
            } else {
                LL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8000a46:	4969      	ldr	r1, [pc, #420]	@ (8000bec <Timer2_10ms_handle+0x2d8>)
 8000a48:	4867      	ldr	r0, [pc, #412]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000a4a:	f7ff fecc 	bl	80007e6 <LL_GPIO_TogglePin>
                LL_GPIO_TogglePin(LED_G_GPIO_Port, LED_G_Pin);
 8000a4e:	4968      	ldr	r1, [pc, #416]	@ (8000bf0 <Timer2_10ms_handle+0x2dc>)
 8000a50:	4865      	ldr	r0, [pc, #404]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000a52:	f7ff fec8 	bl	80007e6 <LL_GPIO_TogglePin>
                LL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000a56:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000a5a:	4863      	ldr	r0, [pc, #396]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000a5c:	f7ff fec3 	bl	80007e6 <LL_GPIO_TogglePin>
            }
            led_toggle_count = 0;
 8000a60:	4b55      	ldr	r3, [pc, #340]	@ (8000bb8 <Timer2_10ms_handle+0x2a4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
        }

        // Xử lý trạng thái
        switch (current_state) {
 8000a66:	4b5f      	ldr	r3, [pc, #380]	@ (8000be4 <Timer2_10ms_handle+0x2d0>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	f200 8156 	bhi.w	8000d1c <Timer2_10ms_handle+0x408>
 8000a70:	a201      	add	r2, pc, #4	@ (adr r2, 8000a78 <Timer2_10ms_handle+0x164>)
 8000a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a76:	bf00      	nop
 8000a78:	08000a91 	.word	0x08000a91
 8000a7c:	08000aef 	.word	0x08000aef
 8000a80:	08000b25 	.word	0x08000b25
 8000a84:	08000c3d 	.word	0x08000c3d
 8000a88:	08000c9d 	.word	0x08000c9d
 8000a8c:	08000cb9 	.word	0x08000cb9
            case STATE_IDLE:
                LL_GPIO_SetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000a90:	4956      	ldr	r1, [pc, #344]	@ (8000bec <Timer2_10ms_handle+0x2d8>)
 8000a92:	4855      	ldr	r0, [pc, #340]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000a94:	f7ff fe89 	bl	80007aa <LL_GPIO_SetOutputPin>
                LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000a98:	4955      	ldr	r1, [pc, #340]	@ (8000bf0 <Timer2_10ms_handle+0x2dc>)
 8000a9a:	4853      	ldr	r0, [pc, #332]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000a9c:	f7ff fe94 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000aa0:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000aa4:	4850      	ldr	r0, [pc, #320]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000aa6:	f7ff fe8f 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                if (sw2_hold_time == 1) {
 8000aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8000be0 <Timer2_10ms_handle+0x2cc>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d109      	bne.n	8000ac6 <Timer2_10ms_handle+0x1b2>
                    current_state = STATE_WAIT_SW2_RELEASE;
 8000ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8000be4 <Timer2_10ms_handle+0x2d0>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
                    sw2_debounce = 0;
 8000ab8:	4b48      	ldr	r3, [pc, #288]	@ (8000bdc <Timer2_10ms_handle+0x2c8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
                    sw2_state = true;
 8000abe:	4b46      	ldr	r3, [pc, #280]	@ (8000bd8 <Timer2_10ms_handle+0x2c4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
                    current_state = STATE_WAIT_ERASE;
                	LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
                    sw1_hold_time = 0;
                    erase_wait_delay = 0;
                }
                break;
 8000ac4:	e11f      	b.n	8000d06 <Timer2_10ms_handle+0x3f2>
                } else if (sw1_hold_time >= 500) { // 5 giây
 8000ac6:	4b41      	ldr	r3, [pc, #260]	@ (8000bcc <Timer2_10ms_handle+0x2b8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ace:	f0c0 811a 	bcc.w	8000d06 <Timer2_10ms_handle+0x3f2>
                    current_state = STATE_WAIT_ERASE;
 8000ad2:	4b44      	ldr	r3, [pc, #272]	@ (8000be4 <Timer2_10ms_handle+0x2d0>)
 8000ad4:	2205      	movs	r2, #5
 8000ad6:	701a      	strb	r2, [r3, #0]
                	LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000ad8:	4944      	ldr	r1, [pc, #272]	@ (8000bec <Timer2_10ms_handle+0x2d8>)
 8000ada:	4843      	ldr	r0, [pc, #268]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000adc:	f7ff fe74 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                    sw1_hold_time = 0;
 8000ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8000bcc <Timer2_10ms_handle+0x2b8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
                    erase_wait_delay = 0;
 8000ae6:	4b43      	ldr	r3, [pc, #268]	@ (8000bf4 <Timer2_10ms_handle+0x2e0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
                break;
 8000aec:	e10b      	b.n	8000d06 <Timer2_10ms_handle+0x3f2>

            case STATE_WAIT_SW2_RELEASE:
                if (sw2_hold_time >= 300) {
 8000aee:	4b3c      	ldr	r3, [pc, #240]	@ (8000be0 <Timer2_10ms_handle+0x2cc>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000af6:	d309      	bcc.n	8000b0c <Timer2_10ms_handle+0x1f8>
                    current_state = STATE_UART_WAIT_SEND;
 8000af8:	4b3a      	ldr	r3, [pc, #232]	@ (8000be4 <Timer2_10ms_handle+0x2d0>)
 8000afa:	2203      	movs	r2, #3
 8000afc:	701a      	strb	r2, [r3, #0]
                    sw2_hold_time = 0;
 8000afe:	4b38      	ldr	r3, [pc, #224]	@ (8000be0 <Timer2_10ms_handle+0x2cc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
                    uart_wait_delay = 0;
 8000b04:	4b3c      	ldr	r3, [pc, #240]	@ (8000bf8 <Timer2_10ms_handle+0x2e4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
                } else if (sw2_hold_time == 0) {
                    current_state = STATE_RECORD;
                    sample_count = 0;
                }
                break;
 8000b0a:	e0fe      	b.n	8000d0a <Timer2_10ms_handle+0x3f6>
                } else if (sw2_hold_time == 0) {
 8000b0c:	4b34      	ldr	r3, [pc, #208]	@ (8000be0 <Timer2_10ms_handle+0x2cc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f040 80fa 	bne.w	8000d0a <Timer2_10ms_handle+0x3f6>
                    current_state = STATE_RECORD;
 8000b16:	4b33      	ldr	r3, [pc, #204]	@ (8000be4 <Timer2_10ms_handle+0x2d0>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	701a      	strb	r2, [r3, #0]
                    sample_count = 0;
 8000b1c:	4b37      	ldr	r3, [pc, #220]	@ (8000bfc <Timer2_10ms_handle+0x2e8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
                break;
 8000b22:	e0f2      	b.n	8000d0a <Timer2_10ms_handle+0x3f6>

            case STATE_RECORD:
                LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000b24:	4931      	ldr	r1, [pc, #196]	@ (8000bec <Timer2_10ms_handle+0x2d8>)
 8000b26:	4830      	ldr	r0, [pc, #192]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000b28:	f7ff fe4e 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                LL_GPIO_SetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000b2c:	4930      	ldr	r1, [pc, #192]	@ (8000bf0 <Timer2_10ms_handle+0x2dc>)
 8000b2e:	482e      	ldr	r0, [pc, #184]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000b30:	f7ff fe3b 	bl	80007aa <LL_GPIO_SetOutputPin>
                LL_GPIO_ResetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000b34:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000b38:	482b      	ldr	r0, [pc, #172]	@ (8000be8 <Timer2_10ms_handle+0x2d4>)
 8000b3a:	f7ff fe45 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                if (sw1_hold_time == 1 || sample_count >= SONG_DATA_SIZE_LONG) {
 8000b3e:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <Timer2_10ms_handle+0x2b8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d005      	beq.n	8000b52 <Timer2_10ms_handle+0x23e>
 8000b46:	4b2d      	ldr	r3, [pc, #180]	@ (8000bfc <Timer2_10ms_handle+0x2e8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d960      	bls.n	8000c14 <Timer2_10ms_handle+0x300>
                    char name[16];
                    memset(song_name, 0xFF, SONG_NAME_SIZE);
 8000b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b56:	21ff      	movs	r1, #255	@ 0xff
 8000b58:	4829      	ldr	r0, [pc, #164]	@ (8000c00 <Timer2_10ms_handle+0x2ec>)
 8000b5a:	f001 fb63 	bl	8002224 <memset>
                    snprintf(name, sizeof(name), "Bai so %lu", song_index + 1);
 8000b5e:	4b29      	ldr	r3, [pc, #164]	@ (8000c04 <Timer2_10ms_handle+0x2f0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3301      	adds	r3, #1
 8000b64:	1d38      	adds	r0, r7, #4
 8000b66:	4a28      	ldr	r2, [pc, #160]	@ (8000c08 <Timer2_10ms_handle+0x2f4>)
 8000b68:	2110      	movs	r1, #16
 8000b6a:	f001 fb25 	bl	80021b8 <sniprintf>
                    memcpy(song_name, name, strlen(name) + 1);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fb57 	bl	8000224 <strlen>
 8000b76:	4603      	mov	r3, r0
 8000b78:	1c5a      	adds	r2, r3, #1
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4820      	ldr	r0, [pc, #128]	@ (8000c00 <Timer2_10ms_handle+0x2ec>)
 8000b80:	f001 fb84 	bl	800228c <memcpy>
                    song_write(&flash, song_index);
 8000b84:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <Timer2_10ms_handle+0x2f0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4820      	ldr	r0, [pc, #128]	@ (8000c0c <Timer2_10ms_handle+0x2f8>)
 8000b8c:	f000 fdb4 	bl	80016f8 <song_write>
                    song_index = (song_index + 1) % SONG_COUNT;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <Timer2_10ms_handle+0x2f0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <Timer2_10ms_handle+0x2fc>)
 8000b98:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9c:	091b      	lsrs	r3, r3, #4
 8000b9e:	2132      	movs	r1, #50	@ 0x32
 8000ba0:	fb01 f303 	mul.w	r3, r1, r3
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	4a17      	ldr	r2, [pc, #92]	@ (8000c04 <Timer2_10ms_handle+0x2f0>)
 8000ba8:	6013      	str	r3, [r2, #0]
                    current_state = STATE_IDLE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	@ (8000be4 <Timer2_10ms_handle+0x2d0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	701a      	strb	r2, [r3, #0]
                if (sw1_hold_time == 1 || sample_count >= SONG_DATA_SIZE_LONG) {
 8000bb0:	bf00      	nop
                    if (sample_count < SONG_DATA_SIZE_LONG) {
                        song_data[sample_count] = TTP229_Read_8Keys();
                        sample_count++;
                    }
                }
                break;
 8000bb2:	e0ac      	b.n	8000d0e <Timer2_10ms_handle+0x3fa>
 8000bb4:	200002a0 	.word	0x200002a0
 8000bb8:	200002a8 	.word	0x200002a8
 8000bbc:	04800080 	.word	0x04800080
 8000bc0:	40010800 	.word	0x40010800
 8000bc4:	20000294 	.word	0x20000294
 8000bc8:	2000028c 	.word	0x2000028c
 8000bcc:	20000284 	.word	0x20000284
 8000bd0:	04100010 	.word	0x04100010
 8000bd4:	40010c00 	.word	0x40010c00
 8000bd8:	20000295 	.word	0x20000295
 8000bdc:	20000290 	.word	0x20000290
 8000be0:	20000288 	.word	0x20000288
 8000be4:	2000027c 	.word	0x2000027c
 8000be8:	40011000 	.word	0x40011000
 8000bec:	04020002 	.word	0x04020002
 8000bf0:	04010001 	.word	0x04010001
 8000bf4:	2000029c 	.word	0x2000029c
 8000bf8:	20000298 	.word	0x20000298
 8000bfc:	20000280 	.word	0x20000280
 8000c00:	20000010 	.word	0x20000010
 8000c04:	200002b0 	.word	0x200002b0
 8000c08:	08002b58 	.word	0x08002b58
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	51eb851f 	.word	0x51eb851f
                    if (sample_count < SONG_DATA_SIZE_LONG) {
 8000c14:	4b43      	ldr	r3, [pc, #268]	@ (8000d24 <Timer2_10ms_handle+0x410>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f642 62df 	movw	r2, #11999	@ 0x2edf
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d876      	bhi.n	8000d0e <Timer2_10ms_handle+0x3fa>
                        song_data[sample_count] = TTP229_Read_8Keys();
 8000c20:	4b40      	ldr	r3, [pc, #256]	@ (8000d24 <Timer2_10ms_handle+0x410>)
 8000c22:	681c      	ldr	r4, [r3, #0]
 8000c24:	f000 fdb4 	bl	8001790 <TTP229_Read_8Keys>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d28 <Timer2_10ms_handle+0x414>)
 8000c2e:	551a      	strb	r2, [r3, r4]
                        sample_count++;
 8000c30:	4b3c      	ldr	r3, [pc, #240]	@ (8000d24 <Timer2_10ms_handle+0x410>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a3b      	ldr	r2, [pc, #236]	@ (8000d24 <Timer2_10ms_handle+0x410>)
 8000c38:	6013      	str	r3, [r2, #0]
                break;
 8000c3a:	e068      	b.n	8000d0e <Timer2_10ms_handle+0x3fa>

            case STATE_UART_WAIT_SEND:
                LL_GPIO_ResetOutputPin(LED_R_GPIO_Port, LED_R_Pin);
 8000c3c:	493b      	ldr	r1, [pc, #236]	@ (8000d2c <Timer2_10ms_handle+0x418>)
 8000c3e:	483c      	ldr	r0, [pc, #240]	@ (8000d30 <Timer2_10ms_handle+0x41c>)
 8000c40:	f7ff fdc2 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                LL_GPIO_ResetOutputPin(LED_G_GPIO_Port, LED_G_Pin);
 8000c44:	493b      	ldr	r1, [pc, #236]	@ (8000d34 <Timer2_10ms_handle+0x420>)
 8000c46:	483a      	ldr	r0, [pc, #232]	@ (8000d30 <Timer2_10ms_handle+0x41c>)
 8000c48:	f7ff fdbe 	bl	80007c8 <LL_GPIO_ResetOutputPin>
                LL_GPIO_SetOutputPin(LED_B_GPIO_Port, LED_B_Pin);
 8000c4c:	f248 0180 	movw	r1, #32896	@ 0x8080
 8000c50:	4837      	ldr	r0, [pc, #220]	@ (8000d30 <Timer2_10ms_handle+0x41c>)
 8000c52:	f7ff fdaa 	bl	80007aa <LL_GPIO_SetOutputPin>
                uart_wait_delay++;
 8000c56:	4b38      	ldr	r3, [pc, #224]	@ (8000d38 <Timer2_10ms_handle+0x424>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a36      	ldr	r2, [pc, #216]	@ (8000d38 <Timer2_10ms_handle+0x424>)
 8000c5e:	6013      	str	r3, [r2, #0]
                if (uart_wait_delay >= 50 && sw2_hold_time == 1) {
 8000c60:	4b35      	ldr	r3, [pc, #212]	@ (8000d38 <Timer2_10ms_handle+0x424>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b31      	cmp	r3, #49	@ 0x31
 8000c66:	d90d      	bls.n	8000c84 <Timer2_10ms_handle+0x370>
 8000c68:	4b34      	ldr	r3, [pc, #208]	@ (8000d3c <Timer2_10ms_handle+0x428>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d109      	bne.n	8000c84 <Timer2_10ms_handle+0x370>
                    current_state = STATE_UART_SENDING;
 8000c70:	4b33      	ldr	r3, [pc, #204]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	701a      	strb	r2, [r3, #0]
                    flash_addr = 0x000000;
 8000c76:	4b33      	ldr	r3, [pc, #204]	@ (8000d44 <Timer2_10ms_handle+0x430>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
                    led_toggle_count = 0;
 8000c7c:	4b32      	ldr	r3, [pc, #200]	@ (8000d48 <Timer2_10ms_handle+0x434>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
                } else if (uart_wait_delay >= 50 && sw1_hold_time == 1) {
                	current_state = STATE_IDLE;
                }

                break;
 8000c82:	e046      	b.n	8000d12 <Timer2_10ms_handle+0x3fe>
                } else if (uart_wait_delay >= 50 && sw1_hold_time == 1) {
 8000c84:	4b2c      	ldr	r3, [pc, #176]	@ (8000d38 <Timer2_10ms_handle+0x424>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b31      	cmp	r3, #49	@ 0x31
 8000c8a:	d942      	bls.n	8000d12 <Timer2_10ms_handle+0x3fe>
 8000c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d4c <Timer2_10ms_handle+0x438>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d13e      	bne.n	8000d12 <Timer2_10ms_handle+0x3fe>
                	current_state = STATE_IDLE;
 8000c94:	4b2a      	ldr	r3, [pc, #168]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
                break;
 8000c9a:	e03a      	b.n	8000d12 <Timer2_10ms_handle+0x3fe>

            case STATE_UART_SENDING:
                UART_Transmit_Flash(0x000000, FLASH_END_ADDR + 1);
 8000c9c:	f44f 21dc 	mov.w	r1, #450560	@ 0x6e000
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fdcd 	bl	8000840 <UART_Transmit_Flash>
                if (flash_addr > FLASH_END_ADDR) {
 8000ca6:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <Timer2_10ms_handle+0x430>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f5b3 2fdc 	cmp.w	r3, #450560	@ 0x6e000
 8000cae:	d332      	bcc.n	8000d16 <Timer2_10ms_handle+0x402>
                    current_state = STATE_IDLE;
 8000cb0:	4b23      	ldr	r3, [pc, #140]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000cb6:	e02e      	b.n	8000d16 <Timer2_10ms_handle+0x402>

            case STATE_WAIT_ERASE:
                erase_wait_delay++;
 8000cb8:	4b25      	ldr	r3, [pc, #148]	@ (8000d50 <Timer2_10ms_handle+0x43c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a24      	ldr	r2, [pc, #144]	@ (8000d50 <Timer2_10ms_handle+0x43c>)
 8000cc0:	6013      	str	r3, [r2, #0]
                if (erase_wait_delay >= 50 && sw2_state && sw2_hold_time == 1) {
 8000cc2:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <Timer2_10ms_handle+0x43c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b31      	cmp	r3, #49	@ 0x31
 8000cc8:	d90d      	bls.n	8000ce6 <Timer2_10ms_handle+0x3d2>
 8000cca:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <Timer2_10ms_handle+0x440>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d009      	beq.n	8000ce6 <Timer2_10ms_handle+0x3d2>
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <Timer2_10ms_handle+0x428>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d105      	bne.n	8000ce6 <Timer2_10ms_handle+0x3d2>
                    EraseAllFlash();
 8000cda:	f7ff fdf7 	bl	80008cc <EraseAllFlash>
                    current_state = STATE_IDLE;
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
                } else if (erase_wait_delay >= 50 && sw1_state && sw1_hold_time == 1) {
                    current_state = STATE_IDLE;
                }
                break;
 8000ce4:	e019      	b.n	8000d1a <Timer2_10ms_handle+0x406>
                } else if (erase_wait_delay >= 50 && sw1_state && sw1_hold_time == 1) {
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <Timer2_10ms_handle+0x43c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b31      	cmp	r3, #49	@ 0x31
 8000cec:	d915      	bls.n	8000d1a <Timer2_10ms_handle+0x406>
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <Timer2_10ms_handle+0x444>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d011      	beq.n	8000d1a <Timer2_10ms_handle+0x406>
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <Timer2_10ms_handle+0x438>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10d      	bne.n	8000d1a <Timer2_10ms_handle+0x406>
                    current_state = STATE_IDLE;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <Timer2_10ms_handle+0x42c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
                break;
 8000d04:	e009      	b.n	8000d1a <Timer2_10ms_handle+0x406>
                break;
 8000d06:	bf00      	nop
 8000d08:	e008      	b.n	8000d1c <Timer2_10ms_handle+0x408>
                break;
 8000d0a:	bf00      	nop
 8000d0c:	e006      	b.n	8000d1c <Timer2_10ms_handle+0x408>
                break;
 8000d0e:	bf00      	nop
 8000d10:	e004      	b.n	8000d1c <Timer2_10ms_handle+0x408>
                break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <Timer2_10ms_handle+0x408>
                break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <Timer2_10ms_handle+0x408>
                break;
 8000d1a:	bf00      	nop
        }
    }
}
 8000d1c:	bf00      	nop
 8000d1e:	371c      	adds	r7, #28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	20000280 	.word	0x20000280
 8000d28:	200002b4 	.word	0x200002b4
 8000d2c:	04020002 	.word	0x04020002
 8000d30:	40011000 	.word	0x40011000
 8000d34:	04010001 	.word	0x04010001
 8000d38:	20000298 	.word	0x20000298
 8000d3c:	20000288 	.word	0x20000288
 8000d40:	2000027c 	.word	0x2000027c
 8000d44:	200002a4 	.word	0x200002a4
 8000d48:	200002a8 	.word	0x200002a8
 8000d4c:	20000284 	.word	0x20000284
 8000d50:	2000029c 	.word	0x2000029c
 8000d54:	20000295 	.word	0x20000295
 8000d58:	20000294 	.word	0x20000294

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000d60:	2001      	movs	r0, #1
 8000d62:	f7ff fbf1 	bl	8000548 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000d66:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000d6a:	f7ff fbd5 	bl	8000518 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f7ff fa60 	bl	8000234 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000d74:	f7ff fa82 	bl	800027c <__NVIC_GetPriorityGrouping>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	210f      	movs	r1, #15
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fad0 	bl	8000324 <NVIC_EncodePriority>
 8000d84:	4603      	mov	r3, r0
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	f7ff faa0 	bl	80002d0 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000d90:	f7ff fd46 	bl	8000820 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d94:	f000 f812 	bl	8000dbc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  GD25Q16E_Init(&flash);
 8000d98:	4807      	ldr	r0, [pc, #28]	@ (8000db8 <main+0x5c>)
 8000d9a:	f000 fbc7 	bl	800152c <GD25Q16E_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9e:	f000 f977 	bl	8001090 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000da2:	f000 f84b 	bl	8000e3c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000da6:	f000 f91b 	bl	8000fe0 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000daa:	f000 f8e9 	bl	8000f80 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000dae:	f000 f89d 	bl	8000eec <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  uint8_t key_state = 0;
//  char buffer[100];
  while (1)
 8000db2:	bf00      	nop
 8000db4:	e7fd      	b.n	8000db2 <main+0x56>
 8000db6:	bf00      	nop
 8000db8:	20000000 	.word	0x20000000

08000dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fbd9 	bl	8000578 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000dc6:	bf00      	nop
 8000dc8:	f7ff fbea 	bl	80005a0 <LL_FLASH_GetLatency>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1fa      	bne.n	8000dc8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000dd2:	2010      	movs	r0, #16
 8000dd4:	f7ff faf8 	bl	80003c8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000dd8:	f7ff fad6 	bl	8000388 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ddc:	bf00      	nop
 8000dde:	f7ff fae1 	bl	80003a4 <LL_RCC_HSI_IsReady>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d1fa      	bne.n	8000dde <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_6);
 8000de8:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff fb7b 	bl	80004e8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000df2:	f7ff fb59 	bl	80004a8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000df6:	bf00      	nop
 8000df8:	f7ff fb64 	bl	80004c4 <LL_RCC_PLL_IsReady>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d1fa      	bne.n	8000df8 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fb14 	bl	8000430 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000e08:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e0c:	f7ff fb24 	bl	8000458 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff fb35 	bl	8000480 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff faea 	bl	80003f0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e1c:	bf00      	nop
 8000e1e:	f7ff fafb 	bl	8000418 <LL_RCC_GetSysClkSource>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d1fa      	bne.n	8000e1e <SystemClock_Config+0x62>
  {

  }
  LL_Init1msTick(24000000);
 8000e28:	4803      	ldr	r0, [pc, #12]	@ (8000e38 <SystemClock_Config+0x7c>)
 8000e2a:	f001 f985 	bl	8002138 <LL_Init1msTick>
  LL_SetSystemCoreClock(24000000);
 8000e2e:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <SystemClock_Config+0x7c>)
 8000e30:	f001 f9b4 	bl	800219c <LL_SetSystemCoreClock>
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	016e3600 	.word	0x016e3600

08000e3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b090      	sub	sp, #64	@ 0x40
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	2228      	movs	r2, #40	@ 0x28
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 f9ea 	bl	8002224 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000e5e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e62:	f7ff fb71 	bl	8000548 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000e66:	2004      	movs	r0, #4
 8000e68:	f7ff fb6e 	bl	8000548 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = FL_SCK_Pin|FL_MOSI_Pin;
 8000e6c:	f24a 03a0 	movw	r3, #41120	@ 0xa0a0
 8000e70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e72:	2309      	movs	r3, #9
 8000e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000e76:	2303      	movs	r3, #3
 8000e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4818      	ldr	r0, [pc, #96]	@ (8000ee4 <MX_SPI1_Init+0xa8>)
 8000e84:	f000 fd9e 	bl	80019c4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = FL_MISO_Pin;
 8000e88:	f244 0340 	movw	r3, #16448	@ 0x4040
 8000e8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000e8e:	2304      	movs	r3, #4
 8000e90:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(FL_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	4619      	mov	r1, r3
 8000e96:	4813      	ldr	r0, [pc, #76]	@ (8000ee4 <MX_SPI1_Init+0xa8>)
 8000e98:	f000 fd94 	bl	80019c4 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000ea0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000ea4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000ec8:	f107 0318 	add.w	r3, r7, #24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000ed0:	f000 ff11 	bl	8001cf6 <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */
  LL_SPI_Enable(SPI1);
 8000ed4:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <MX_SPI1_Init+0xac>)
 8000ed6:	f7ff fb6f 	bl	80005b8 <LL_SPI_Enable>
  /* USER CODE END SPI1_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	3740      	adds	r7, #64	@ 0x40
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	40013000 	.word	0x40013000

08000eec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f7ff fb09 	bl	8000518 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f06:	f7ff f9b9 	bl	800027c <__NVIC_GetPriorityGrouping>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fa07 	bl	8000324 <NVIC_EncodePriority>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	201c      	movs	r0, #28
 8000f1c:	f7ff f9d8 	bl	80002d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000f20:	201c      	movs	r0, #28
 8000f22:	f7ff f9b9 	bl	8000298 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 239;
 8000f26:	23ef      	movs	r3, #239	@ 0xef
 8000f28:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8000f2e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000f32:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f40:	f000 ff62 	bl	8001e08 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8000f44:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f48:	f7ff fb54 	bl	80005f4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f52:	f7ff fb6d 	bl	8000630 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000f56:	2100      	movs	r1, #0
 8000f58:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f5c:	f7ff fb7c 	bl	8000658 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000f60:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f64:	f7ff fb8a 	bl	800067c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  LL_TIM_EnableIT_UPDATE(TIM2); // Bật ngắt Update
 8000f68:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f6c:	f7ff fbb4 	bl	80006d8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM2);   // Khởi động timer
 8000f70:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000f74:	f7ff fb2f 	bl	80005d6 <LL_TIM_EnableCounter>

  /* USER CODE END TIM2_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8000f94:	2004      	movs	r0, #4
 8000f96:	f7ff fabf 	bl	8000518 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 23;
 8000f9a:	2317      	movs	r3, #23
 8000f9c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8000fa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fa6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480a      	ldr	r0, [pc, #40]	@ (8000fdc <MX_TIM4_Init+0x5c>)
 8000fb2:	f000 ff29 	bl	8001e08 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8000fb6:	4809      	ldr	r0, [pc, #36]	@ (8000fdc <MX_TIM4_Init+0x5c>)
 8000fb8:	f7ff fb2b 	bl	8000612 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <MX_TIM4_Init+0x5c>)
 8000fc0:	f7ff fb36 	bl	8000630 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <MX_TIM4_Init+0x5c>)
 8000fc8:	f7ff fb46 	bl	8000658 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8000fcc:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <MX_TIM4_Init+0x5c>)
 8000fce:	f7ff fb55 	bl	800067c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40000800 	.word	0x40000800

08000fe0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	@ 0x30
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]
 8000ff6:	615a      	str	r2, [r3, #20]
 8000ff8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001008:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800100c:	f7ff fa9c 	bl	8000548 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001010:	2004      	movs	r0, #4
 8001012:	f7ff fa99 	bl	8000548 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001016:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <MX_USART1_UART_Init+0xa0>)
 8001018:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800101a:	2309      	movs	r3, #9
 800101c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	4816      	ldr	r0, [pc, #88]	@ (8001084 <MX_USART1_UART_Init+0xa4>)
 800102c:	f000 fcca 	bl	80019c4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <MX_USART1_UART_Init+0xa8>)
 8001032:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001034:	2304      	movs	r3, #4
 8001036:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4811      	ldr	r0, [pc, #68]	@ (8001084 <MX_USART1_UART_Init+0xa4>)
 800103e:	f000 fcc1 	bl	80019c4 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001042:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001046:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001054:	230c      	movs	r3, #12
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	4809      	ldr	r0, [pc, #36]	@ (800108c <MX_USART1_UART_Init+0xac>)
 8001068:	f000 ffda 	bl	8002020 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800106c:	4807      	ldr	r0, [pc, #28]	@ (800108c <MX_USART1_UART_Init+0xac>)
 800106e:	f7ff fb51 	bl	8000714 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_USART1_UART_Init+0xac>)
 8001074:	f7ff fb3f 	bl	80006f6 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	3730      	adds	r7, #48	@ 0x30
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	04020002 	.word	0x04020002
 8001084:	40010800 	.word	0x40010800
 8001088:	04040004 	.word	0x04040004
 800108c:	40013800 	.word	0x40013800

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80010a4:	2004      	movs	r0, #4
 80010a6:	f7ff fa4f 	bl	8000548 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80010aa:	2008      	movs	r0, #8
 80010ac:	f7ff fa4c 	bl	8000548 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80010b0:	2010      	movs	r0, #16
 80010b2:	f7ff fa49 	bl	8000548 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(FL_CS_GPIO_Port, FL_CS_Pin);
 80010b6:	f241 0110 	movw	r1, #4112	@ 0x1010
 80010ba:	482a      	ldr	r0, [pc, #168]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010bc:	f7ff fb84 	bl	80007c8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TTP_CLK_GPIO_Port, TTP_CLK_Pin);
 80010c0:	4929      	ldr	r1, [pc, #164]	@ (8001168 <MX_GPIO_Init+0xd8>)
 80010c2:	482a      	ldr	r0, [pc, #168]	@ (800116c <MX_GPIO_Init+0xdc>)
 80010c4:	f7ff fb80 	bl	80007c8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED_B_Pin|LED_G_Pin|LED_R_Pin);
 80010c8:	4929      	ldr	r1, [pc, #164]	@ (8001170 <MX_GPIO_Init+0xe0>)
 80010ca:	482a      	ldr	r0, [pc, #168]	@ (8001174 <MX_GPIO_Init+0xe4>)
 80010cc:	f7ff fb7c 	bl	80007c8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = FL_CS_Pin;
 80010d0:	f241 0310 	movw	r3, #4112	@ 0x1010
 80010d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010d6:	2301      	movs	r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010da:	2302      	movs	r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(FL_CS_GPIO_Port, &GPIO_InitStruct);
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	481f      	ldr	r0, [pc, #124]	@ (8001164 <MX_GPIO_Init+0xd4>)
 80010e8:	f000 fc6c 	bl	80019c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW2_Pin|TTP_SDO_Pin;
 80010ec:	4b22      	ldr	r3, [pc, #136]	@ (8001178 <MX_GPIO_Init+0xe8>)
 80010ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80010f0:	2304      	movs	r3, #4
 80010f2:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	481c      	ldr	r0, [pc, #112]	@ (800116c <MX_GPIO_Init+0xdc>)
 80010fa:	f000 fc63 	bl	80019c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TTP_CLK_Pin;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <MX_GPIO_Init+0xd8>)
 8001100:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001102:	2301      	movs	r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001106:	2302      	movs	r3, #2
 8001108:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(TTP_CLK_GPIO_Port, &GPIO_InitStruct);
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4619      	mov	r1, r3
 8001112:	4816      	ldr	r0, [pc, #88]	@ (800116c <MX_GPIO_Init+0xdc>)
 8001114:	f000 fc56 	bl	80019c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_B_Pin|LED_G_Pin|LED_R_Pin;
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <MX_GPIO_Init+0xe0>)
 800111a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800111c:	2301      	movs	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001120:	2302      	movs	r3, #2
 8001122:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4619      	mov	r1, r3
 800112c:	4811      	ldr	r0, [pc, #68]	@ (8001174 <MX_GPIO_Init+0xe4>)
 800112e:	f000 fc49 	bl	80019c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW1_Pin;
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_GPIO_Init+0xec>)
 8001134:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001136:	2304      	movs	r3, #4
 8001138:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	4809      	ldr	r0, [pc, #36]	@ (8001164 <MX_GPIO_Init+0xd4>)
 8001140:	f000 fc40 	bl	80019c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = KQ0_Pin|KQ1_Pin|KQ2_Pin|KQ3_Pin
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <MX_GPIO_Init+0xf0>)
 8001146:	607b      	str	r3, [r7, #4]
                          |KQ4_Pin|KQ5_Pin|KQ6_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001148:	2308      	movs	r3, #8
 800114a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	4805      	ldr	r0, [pc, #20]	@ (800116c <MX_GPIO_Init+0xdc>)
 8001156:	f000 fc35 	bl	80019c4 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40010800 	.word	0x40010800
 8001168:	04200020 	.word	0x04200020
 800116c:	40010c00 	.word	0x40010c00
 8001170:	04038083 	.word	0x04038083
 8001174:	40011000 	.word	0x40011000
 8001178:	04500050 	.word	0x04500050
 800117c:	04800080 	.word	0x04800080
 8001180:	0403f8fb 	.word	0x0403f8fb

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	Timer2_10ms_handle();
 80011e0:	f7ff fb98 	bl	8000914 <Timer2_10ms_handle>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	@ (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	@ (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f001 f80c 	bl	8002234 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	@ (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	@ (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000c000 	.word	0x2000c000
 8001248:	00000400 	.word	0x00000400
 800124c:	200002ac 	.word	0x200002ac
 8001250:	200032e0 	.word	0x200032e0

08001254 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001260:	f7ff fff8 	bl	8001254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480b      	ldr	r0, [pc, #44]	@ (8001294 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001266:	490c      	ldr	r1, [pc, #48]	@ (8001298 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001268:	4a0c      	ldr	r2, [pc, #48]	@ (800129c <LoopFillZerobss+0x16>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a09      	ldr	r2, [pc, #36]	@ (80012a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800127c:	4c09      	ldr	r4, [pc, #36]	@ (80012a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f000 ffd9 	bl	8002240 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128e:	f7ff fd65 	bl	8000d5c <main>
  bx lr
 8001292:	4770      	bx	lr
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 800129c:	08002d50 	.word	0x08002d50
  ldr r2, =_sbss
 80012a0:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 80012a4:	200032dc 	.word	0x200032dc

080012a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC1_2_IRQHandler>

080012aa <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d101      	bne.n	80012e6 <LL_SPI_IsActiveFlag_TXE+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	330c      	adds	r3, #12
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	330c      	adds	r3, #12
 800131c:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	78fa      	ldrb	r2, [r7, #3]
 8001322:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <LL_GPIO_SetOutputPin>:
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	611a      	str	r2, [r3, #16]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr

0800134c <LL_GPIO_ResetOutputPin>:
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	b29a      	uxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	615a      	str	r2, [r3, #20]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <CS_LOW>:
 */


#include "gd25q16e.h"

static void CS_LOW(GD25Q16E_Dev_t *flash) {
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
    LL_GPIO_ResetOutputPin(flash->cs_port, flash->cs_pin);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f7ff ffe5 	bl	800134c <LL_GPIO_ResetOutputPin>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <CS_HIGH>:

static void CS_HIGH(GD25Q16E_Dev_t *flash) {
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
    LL_GPIO_SetOutputPin(flash->cs_port, flash->cs_pin);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f7ff ffc6 	bl	800132e <LL_GPIO_SetOutputPin>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <SPI_Send>:

static void SPI_Send(GD25Q16E_Dev_t *flash, uint8_t data) {
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	70fb      	strb	r3, [r7, #3]
    while (!LL_SPI_IsActiveFlag_TXE(flash->spi));
 80013b6:	bf00      	nop
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff86 	bl	80012ce <LL_SPI_IsActiveFlag_TXE>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f7      	beq.n	80013b8 <SPI_Send+0xe>
    LL_SPI_TransmitData8(flash->spi, data);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	78fa      	ldrb	r2, [r7, #3]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff9b 	bl	800130c <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_RXNE(flash->spi));
 80013d6:	bf00      	nop
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff64 	bl	80012aa <LL_SPI_IsActiveFlag_RXNE>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f7      	beq.n	80013d8 <SPI_Send+0x2e>
    (void)LL_SPI_ReceiveData8(flash->spi);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff80 	bl	80012f2 <LL_SPI_ReceiveData8>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <SPI_Transceive>:

static uint8_t SPI_Transceive(GD25Q16E_Dev_t *flash, uint8_t data) {
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	70fb      	strb	r3, [r7, #3]
    while (!LL_SPI_IsActiveFlag_TXE(flash->spi));
 8001406:	bf00      	nop
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5e 	bl	80012ce <LL_SPI_IsActiveFlag_TXE>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f7      	beq.n	8001408 <SPI_Transceive+0xe>
    LL_SPI_TransmitData8(flash->spi, data);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff73 	bl	800130c <LL_SPI_TransmitData8>
    while (!LL_SPI_IsActiveFlag_RXNE(flash->spi));
 8001426:	bf00      	nop
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff3c 	bl	80012aa <LL_SPI_IsActiveFlag_RXNE>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f7      	beq.n	8001428 <SPI_Transceive+0x2e>
    return LL_SPI_ReceiveData8(flash->spi);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff58 	bl	80012f2 <LL_SPI_ReceiveData8>
 8001442:	4603      	mov	r3, r0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <SPI_ReadBuffer>:

static void SPI_ReadBuffer(GD25Q16E_Dev_t *flash, uint8_t *buf, uint32_t len) {
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
    while (len--) {
 8001458:	e008      	b.n	800146c <SPI_ReadBuffer+0x20>
        *buf++ = SPI_Transceive(flash, 0xFF);
 800145a:	68bc      	ldr	r4, [r7, #8]
 800145c:	1c63      	adds	r3, r4, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	21ff      	movs	r1, #255	@ 0xff
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7ff ffc9 	bl	80013fa <SPI_Transceive>
 8001468:	4603      	mov	r3, r0
 800146a:	7023      	strb	r3, [r4, #0]
    while (len--) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	1e5a      	subs	r2, r3, #1
 8001470:	607a      	str	r2, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f1      	bne.n	800145a <SPI_ReadBuffer+0xe>
    }
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}

08001480 <SPI_WriteBuffer>:

static void SPI_WriteBuffer(GD25Q16E_Dev_t *flash, const uint8_t *buf, uint32_t len) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
    while (len--) {
 800148c:	e007      	b.n	800149e <SPI_WriteBuffer+0x1e>
        SPI_Transceive(flash, *buf++);
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	60ba      	str	r2, [r7, #8]
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff ffae 	bl	80013fa <SPI_Transceive>
    while (len--) {
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	1e5a      	subs	r2, r3, #1
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f2      	bne.n	800148e <SPI_WriteBuffer+0xe>
    }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <GD25Q16E_WriteEnable>:

static void GD25Q16E_WriteEnable(GD25Q16E_Dev_t *flash) {
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
    CS_LOW(flash);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff55 	bl	800136a <CS_LOW>
    SPI_Send(flash, GD25Q16E_CMD_WRITE_ENABLE);
 80014c0:	2106      	movs	r1, #6
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ff71 	bl	80013aa <SPI_Send>
    CS_HIGH(flash);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff5e 	bl	800138a <CS_HIGH>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <GD25Q16E_ReadStatus>:

static uint8_t GD25Q16E_ReadStatus(GD25Q16E_Dev_t *flash) {
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
    CS_LOW(flash);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff43 	bl	800136a <CS_LOW>
    SPI_Send(flash, GD25Q16E_CMD_READ_STATUS);
 80014e4:	2105      	movs	r1, #5
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ff5f 	bl	80013aa <SPI_Send>
    uint8_t status = SPI_Transceive(flash, 0xFF);
 80014ec:	21ff      	movs	r1, #255	@ 0xff
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff83 	bl	80013fa <SPI_Transceive>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
    CS_HIGH(flash);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff46 	bl	800138a <CS_HIGH>
    return status;
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <GD25Q16E_WaitBusy>:

static void GD25Q16E_WaitBusy(GD25Q16E_Dev_t *flash) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
    while (GD25Q16E_ReadStatus(flash) & 0x01);
 8001510:	bf00      	nop
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7ff ffdf 	bl	80014d6 <GD25Q16E_ReadStatus>
 8001518:	4603      	mov	r3, r0
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f7      	bne.n	8001512 <GD25Q16E_WaitBusy+0xa>
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <GD25Q16E_Init>:

void GD25Q16E_Init(GD25Q16E_Dev_t *flash) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
    CS_HIGH(flash);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff28 	bl	800138a <CS_HIGH>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <GD25Q16E_Read>:
    uint8_t id3 = SPI_Transceive(flash, 0xFF);
    CS_HIGH(flash);
    return (id1 << 16) | (id2 << 8) | id3;
}

void GD25Q16E_Read(GD25Q16E_Dev_t *flash, uint32_t addr, uint8_t *data, uint32_t len) {
 8001542:	b580      	push	{r7, lr}
 8001544:	b084      	sub	sp, #16
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	603b      	str	r3, [r7, #0]
    CS_LOW(flash);
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f7ff ff0a 	bl	800136a <CS_LOW>
    SPI_Send(flash, GD25Q16E_CMD_READ_DATA);
 8001556:	2103      	movs	r1, #3
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff ff26 	bl	80013aa <SPI_Send>
    SPI_Send(flash, (addr >> 16) & 0xFF);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	0c1b      	lsrs	r3, r3, #16
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4619      	mov	r1, r3
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff ff1f 	bl	80013aa <SPI_Send>
    SPI_Send(flash, (addr >> 8) & 0xFF);
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff ff18 	bl	80013aa <SPI_Send>
    SPI_Send(flash, addr & 0xFF);
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4619      	mov	r1, r3
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff ff12 	bl	80013aa <SPI_Send>
    SPI_ReadBuffer(flash, data, len);
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f7ff ff5e 	bl	800144c <SPI_ReadBuffer>
    CS_HIGH(flash);
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f7ff fefa 	bl	800138a <CS_HIGH>
}
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <GD25Q16E_Write>:

void GD25Q16E_Write(GD25Q16E_Dev_t *flash, uint32_t addr, const uint8_t *data, uint32_t len) {
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	603b      	str	r3, [r7, #0]
    while (len > 0) {
 80015ac:	e041      	b.n	8001632 <GD25Q16E_Write+0x94>
        uint32_t page_offset = addr % GD25Q16E_PAGE_SIZE;
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	613b      	str	r3, [r7, #16]
        uint32_t write_size = GD25Q16E_PAGE_SIZE - page_offset;
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80015ba:	617b      	str	r3, [r7, #20]
        if (write_size > len) write_size = len;
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d901      	bls.n	80015c8 <GD25Q16E_Write+0x2a>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	617b      	str	r3, [r7, #20]

        GD25Q16E_WriteEnable(flash);
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff ff72 	bl	80014b2 <GD25Q16E_WriteEnable>

        CS_LOW(flash);
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff fecb 	bl	800136a <CS_LOW>
        SPI_Send(flash, GD25Q16E_CMD_PAGE_PROGRAM);
 80015d4:	2102      	movs	r1, #2
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7ff fee7 	bl	80013aa <SPI_Send>
        SPI_Send(flash, (addr >> 16) & 0xFF);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	0c1b      	lsrs	r3, r3, #16
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fee0 	bl	80013aa <SPI_Send>
        SPI_Send(flash, (addr >> 8) & 0xFF);
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4619      	mov	r1, r3
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7ff fed9 	bl	80013aa <SPI_Send>
        SPI_Send(flash, addr & 0xFF);
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4619      	mov	r1, r3
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f7ff fed3 	bl	80013aa <SPI_Send>
        SPI_WriteBuffer(flash, data, write_size);
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff ff39 	bl	8001480 <SPI_WriteBuffer>
        CS_HIGH(flash);
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f7ff febb 	bl	800138a <CS_HIGH>

        GD25Q16E_WaitBusy(flash);
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff ff77 	bl	8001508 <GD25Q16E_WaitBusy>

        addr += write_size;
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	4413      	add	r3, r2
 8001620:	60bb      	str	r3, [r7, #8]
        data += write_size;
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	4413      	add	r3, r2
 8001628:	607b      	str	r3, [r7, #4]
        len -= write_size;
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	603b      	str	r3, [r7, #0]
    while (len > 0) {
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ba      	bne.n	80015ae <GD25Q16E_Write+0x10>
    }
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <GD25Q16E_EraseSector>:

void GD25Q16E_EraseSector(GD25Q16E_Dev_t *flash, uint32_t addr) {
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
    GD25Q16E_WriteEnable(flash);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff30 	bl	80014b2 <GD25Q16E_WriteEnable>
    CS_LOW(flash);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fe89 	bl	800136a <CS_LOW>
    SPI_Send(flash, GD25Q16E_CMD_SECTOR_ERASE);
 8001658:	2120      	movs	r1, #32
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff fea5 	bl	80013aa <SPI_Send>
    SPI_Send(flash, (addr >> 16) & 0xFF);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	0c1b      	lsrs	r3, r3, #16
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4619      	mov	r1, r3
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fe9e 	bl	80013aa <SPI_Send>
    SPI_Send(flash, (addr >> 8) & 0xFF);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	b2db      	uxtb	r3, r3
 8001674:	4619      	mov	r1, r3
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fe97 	bl	80013aa <SPI_Send>
    SPI_Send(flash, addr & 0xFF);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4619      	mov	r1, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fe91 	bl	80013aa <SPI_Send>
    CS_HIGH(flash);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fe7e 	bl	800138a <CS_HIGH>
    GD25Q16E_WaitBusy(flash);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff3a 	bl	8001508 <GD25Q16E_WaitBusy>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <song_erase>:

uint32_t song_index = 0;
uint8_t song_data[SONG_DATA_SIZE_LONG];
uint8_t song_name[SONG_NAME_SIZE] = "New Song";

void song_erase(uint8_t song_index) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	uint32_t block_size = song_index < 5 ? SONG_BLOCK_LONG : SONG_BLOCK_SHORT;
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d802      	bhi.n	80016b2 <song_erase+0x16>
 80016ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016b0:	e001      	b.n	80016b6 <song_erase+0x1a>
 80016b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b6:	60bb      	str	r3, [r7, #8]
	for (uint32_t addr = SONG_NAME_START[song_index]; addr < SONG_NAME_START[song_index] + block_size; addr += 4096) {
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <song_erase+0x54>)
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	e007      	b.n	80016d4 <song_erase+0x38>
	    GD25Q16E_EraseSector(&flash, addr);
 80016c4:	68f9      	ldr	r1, [r7, #12]
 80016c6:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <song_erase+0x58>)
 80016c8:	f7ff ffbb 	bl	8001642 <GD25Q16E_EraseSector>
	for (uint32_t addr = SONG_NAME_START[song_index]; addr < SONG_NAME_START[song_index] + block_size; addr += 4096) {
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4a06      	ldr	r2, [pc, #24]	@ (80016f0 <song_erase+0x54>)
 80016d8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4413      	add	r3, r2
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d3ee      	bcc.n	80016c4 <song_erase+0x28>
	}
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	08002b7c 	.word	0x08002b7c
 80016f4:	20000000 	.word	0x20000000

080016f8 <song_write>:

void song_write(GD25Q16E_Dev_t *flash, uint32_t song_index) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
    if (song_index >= SONG_COUNT) return;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b31      	cmp	r3, #49	@ 0x31
 8001706:	d821      	bhi.n	800174c <song_write+0x54>

    song_erase(song_index);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ffc5 	bl	800169c <song_erase>

    GD25Q16E_Write(flash, SONG_NAME_START[song_index], song_name, SONG_NAME_SIZE);
 8001712:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <song_write+0x5c>)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800171a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800171e:	4a0e      	ldr	r2, [pc, #56]	@ (8001758 <song_write+0x60>)
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff ff3c 	bl	800159e <GD25Q16E_Write>

    uint32_t data_size = song_index < 5 ? SONG_DATA_SIZE_LONG : SONG_DATA_SIZE_SHORT;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d802      	bhi.n	8001732 <song_write+0x3a>
 800172c:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8001730:	e001      	b.n	8001736 <song_write+0x3e>
 8001732:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001736:	60fb      	str	r3, [r7, #12]
    GD25Q16E_Write(flash, SONG_DATA_START[song_index], song_data, data_size);
 8001738:	4a08      	ldr	r2, [pc, #32]	@ (800175c <song_write+0x64>)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <song_write+0x68>)
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff2a 	bl	800159e <GD25Q16E_Write>
 800174a:	e000      	b.n	800174e <song_write+0x56>
    if (song_index >= SONG_COUNT) return;
 800174c:	bf00      	nop
}
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	08002b7c 	.word	0x08002b7c
 8001758:	20000010 	.word	0x20000010
 800175c:	08002c44 	.word	0x08002c44
 8001760:	200002b4 	.word	0x200002b4

08001764 <LL_GPIO_IsInputPinSet>:
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	43da      	mvns	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	0a1b      	lsrs	r3, r3, #8
 8001778:	4013      	ands	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <TTP229_Read_8Keys>:
//    while (!LL_TIM_IsActiveFlag_UPDATE(TIM4));
//    // Stop the timer
//    LL_TIM_DisableCounter(TIM4);
//}

uint8_t TTP229_Read_8Keys(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
//        }
//        TTP229_Delay_us(50);
//    }
//    return key_state;

    uint8_t key_state = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ0_GPIO_Port, KQ0_Pin))
 800179a:	f640 0108 	movw	r1, #2056	@ 0x808
 800179e:	482a      	ldr	r0, [pc, #168]	@ (8001848 <TTP229_Read_8Keys+0xb8>)
 80017a0:	f7ff ffe0 	bl	8001764 <LL_GPIO_IsInputPinSet>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d103      	bne.n	80017b2 <TTP229_Read_8Keys+0x22>
    	key_state |= 1;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ1_GPIO_Port, KQ1_Pin))
 80017b2:	f241 0110 	movw	r1, #4112	@ 0x1010
 80017b6:	4824      	ldr	r0, [pc, #144]	@ (8001848 <TTP229_Read_8Keys+0xb8>)
 80017b8:	f7ff ffd4 	bl	8001764 <LL_GPIO_IsInputPinSet>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d103      	bne.n	80017ca <TTP229_Read_8Keys+0x3a>
		key_state |= 2;
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ2_GPIO_Port, KQ2_Pin))
 80017ca:	f242 0120 	movw	r1, #8224	@ 0x2020
 80017ce:	481e      	ldr	r0, [pc, #120]	@ (8001848 <TTP229_Read_8Keys+0xb8>)
 80017d0:	f7ff ffc8 	bl	8001764 <LL_GPIO_IsInputPinSet>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <TTP229_Read_8Keys+0x52>
		key_state |= 4;
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ3_GPIO_Port, KQ3_Pin))
 80017e2:	f244 0140 	movw	r1, #16448	@ 0x4040
 80017e6:	4818      	ldr	r0, [pc, #96]	@ (8001848 <TTP229_Read_8Keys+0xb8>)
 80017e8:	f7ff ffbc 	bl	8001764 <LL_GPIO_IsInputPinSet>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d103      	bne.n	80017fa <TTP229_Read_8Keys+0x6a>
		key_state |= 8;
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f043 0308 	orr.w	r3, r3, #8
 80017f8:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ4_GPIO_Port, KQ4_Pin))
 80017fa:	f248 0180 	movw	r1, #32896	@ 0x8080
 80017fe:	4812      	ldr	r0, [pc, #72]	@ (8001848 <TTP229_Read_8Keys+0xb8>)
 8001800:	f7ff ffb0 	bl	8001764 <LL_GPIO_IsInputPinSet>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d103      	bne.n	8001812 <TTP229_Read_8Keys+0x82>
		key_state |= 16;
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ5_GPIO_Port, KQ5_Pin))
 8001812:	490e      	ldr	r1, [pc, #56]	@ (800184c <TTP229_Read_8Keys+0xbc>)
 8001814:	480c      	ldr	r0, [pc, #48]	@ (8001848 <TTP229_Read_8Keys+0xb8>)
 8001816:	f7ff ffa5 	bl	8001764 <LL_GPIO_IsInputPinSet>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d103      	bne.n	8001828 <TTP229_Read_8Keys+0x98>
		key_state |= 32;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f043 0320 	orr.w	r3, r3, #32
 8001826:	71fb      	strb	r3, [r7, #7]
    if (!LL_GPIO_IsInputPinSet(KQ6_GPIO_Port, KQ6_Pin))
 8001828:	4909      	ldr	r1, [pc, #36]	@ (8001850 <TTP229_Read_8Keys+0xc0>)
 800182a:	4807      	ldr	r0, [pc, #28]	@ (8001848 <TTP229_Read_8Keys+0xb8>)
 800182c:	f7ff ff9a 	bl	8001764 <LL_GPIO_IsInputPinSet>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <TTP229_Read_8Keys+0xae>
		key_state |= 64;
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800183c:	71fb      	strb	r3, [r7, #7]
    return key_state;
 800183e:	79fb      	ldrb	r3, [r7, #7]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40010c00 	.word	0x40010c00
 800184c:	04010001 	.word	0x04010001
 8001850:	04020002 	.word	0x04020002

08001854 <LL_GPIO_SetPinMode>:
{
 8001854:	b490      	push	{r4, r7}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	461a      	mov	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	0e1b      	lsrs	r3, r3, #24
 8001868:	4413      	add	r3, r2
 800186a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800186c:	6822      	ldr	r2, [r4, #0]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	fa93 f3a3 	rbit	r3, r3
 8001878:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	210f      	movs	r1, #15
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	401a      	ands	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	61bb      	str	r3, [r7, #24]
  return result;
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	fab3 f383 	clz	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	4313      	orrs	r3, r2
 80018ac:	6023      	str	r3, [r4, #0]
}
 80018ae:	bf00      	nop
 80018b0:	3720      	adds	r7, #32
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc90      	pop	{r4, r7}
 80018b6:	4770      	bx	lr

080018b8 <LL_GPIO_SetPinSpeed>:
{
 80018b8:	b490      	push	{r4, r7}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	0e1b      	lsrs	r3, r3, #24
 80018cc:	4413      	add	r3, r2
 80018ce:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80018d0:	6822      	ldr	r2, [r4, #0]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	613b      	str	r3, [r7, #16]
  return result;
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	2103      	movs	r1, #3
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	401a      	ands	r2, r3
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	61bb      	str	r3, [r7, #24]
  return result;
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	4313      	orrs	r3, r2
 8001910:	6023      	str	r3, [r4, #0]
}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bc90      	pop	{r4, r7}
 800191a:	4770      	bx	lr

0800191c <LL_GPIO_SetPinOutputType>:
{
 800191c:	b490      	push	{r4, r7}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	461a      	mov	r2, r3
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	0e1b      	lsrs	r3, r3, #24
 8001930:	4413      	add	r3, r2
 8001932:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8001934:	6822      	ldr	r2, [r4, #0]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	613b      	str	r3, [r7, #16]
  return result;
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	2104      	movs	r1, #4
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	401a      	ands	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa93 f3a3 	rbit	r3, r3
 8001960:	61bb      	str	r3, [r7, #24]
  return result;
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	fa01 f303 	lsl.w	r3, r1, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	6023      	str	r3, [r4, #0]
}
 8001976:	bf00      	nop
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bc90      	pop	{r4, r7}
 800197e:	4770      	bx	lr

08001980 <LL_GPIO_SetPinPull>:
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fa93 f3a3 	rbit	r3, r3
 80019a4:	613b      	str	r3, [r7, #16]
  return result;
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fab3 f383 	clz	r3, r3
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4619      	mov	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	408b      	lsls	r3, r1
 80019b4:	431a      	orrs	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	60da      	str	r2, [r3, #12]
}
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	0c1b      	lsrs	r3, r3, #16
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	60fb      	str	r3, [r7, #12]
  return result;
 80019e4:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80019ee:	e044      	b.n	8001a7a <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80019f0:	2201      	movs	r2, #1
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	409a      	lsls	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03a      	beq.n	8001a74 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2b07      	cmp	r3, #7
 8001a02:	d806      	bhi.n	8001a12 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8001a04:	f240 1201 	movw	r2, #257	@ 0x101
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	61bb      	str	r3, [r7, #24]
 8001a10:	e008      	b.n	8001a24 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b08      	subs	r3, #8
 8001a16:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a22:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b08      	cmp	r3, #8
 8001a2a:	d106      	bne.n	8001a3a <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	461a      	mov	r2, r3
 8001a32:	69b9      	ldr	r1, [r7, #24]
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ffa3 	bl	8001980 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	69b9      	ldr	r1, [r7, #24]
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ff06 	bl	8001854 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d003      	beq.n	8001a58 <LL_GPIO_Init+0x94>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d10d      	bne.n	8001a74 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	69b9      	ldr	r1, [r7, #24]
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff29 	bl	80018b8 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	69b9      	ldr	r1, [r7, #24]
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ff54 	bl	800191c <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1b4      	bne.n	80019f0 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <LL_RCC_GetSysClkSource>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a94:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <LL_RCC_GetSysClkSource+0x14>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <LL_RCC_GetAHBPrescaler>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <LL_RCC_GetAHBPrescaler+0x14>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000

08001ac0 <LL_RCC_GetAPB1Prescaler>:
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001ac4:	4b03      	ldr	r3, [pc, #12]	@ (8001ad4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <LL_RCC_GetAPB2Prescaler>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001adc:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <LL_RCC_GetAPB2Prescaler+0x14>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000

08001af0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <LL_RCC_PLL_GetMainSource+0x14>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40021000 	.word	0x40021000

08001b08 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000

08001b20 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8001b24:	4b04      	ldr	r3, [pc, #16]	@ (8001b38 <LL_RCC_PLL_GetPrediv+0x18>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	0c5b      	lsrs	r3, r3, #17
 8001b2a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000

08001b3c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001b44:	f000 f820 	bl	8001b88 <RCC_GetSystemClockFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f83e 	bl	8001bd4 <RCC_GetHCLKClockFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f84c 	bl	8001c00 <RCC_GetPCLK1ClockFreq>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f858 	bl	8001c28 <RCC_GetPCLK2ClockFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60da      	str	r2, [r3, #12]
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001b92:	f7ff ff7d 	bl	8001a90 <LL_RCC_GetSysClkSource>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d00c      	beq.n	8001bb6 <RCC_GetSystemClockFreq+0x2e>
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d80e      	bhi.n	8001bbe <RCC_GetSystemClockFreq+0x36>
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <RCC_GetSystemClockFreq+0x22>
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d003      	beq.n	8001bb0 <RCC_GetSystemClockFreq+0x28>
 8001ba8:	e009      	b.n	8001bbe <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001baa:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <RCC_GetSystemClockFreq+0x48>)
 8001bac:	607b      	str	r3, [r7, #4]
      break;
 8001bae:	e009      	b.n	8001bc4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <RCC_GetSystemClockFreq+0x48>)
 8001bb2:	607b      	str	r3, [r7, #4]
      break;
 8001bb4:	e006      	b.n	8001bc4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001bb6:	f000 f84b 	bl	8001c50 <RCC_PLL_GetFreqDomain_SYS>
 8001bba:	6078      	str	r0, [r7, #4]
      break;
 8001bbc:	e002      	b.n	8001bc4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001bbe:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <RCC_GetSystemClockFreq+0x48>)
 8001bc0:	607b      	str	r3, [r7, #4]
      break;
 8001bc2:	bf00      	nop
  }

  return frequency;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	007a1200 	.word	0x007a1200

08001bd4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001bdc:	f7ff ff64 	bl	8001aa8 <LL_RCC_GetAHBPrescaler>
 8001be0:	4603      	mov	r3, r0
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <RCC_GetHCLKClockFreq+0x28>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	461a      	mov	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	40d3      	lsrs	r3, r2
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	08002b64 	.word	0x08002b64

08001c00 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001c08:	f7ff ff5a 	bl	8001ac0 <LL_RCC_GetAPB1Prescaler>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <RCC_GetPCLK1ClockFreq+0x24>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	461a      	mov	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	40d3      	lsrs	r3, r2
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	08002b74 	.word	0x08002b74

08001c28 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001c30:	f7ff ff52 	bl	8001ad8 <LL_RCC_GetAPB2Prescaler>
 8001c34:	4603      	mov	r3, r0
 8001c36:	0adb      	lsrs	r3, r3, #11
 8001c38:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <RCC_GetPCLK2ClockFreq+0x24>)
 8001c3a:	5cd3      	ldrb	r3, [r2, r3]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	40d3      	lsrs	r3, r2
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	08002b74 	.word	0x08002b74

08001c50 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001c5e:	f7ff ff47 	bl	8001af0 <LL_RCC_PLL_GetMainSource>
 8001c62:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d004      	beq.n	8001c74 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c70:	d003      	beq.n	8001c7a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001c72:	e00b      	b.n	8001c8c <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001c76:	607b      	str	r3, [r7, #4]
      break;
 8001c78:	e00b      	b.n	8001c92 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8001c7a:	f7ff ff51 	bl	8001b20 <LL_RCC_PLL_GetPrediv>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	3301      	adds	r3, #1
 8001c82:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8001c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c88:	607b      	str	r3, [r7, #4]
      break;
 8001c8a:	e002      	b.n	8001c92 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8001c8e:	607b      	str	r3, [r7, #4]
      break;
 8001c90:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8001c92:	f7ff ff39 	bl	8001b08 <LL_RCC_PLL_GetMultiplicator>
 8001c96:	4603      	mov	r3, r0
 8001c98:	0c9b      	lsrs	r3, r3, #18
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	003d0900 	.word	0x003d0900
 8001cb0:	007a1200 	.word	0x007a1200

08001cb4 <LL_SPI_IsEnabled>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc4:	2b40      	cmp	r3, #64	@ 0x40
 8001cc6:	d101      	bne.n	8001ccc <LL_SPI_IsEnabled+0x18>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <LL_SPI_IsEnabled+0x1a>
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <LL_SPI_SetCRCPolynomial>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	611a      	str	r2, [r3, #16]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ffd5 	bl	8001cb4 <LL_SPI_IsEnabled>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d139      	bne.n	8001d84 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d18:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	6811      	ldr	r1, [r2, #0]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	6852      	ldr	r2, [r2, #4]
 8001d24:	4311      	orrs	r1, r2
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	6892      	ldr	r2, [r2, #8]
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	68d2      	ldr	r2, [r2, #12]
 8001d30:	4311      	orrs	r1, r2
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	6912      	ldr	r2, [r2, #16]
 8001d36:	4311      	orrs	r1, r2
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	6952      	ldr	r2, [r2, #20]
 8001d3c:	4311      	orrs	r1, r2
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	6992      	ldr	r2, [r2, #24]
 8001d42:	4311      	orrs	r1, r2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	69d2      	ldr	r2, [r2, #28]
 8001d48:	4311      	orrs	r1, r2
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	6a12      	ldr	r2, [r2, #32]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f023 0204 	bic.w	r2, r3, #4
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	0c1b      	lsrs	r3, r3, #16
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d72:	d105      	bne.n	8001d80 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ffac 	bl	8001cd8 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <LL_TIM_SetPrescaler>:
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <LL_TIM_SetAutoReload>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <LL_TIM_SetRepetitionCounter>:
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	615a      	str	r2, [r3, #20]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
	...

08001e08 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a31      	ldr	r2, [pc, #196]	@ (8001ee0 <LL_TIM_Init+0xd8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <LL_TIM_Init+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a30      	ldr	r2, [pc, #192]	@ (8001ee4 <LL_TIM_Init+0xdc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00f      	beq.n	8001e48 <LL_TIM_Init+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e2e:	d00b      	beq.n	8001e48 <LL_TIM_Init+0x40>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee8 <LL_TIM_Init+0xe0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d007      	beq.n	8001e48 <LL_TIM_Init+0x40>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001eec <LL_TIM_Init+0xe4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d003      	beq.n	8001e48 <LL_TIM_Init+0x40>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef0 <LL_TIM_Init+0xe8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d106      	bne.n	8001e56 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a21      	ldr	r2, [pc, #132]	@ (8001ee0 <LL_TIM_Init+0xd8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <LL_TIM_Init+0x7e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a20      	ldr	r2, [pc, #128]	@ (8001ee4 <LL_TIM_Init+0xdc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00f      	beq.n	8001e86 <LL_TIM_Init+0x7e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e6c:	d00b      	beq.n	8001e86 <LL_TIM_Init+0x7e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee8 <LL_TIM_Init+0xe0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <LL_TIM_Init+0x7e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1c      	ldr	r2, [pc, #112]	@ (8001eec <LL_TIM_Init+0xe4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d003      	beq.n	8001e86 <LL_TIM_Init+0x7e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef0 <LL_TIM_Init+0xe8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d106      	bne.n	8001e94 <LL_TIM_Init+0x8c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff87 	bl	8001db4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff74 	bl	8001d9a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <LL_TIM_Init+0xd8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d003      	beq.n	8001ec2 <LL_TIM_Init+0xba>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a09      	ldr	r2, [pc, #36]	@ (8001ee4 <LL_TIM_Init+0xdc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d105      	bne.n	8001ece <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff80 	bl	8001dce <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ff8a 	bl	8001de8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40013400 	.word	0x40013400
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00

08001ef4 <LL_USART_IsEnabled>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <LL_USART_SetStopBitsLength>:
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	611a      	str	r2, [r3, #16]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <LL_USART_SetHWFlowCtrl>:
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	615a      	str	r2, [r3, #20]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
	...

08001f64 <LL_USART_SetBaudRate>:
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	009a      	lsls	r2, r3, #2
 8001f7a:	441a      	add	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f84:	4a25      	ldr	r2, [pc, #148]	@ (800201c <LL_USART_SetBaudRate+0xb8>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	095b      	lsrs	r3, r3, #5
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	b299      	uxth	r1, r3
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	009a      	lsls	r2, r3, #2
 8001f9c:	441a      	add	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800201c <LL_USART_SetBaudRate+0xb8>)
 8001fa8:	fba3 0302 	umull	r0, r3, r3, r2
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	2064      	movs	r0, #100	@ 0x64
 8001fb0:	fb00 f303 	mul.w	r3, r0, r3
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	011b      	lsls	r3, r3, #4
 8001fb8:	3332      	adds	r3, #50	@ 0x32
 8001fba:	4a18      	ldr	r2, [pc, #96]	@ (800201c <LL_USART_SetBaudRate+0xb8>)
 8001fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	440b      	add	r3, r1
 8001fcc:	b299      	uxth	r1, r3
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009a      	lsls	r2, r3, #2
 8001fd8:	441a      	add	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <LL_USART_SetBaudRate+0xb8>)
 8001fe4:	fba3 0302 	umull	r0, r3, r3, r2
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	2064      	movs	r0, #100	@ 0x64
 8001fec:	fb00 f303 	mul.w	r3, r0, r3
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	3332      	adds	r3, #50	@ 0x32
 8001ff6:	4a09      	ldr	r2, [pc, #36]	@ (800201c <LL_USART_SetBaudRate+0xb8>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	b29b      	uxth	r3, r3
 8002006:	440b      	add	r3, r1
 8002008:	b29b      	uxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	609a      	str	r2, [r3, #8]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	51eb851f 	.word	0x51eb851f

08002020 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ff5e 	bl	8001ef4 <LL_USART_IsEnabled>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d153      	bne.n	80020e6 <LL_USART_Init+0xc6>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002046:	f023 030c 	bic.w	r3, r3, #12
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	6851      	ldr	r1, [r2, #4]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	68d2      	ldr	r2, [r2, #12]
 8002052:	4311      	orrs	r1, r2
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	6912      	ldr	r2, [r2, #16]
 8002058:	430a      	orrs	r2, r1
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4619      	mov	r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ff57 	bl	8001f1a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ff63 	bl	8001f3e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fd5d 	bl	8001b3c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1a      	ldr	r2, [pc, #104]	@ (80020f0 <LL_USART_Init+0xd0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d102      	bne.n	8002090 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e01a      	b.n	80020c6 <LL_USART_Init+0xa6>
    }
    else if (USARTx == USART2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a18      	ldr	r2, [pc, #96]	@ (80020f4 <LL_USART_Init+0xd4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d102      	bne.n	800209e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	e013      	b.n	80020c6 <LL_USART_Init+0xa6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a15      	ldr	r2, [pc, #84]	@ (80020f8 <LL_USART_Init+0xd8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d102      	bne.n	80020ac <LL_USART_Init+0x8c>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	e00c      	b.n	80020c6 <LL_USART_Init+0xa6>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a13      	ldr	r2, [pc, #76]	@ (80020fc <LL_USART_Init+0xdc>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d102      	bne.n	80020ba <LL_USART_Init+0x9a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	e005      	b.n	80020c6 <LL_USART_Init+0xa6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a10      	ldr	r2, [pc, #64]	@ (8002100 <LL_USART_Init+0xe0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <LL_USART_Init+0xa6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00c      	beq.n	80020e6 <LL_USART_Init+0xc6>
        && (USART_InitStruct->BaudRate != 0U))
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <LL_USART_Init+0xc6>
    {
      status = SUCCESS;
 80020d4:	2300      	movs	r3, #0
 80020d6:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80020dc:	461a      	mov	r2, r3
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff3f 	bl	8001f64 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80020e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3720      	adds	r7, #32
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40004400 	.word	0x40004400
 80020f8:	40004800 	.word	0x40004800
 80020fc:	40004c00 	.word	0x40004c00
 8002100:	40005000 	.word	0x40005000

08002104 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	fbb2 f3f3 	udiv	r3, r2, r3
 8002116:	4a07      	ldr	r2, [pc, #28]	@ (8002134 <LL_InitTick+0x30>)
 8002118:	3b01      	subs	r3, #1
 800211a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800211c:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <LL_InitTick+0x30>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002122:	4b04      	ldr	r3, [pc, #16]	@ (8002134 <LL_InitTick+0x30>)
 8002124:	2205      	movs	r2, #5
 8002126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e010 	.word	0xe000e010

08002138 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002140:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ffdd 	bl	8002104 <LL_InitTick>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800215c:	4b0e      	ldr	r3, [pc, #56]	@ (8002198 <LL_mDelay+0x44>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002162:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d00c      	beq.n	8002186 <LL_mDelay+0x32>
  {
    Delay++;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3301      	adds	r3, #1
 8002170:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002172:	e008      	b.n	8002186 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <LL_mDelay+0x44>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <LL_mDelay+0x32>
    {
      Delay--;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f3      	bne.n	8002174 <LL_mDelay+0x20>
    }
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	e000e010 	.word	0xe000e010

0800219c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80021a4:	4a03      	ldr	r2, [pc, #12]	@ (80021b4 <LL_SetSystemCoreClock+0x18>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6013      	str	r3, [r2, #0]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	2000000c 	.word	0x2000000c

080021b8 <sniprintf>:
 80021b8:	b40c      	push	{r2, r3}
 80021ba:	b530      	push	{r4, r5, lr}
 80021bc:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <sniprintf+0x68>)
 80021be:	1e0c      	subs	r4, r1, #0
 80021c0:	681d      	ldr	r5, [r3, #0]
 80021c2:	b09d      	sub	sp, #116	@ 0x74
 80021c4:	da08      	bge.n	80021d8 <sniprintf+0x20>
 80021c6:	238b      	movs	r3, #139	@ 0x8b
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	602b      	str	r3, [r5, #0]
 80021ce:	b01d      	add	sp, #116	@ 0x74
 80021d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021d4:	b002      	add	sp, #8
 80021d6:	4770      	bx	lr
 80021d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80021dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80021e6:	bf0c      	ite	eq
 80021e8:	4623      	moveq	r3, r4
 80021ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80021ee:	9304      	str	r3, [sp, #16]
 80021f0:	9307      	str	r3, [sp, #28]
 80021f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021f6:	9002      	str	r0, [sp, #8]
 80021f8:	9006      	str	r0, [sp, #24]
 80021fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80021fe:	4628      	mov	r0, r5
 8002200:	ab21      	add	r3, sp, #132	@ 0x84
 8002202:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002204:	a902      	add	r1, sp, #8
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	f000 f9a0 	bl	800254c <_svfiprintf_r>
 800220c:	1c43      	adds	r3, r0, #1
 800220e:	bfbc      	itt	lt
 8002210:	238b      	movlt	r3, #139	@ 0x8b
 8002212:	602b      	strlt	r3, [r5, #0]
 8002214:	2c00      	cmp	r4, #0
 8002216:	d0da      	beq.n	80021ce <sniprintf+0x16>
 8002218:	2200      	movs	r2, #0
 800221a:	9b02      	ldr	r3, [sp, #8]
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e7d6      	b.n	80021ce <sniprintf+0x16>
 8002220:	20000210 	.word	0x20000210

08002224 <memset>:
 8002224:	4603      	mov	r3, r0
 8002226:	4402      	add	r2, r0
 8002228:	4293      	cmp	r3, r2
 800222a:	d100      	bne.n	800222e <memset+0xa>
 800222c:	4770      	bx	lr
 800222e:	f803 1b01 	strb.w	r1, [r3], #1
 8002232:	e7f9      	b.n	8002228 <memset+0x4>

08002234 <__errno>:
 8002234:	4b01      	ldr	r3, [pc, #4]	@ (800223c <__errno+0x8>)
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000210 	.word	0x20000210

08002240 <__libc_init_array>:
 8002240:	b570      	push	{r4, r5, r6, lr}
 8002242:	2600      	movs	r6, #0
 8002244:	4d0c      	ldr	r5, [pc, #48]	@ (8002278 <__libc_init_array+0x38>)
 8002246:	4c0d      	ldr	r4, [pc, #52]	@ (800227c <__libc_init_array+0x3c>)
 8002248:	1b64      	subs	r4, r4, r5
 800224a:	10a4      	asrs	r4, r4, #2
 800224c:	42a6      	cmp	r6, r4
 800224e:	d109      	bne.n	8002264 <__libc_init_array+0x24>
 8002250:	f000 fc76 	bl	8002b40 <_init>
 8002254:	2600      	movs	r6, #0
 8002256:	4d0a      	ldr	r5, [pc, #40]	@ (8002280 <__libc_init_array+0x40>)
 8002258:	4c0a      	ldr	r4, [pc, #40]	@ (8002284 <__libc_init_array+0x44>)
 800225a:	1b64      	subs	r4, r4, r5
 800225c:	10a4      	asrs	r4, r4, #2
 800225e:	42a6      	cmp	r6, r4
 8002260:	d105      	bne.n	800226e <__libc_init_array+0x2e>
 8002262:	bd70      	pop	{r4, r5, r6, pc}
 8002264:	f855 3b04 	ldr.w	r3, [r5], #4
 8002268:	4798      	blx	r3
 800226a:	3601      	adds	r6, #1
 800226c:	e7ee      	b.n	800224c <__libc_init_array+0xc>
 800226e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002272:	4798      	blx	r3
 8002274:	3601      	adds	r6, #1
 8002276:	e7f2      	b.n	800225e <__libc_init_array+0x1e>
 8002278:	08002d48 	.word	0x08002d48
 800227c:	08002d48 	.word	0x08002d48
 8002280:	08002d48 	.word	0x08002d48
 8002284:	08002d4c 	.word	0x08002d4c

08002288 <__retarget_lock_acquire_recursive>:
 8002288:	4770      	bx	lr

0800228a <__retarget_lock_release_recursive>:
 800228a:	4770      	bx	lr

0800228c <memcpy>:
 800228c:	440a      	add	r2, r1
 800228e:	4291      	cmp	r1, r2
 8002290:	f100 33ff 	add.w	r3, r0, #4294967295
 8002294:	d100      	bne.n	8002298 <memcpy+0xc>
 8002296:	4770      	bx	lr
 8002298:	b510      	push	{r4, lr}
 800229a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800229e:	4291      	cmp	r1, r2
 80022a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80022a4:	d1f9      	bne.n	800229a <memcpy+0xe>
 80022a6:	bd10      	pop	{r4, pc}

080022a8 <_free_r>:
 80022a8:	b538      	push	{r3, r4, r5, lr}
 80022aa:	4605      	mov	r5, r0
 80022ac:	2900      	cmp	r1, #0
 80022ae:	d040      	beq.n	8002332 <_free_r+0x8a>
 80022b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022b4:	1f0c      	subs	r4, r1, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bfb8      	it	lt
 80022ba:	18e4      	addlt	r4, r4, r3
 80022bc:	f000 f8de 	bl	800247c <__malloc_lock>
 80022c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002334 <_free_r+0x8c>)
 80022c2:	6813      	ldr	r3, [r2, #0]
 80022c4:	b933      	cbnz	r3, 80022d4 <_free_r+0x2c>
 80022c6:	6063      	str	r3, [r4, #4]
 80022c8:	6014      	str	r4, [r2, #0]
 80022ca:	4628      	mov	r0, r5
 80022cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022d0:	f000 b8da 	b.w	8002488 <__malloc_unlock>
 80022d4:	42a3      	cmp	r3, r4
 80022d6:	d908      	bls.n	80022ea <_free_r+0x42>
 80022d8:	6820      	ldr	r0, [r4, #0]
 80022da:	1821      	adds	r1, r4, r0
 80022dc:	428b      	cmp	r3, r1
 80022de:	bf01      	itttt	eq
 80022e0:	6819      	ldreq	r1, [r3, #0]
 80022e2:	685b      	ldreq	r3, [r3, #4]
 80022e4:	1809      	addeq	r1, r1, r0
 80022e6:	6021      	streq	r1, [r4, #0]
 80022e8:	e7ed      	b.n	80022c6 <_free_r+0x1e>
 80022ea:	461a      	mov	r2, r3
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	b10b      	cbz	r3, 80022f4 <_free_r+0x4c>
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	d9fa      	bls.n	80022ea <_free_r+0x42>
 80022f4:	6811      	ldr	r1, [r2, #0]
 80022f6:	1850      	adds	r0, r2, r1
 80022f8:	42a0      	cmp	r0, r4
 80022fa:	d10b      	bne.n	8002314 <_free_r+0x6c>
 80022fc:	6820      	ldr	r0, [r4, #0]
 80022fe:	4401      	add	r1, r0
 8002300:	1850      	adds	r0, r2, r1
 8002302:	4283      	cmp	r3, r0
 8002304:	6011      	str	r1, [r2, #0]
 8002306:	d1e0      	bne.n	80022ca <_free_r+0x22>
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4408      	add	r0, r1
 800230e:	6010      	str	r0, [r2, #0]
 8002310:	6053      	str	r3, [r2, #4]
 8002312:	e7da      	b.n	80022ca <_free_r+0x22>
 8002314:	d902      	bls.n	800231c <_free_r+0x74>
 8002316:	230c      	movs	r3, #12
 8002318:	602b      	str	r3, [r5, #0]
 800231a:	e7d6      	b.n	80022ca <_free_r+0x22>
 800231c:	6820      	ldr	r0, [r4, #0]
 800231e:	1821      	adds	r1, r4, r0
 8002320:	428b      	cmp	r3, r1
 8002322:	bf01      	itttt	eq
 8002324:	6819      	ldreq	r1, [r3, #0]
 8002326:	685b      	ldreq	r3, [r3, #4]
 8002328:	1809      	addeq	r1, r1, r0
 800232a:	6021      	streq	r1, [r4, #0]
 800232c:	6063      	str	r3, [r4, #4]
 800232e:	6054      	str	r4, [r2, #4]
 8002330:	e7cb      	b.n	80022ca <_free_r+0x22>
 8002332:	bd38      	pop	{r3, r4, r5, pc}
 8002334:	200032d8 	.word	0x200032d8

08002338 <sbrk_aligned>:
 8002338:	b570      	push	{r4, r5, r6, lr}
 800233a:	4e0f      	ldr	r6, [pc, #60]	@ (8002378 <sbrk_aligned+0x40>)
 800233c:	460c      	mov	r4, r1
 800233e:	6831      	ldr	r1, [r6, #0]
 8002340:	4605      	mov	r5, r0
 8002342:	b911      	cbnz	r1, 800234a <sbrk_aligned+0x12>
 8002344:	f000 fba8 	bl	8002a98 <_sbrk_r>
 8002348:	6030      	str	r0, [r6, #0]
 800234a:	4621      	mov	r1, r4
 800234c:	4628      	mov	r0, r5
 800234e:	f000 fba3 	bl	8002a98 <_sbrk_r>
 8002352:	1c43      	adds	r3, r0, #1
 8002354:	d103      	bne.n	800235e <sbrk_aligned+0x26>
 8002356:	f04f 34ff 	mov.w	r4, #4294967295
 800235a:	4620      	mov	r0, r4
 800235c:	bd70      	pop	{r4, r5, r6, pc}
 800235e:	1cc4      	adds	r4, r0, #3
 8002360:	f024 0403 	bic.w	r4, r4, #3
 8002364:	42a0      	cmp	r0, r4
 8002366:	d0f8      	beq.n	800235a <sbrk_aligned+0x22>
 8002368:	1a21      	subs	r1, r4, r0
 800236a:	4628      	mov	r0, r5
 800236c:	f000 fb94 	bl	8002a98 <_sbrk_r>
 8002370:	3001      	adds	r0, #1
 8002372:	d1f2      	bne.n	800235a <sbrk_aligned+0x22>
 8002374:	e7ef      	b.n	8002356 <sbrk_aligned+0x1e>
 8002376:	bf00      	nop
 8002378:	200032d4 	.word	0x200032d4

0800237c <_malloc_r>:
 800237c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002380:	1ccd      	adds	r5, r1, #3
 8002382:	f025 0503 	bic.w	r5, r5, #3
 8002386:	3508      	adds	r5, #8
 8002388:	2d0c      	cmp	r5, #12
 800238a:	bf38      	it	cc
 800238c:	250c      	movcc	r5, #12
 800238e:	2d00      	cmp	r5, #0
 8002390:	4606      	mov	r6, r0
 8002392:	db01      	blt.n	8002398 <_malloc_r+0x1c>
 8002394:	42a9      	cmp	r1, r5
 8002396:	d904      	bls.n	80023a2 <_malloc_r+0x26>
 8002398:	230c      	movs	r3, #12
 800239a:	6033      	str	r3, [r6, #0]
 800239c:	2000      	movs	r0, #0
 800239e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002478 <_malloc_r+0xfc>
 80023a6:	f000 f869 	bl	800247c <__malloc_lock>
 80023aa:	f8d8 3000 	ldr.w	r3, [r8]
 80023ae:	461c      	mov	r4, r3
 80023b0:	bb44      	cbnz	r4, 8002404 <_malloc_r+0x88>
 80023b2:	4629      	mov	r1, r5
 80023b4:	4630      	mov	r0, r6
 80023b6:	f7ff ffbf 	bl	8002338 <sbrk_aligned>
 80023ba:	1c43      	adds	r3, r0, #1
 80023bc:	4604      	mov	r4, r0
 80023be:	d158      	bne.n	8002472 <_malloc_r+0xf6>
 80023c0:	f8d8 4000 	ldr.w	r4, [r8]
 80023c4:	4627      	mov	r7, r4
 80023c6:	2f00      	cmp	r7, #0
 80023c8:	d143      	bne.n	8002452 <_malloc_r+0xd6>
 80023ca:	2c00      	cmp	r4, #0
 80023cc:	d04b      	beq.n	8002466 <_malloc_r+0xea>
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	4639      	mov	r1, r7
 80023d2:	4630      	mov	r0, r6
 80023d4:	eb04 0903 	add.w	r9, r4, r3
 80023d8:	f000 fb5e 	bl	8002a98 <_sbrk_r>
 80023dc:	4581      	cmp	r9, r0
 80023de:	d142      	bne.n	8002466 <_malloc_r+0xea>
 80023e0:	6821      	ldr	r1, [r4, #0]
 80023e2:	4630      	mov	r0, r6
 80023e4:	1a6d      	subs	r5, r5, r1
 80023e6:	4629      	mov	r1, r5
 80023e8:	f7ff ffa6 	bl	8002338 <sbrk_aligned>
 80023ec:	3001      	adds	r0, #1
 80023ee:	d03a      	beq.n	8002466 <_malloc_r+0xea>
 80023f0:	6823      	ldr	r3, [r4, #0]
 80023f2:	442b      	add	r3, r5
 80023f4:	6023      	str	r3, [r4, #0]
 80023f6:	f8d8 3000 	ldr.w	r3, [r8]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	bb62      	cbnz	r2, 8002458 <_malloc_r+0xdc>
 80023fe:	f8c8 7000 	str.w	r7, [r8]
 8002402:	e00f      	b.n	8002424 <_malloc_r+0xa8>
 8002404:	6822      	ldr	r2, [r4, #0]
 8002406:	1b52      	subs	r2, r2, r5
 8002408:	d420      	bmi.n	800244c <_malloc_r+0xd0>
 800240a:	2a0b      	cmp	r2, #11
 800240c:	d917      	bls.n	800243e <_malloc_r+0xc2>
 800240e:	1961      	adds	r1, r4, r5
 8002410:	42a3      	cmp	r3, r4
 8002412:	6025      	str	r5, [r4, #0]
 8002414:	bf18      	it	ne
 8002416:	6059      	strne	r1, [r3, #4]
 8002418:	6863      	ldr	r3, [r4, #4]
 800241a:	bf08      	it	eq
 800241c:	f8c8 1000 	streq.w	r1, [r8]
 8002420:	5162      	str	r2, [r4, r5]
 8002422:	604b      	str	r3, [r1, #4]
 8002424:	4630      	mov	r0, r6
 8002426:	f000 f82f 	bl	8002488 <__malloc_unlock>
 800242a:	f104 000b 	add.w	r0, r4, #11
 800242e:	1d23      	adds	r3, r4, #4
 8002430:	f020 0007 	bic.w	r0, r0, #7
 8002434:	1ac2      	subs	r2, r0, r3
 8002436:	bf1c      	itt	ne
 8002438:	1a1b      	subne	r3, r3, r0
 800243a:	50a3      	strne	r3, [r4, r2]
 800243c:	e7af      	b.n	800239e <_malloc_r+0x22>
 800243e:	6862      	ldr	r2, [r4, #4]
 8002440:	42a3      	cmp	r3, r4
 8002442:	bf0c      	ite	eq
 8002444:	f8c8 2000 	streq.w	r2, [r8]
 8002448:	605a      	strne	r2, [r3, #4]
 800244a:	e7eb      	b.n	8002424 <_malloc_r+0xa8>
 800244c:	4623      	mov	r3, r4
 800244e:	6864      	ldr	r4, [r4, #4]
 8002450:	e7ae      	b.n	80023b0 <_malloc_r+0x34>
 8002452:	463c      	mov	r4, r7
 8002454:	687f      	ldr	r7, [r7, #4]
 8002456:	e7b6      	b.n	80023c6 <_malloc_r+0x4a>
 8002458:	461a      	mov	r2, r3
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	42a3      	cmp	r3, r4
 800245e:	d1fb      	bne.n	8002458 <_malloc_r+0xdc>
 8002460:	2300      	movs	r3, #0
 8002462:	6053      	str	r3, [r2, #4]
 8002464:	e7de      	b.n	8002424 <_malloc_r+0xa8>
 8002466:	230c      	movs	r3, #12
 8002468:	4630      	mov	r0, r6
 800246a:	6033      	str	r3, [r6, #0]
 800246c:	f000 f80c 	bl	8002488 <__malloc_unlock>
 8002470:	e794      	b.n	800239c <_malloc_r+0x20>
 8002472:	6005      	str	r5, [r0, #0]
 8002474:	e7d6      	b.n	8002424 <_malloc_r+0xa8>
 8002476:	bf00      	nop
 8002478:	200032d8 	.word	0x200032d8

0800247c <__malloc_lock>:
 800247c:	4801      	ldr	r0, [pc, #4]	@ (8002484 <__malloc_lock+0x8>)
 800247e:	f7ff bf03 	b.w	8002288 <__retarget_lock_acquire_recursive>
 8002482:	bf00      	nop
 8002484:	200032d0 	.word	0x200032d0

08002488 <__malloc_unlock>:
 8002488:	4801      	ldr	r0, [pc, #4]	@ (8002490 <__malloc_unlock+0x8>)
 800248a:	f7ff befe 	b.w	800228a <__retarget_lock_release_recursive>
 800248e:	bf00      	nop
 8002490:	200032d0 	.word	0x200032d0

08002494 <__ssputs_r>:
 8002494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002498:	461f      	mov	r7, r3
 800249a:	688e      	ldr	r6, [r1, #8]
 800249c:	4682      	mov	sl, r0
 800249e:	42be      	cmp	r6, r7
 80024a0:	460c      	mov	r4, r1
 80024a2:	4690      	mov	r8, r2
 80024a4:	680b      	ldr	r3, [r1, #0]
 80024a6:	d82d      	bhi.n	8002504 <__ssputs_r+0x70>
 80024a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80024ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80024b0:	d026      	beq.n	8002500 <__ssputs_r+0x6c>
 80024b2:	6965      	ldr	r5, [r4, #20]
 80024b4:	6909      	ldr	r1, [r1, #16]
 80024b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024ba:	eba3 0901 	sub.w	r9, r3, r1
 80024be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024c2:	1c7b      	adds	r3, r7, #1
 80024c4:	444b      	add	r3, r9
 80024c6:	106d      	asrs	r5, r5, #1
 80024c8:	429d      	cmp	r5, r3
 80024ca:	bf38      	it	cc
 80024cc:	461d      	movcc	r5, r3
 80024ce:	0553      	lsls	r3, r2, #21
 80024d0:	d527      	bpl.n	8002522 <__ssputs_r+0x8e>
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7ff ff52 	bl	800237c <_malloc_r>
 80024d8:	4606      	mov	r6, r0
 80024da:	b360      	cbz	r0, 8002536 <__ssputs_r+0xa2>
 80024dc:	464a      	mov	r2, r9
 80024de:	6921      	ldr	r1, [r4, #16]
 80024e0:	f7ff fed4 	bl	800228c <memcpy>
 80024e4:	89a3      	ldrh	r3, [r4, #12]
 80024e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80024ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ee:	81a3      	strh	r3, [r4, #12]
 80024f0:	6126      	str	r6, [r4, #16]
 80024f2:	444e      	add	r6, r9
 80024f4:	6026      	str	r6, [r4, #0]
 80024f6:	463e      	mov	r6, r7
 80024f8:	6165      	str	r5, [r4, #20]
 80024fa:	eba5 0509 	sub.w	r5, r5, r9
 80024fe:	60a5      	str	r5, [r4, #8]
 8002500:	42be      	cmp	r6, r7
 8002502:	d900      	bls.n	8002506 <__ssputs_r+0x72>
 8002504:	463e      	mov	r6, r7
 8002506:	4632      	mov	r2, r6
 8002508:	4641      	mov	r1, r8
 800250a:	6820      	ldr	r0, [r4, #0]
 800250c:	f000 faaa 	bl	8002a64 <memmove>
 8002510:	2000      	movs	r0, #0
 8002512:	68a3      	ldr	r3, [r4, #8]
 8002514:	1b9b      	subs	r3, r3, r6
 8002516:	60a3      	str	r3, [r4, #8]
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	4433      	add	r3, r6
 800251c:	6023      	str	r3, [r4, #0]
 800251e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002522:	462a      	mov	r2, r5
 8002524:	f000 fad6 	bl	8002ad4 <_realloc_r>
 8002528:	4606      	mov	r6, r0
 800252a:	2800      	cmp	r0, #0
 800252c:	d1e0      	bne.n	80024f0 <__ssputs_r+0x5c>
 800252e:	4650      	mov	r0, sl
 8002530:	6921      	ldr	r1, [r4, #16]
 8002532:	f7ff feb9 	bl	80022a8 <_free_r>
 8002536:	230c      	movs	r3, #12
 8002538:	f8ca 3000 	str.w	r3, [sl]
 800253c:	89a3      	ldrh	r3, [r4, #12]
 800253e:	f04f 30ff 	mov.w	r0, #4294967295
 8002542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002546:	81a3      	strh	r3, [r4, #12]
 8002548:	e7e9      	b.n	800251e <__ssputs_r+0x8a>
	...

0800254c <_svfiprintf_r>:
 800254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002550:	4698      	mov	r8, r3
 8002552:	898b      	ldrh	r3, [r1, #12]
 8002554:	4607      	mov	r7, r0
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	460d      	mov	r5, r1
 800255a:	4614      	mov	r4, r2
 800255c:	b09d      	sub	sp, #116	@ 0x74
 800255e:	d510      	bpl.n	8002582 <_svfiprintf_r+0x36>
 8002560:	690b      	ldr	r3, [r1, #16]
 8002562:	b973      	cbnz	r3, 8002582 <_svfiprintf_r+0x36>
 8002564:	2140      	movs	r1, #64	@ 0x40
 8002566:	f7ff ff09 	bl	800237c <_malloc_r>
 800256a:	6028      	str	r0, [r5, #0]
 800256c:	6128      	str	r0, [r5, #16]
 800256e:	b930      	cbnz	r0, 800257e <_svfiprintf_r+0x32>
 8002570:	230c      	movs	r3, #12
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	b01d      	add	sp, #116	@ 0x74
 800257a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800257e:	2340      	movs	r3, #64	@ 0x40
 8002580:	616b      	str	r3, [r5, #20]
 8002582:	2300      	movs	r3, #0
 8002584:	9309      	str	r3, [sp, #36]	@ 0x24
 8002586:	2320      	movs	r3, #32
 8002588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800258c:	2330      	movs	r3, #48	@ 0x30
 800258e:	f04f 0901 	mov.w	r9, #1
 8002592:	f8cd 800c 	str.w	r8, [sp, #12]
 8002596:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002730 <_svfiprintf_r+0x1e4>
 800259a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800259e:	4623      	mov	r3, r4
 80025a0:	469a      	mov	sl, r3
 80025a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025a6:	b10a      	cbz	r2, 80025ac <_svfiprintf_r+0x60>
 80025a8:	2a25      	cmp	r2, #37	@ 0x25
 80025aa:	d1f9      	bne.n	80025a0 <_svfiprintf_r+0x54>
 80025ac:	ebba 0b04 	subs.w	fp, sl, r4
 80025b0:	d00b      	beq.n	80025ca <_svfiprintf_r+0x7e>
 80025b2:	465b      	mov	r3, fp
 80025b4:	4622      	mov	r2, r4
 80025b6:	4629      	mov	r1, r5
 80025b8:	4638      	mov	r0, r7
 80025ba:	f7ff ff6b 	bl	8002494 <__ssputs_r>
 80025be:	3001      	adds	r0, #1
 80025c0:	f000 80a7 	beq.w	8002712 <_svfiprintf_r+0x1c6>
 80025c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80025c6:	445a      	add	r2, fp
 80025c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80025ca:	f89a 3000 	ldrb.w	r3, [sl]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 809f 	beq.w	8002712 <_svfiprintf_r+0x1c6>
 80025d4:	2300      	movs	r3, #0
 80025d6:	f04f 32ff 	mov.w	r2, #4294967295
 80025da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025de:	f10a 0a01 	add.w	sl, sl, #1
 80025e2:	9304      	str	r3, [sp, #16]
 80025e4:	9307      	str	r3, [sp, #28]
 80025e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80025ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80025ec:	4654      	mov	r4, sl
 80025ee:	2205      	movs	r2, #5
 80025f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025f4:	484e      	ldr	r0, [pc, #312]	@ (8002730 <_svfiprintf_r+0x1e4>)
 80025f6:	f000 fa5f 	bl	8002ab8 <memchr>
 80025fa:	9a04      	ldr	r2, [sp, #16]
 80025fc:	b9d8      	cbnz	r0, 8002636 <_svfiprintf_r+0xea>
 80025fe:	06d0      	lsls	r0, r2, #27
 8002600:	bf44      	itt	mi
 8002602:	2320      	movmi	r3, #32
 8002604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002608:	0711      	lsls	r1, r2, #28
 800260a:	bf44      	itt	mi
 800260c:	232b      	movmi	r3, #43	@ 0x2b
 800260e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002612:	f89a 3000 	ldrb.w	r3, [sl]
 8002616:	2b2a      	cmp	r3, #42	@ 0x2a
 8002618:	d015      	beq.n	8002646 <_svfiprintf_r+0xfa>
 800261a:	4654      	mov	r4, sl
 800261c:	2000      	movs	r0, #0
 800261e:	f04f 0c0a 	mov.w	ip, #10
 8002622:	9a07      	ldr	r2, [sp, #28]
 8002624:	4621      	mov	r1, r4
 8002626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800262a:	3b30      	subs	r3, #48	@ 0x30
 800262c:	2b09      	cmp	r3, #9
 800262e:	d94b      	bls.n	80026c8 <_svfiprintf_r+0x17c>
 8002630:	b1b0      	cbz	r0, 8002660 <_svfiprintf_r+0x114>
 8002632:	9207      	str	r2, [sp, #28]
 8002634:	e014      	b.n	8002660 <_svfiprintf_r+0x114>
 8002636:	eba0 0308 	sub.w	r3, r0, r8
 800263a:	fa09 f303 	lsl.w	r3, r9, r3
 800263e:	4313      	orrs	r3, r2
 8002640:	46a2      	mov	sl, r4
 8002642:	9304      	str	r3, [sp, #16]
 8002644:	e7d2      	b.n	80025ec <_svfiprintf_r+0xa0>
 8002646:	9b03      	ldr	r3, [sp, #12]
 8002648:	1d19      	adds	r1, r3, #4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	9103      	str	r1, [sp, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	bfbb      	ittet	lt
 8002652:	425b      	neglt	r3, r3
 8002654:	f042 0202 	orrlt.w	r2, r2, #2
 8002658:	9307      	strge	r3, [sp, #28]
 800265a:	9307      	strlt	r3, [sp, #28]
 800265c:	bfb8      	it	lt
 800265e:	9204      	strlt	r2, [sp, #16]
 8002660:	7823      	ldrb	r3, [r4, #0]
 8002662:	2b2e      	cmp	r3, #46	@ 0x2e
 8002664:	d10a      	bne.n	800267c <_svfiprintf_r+0x130>
 8002666:	7863      	ldrb	r3, [r4, #1]
 8002668:	2b2a      	cmp	r3, #42	@ 0x2a
 800266a:	d132      	bne.n	80026d2 <_svfiprintf_r+0x186>
 800266c:	9b03      	ldr	r3, [sp, #12]
 800266e:	3402      	adds	r4, #2
 8002670:	1d1a      	adds	r2, r3, #4
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	9203      	str	r2, [sp, #12]
 8002676:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800267a:	9305      	str	r3, [sp, #20]
 800267c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002734 <_svfiprintf_r+0x1e8>
 8002680:	2203      	movs	r2, #3
 8002682:	4650      	mov	r0, sl
 8002684:	7821      	ldrb	r1, [r4, #0]
 8002686:	f000 fa17 	bl	8002ab8 <memchr>
 800268a:	b138      	cbz	r0, 800269c <_svfiprintf_r+0x150>
 800268c:	2240      	movs	r2, #64	@ 0x40
 800268e:	9b04      	ldr	r3, [sp, #16]
 8002690:	eba0 000a 	sub.w	r0, r0, sl
 8002694:	4082      	lsls	r2, r0
 8002696:	4313      	orrs	r3, r2
 8002698:	3401      	adds	r4, #1
 800269a:	9304      	str	r3, [sp, #16]
 800269c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026a0:	2206      	movs	r2, #6
 80026a2:	4825      	ldr	r0, [pc, #148]	@ (8002738 <_svfiprintf_r+0x1ec>)
 80026a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80026a8:	f000 fa06 	bl	8002ab8 <memchr>
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d036      	beq.n	800271e <_svfiprintf_r+0x1d2>
 80026b0:	4b22      	ldr	r3, [pc, #136]	@ (800273c <_svfiprintf_r+0x1f0>)
 80026b2:	bb1b      	cbnz	r3, 80026fc <_svfiprintf_r+0x1b0>
 80026b4:	9b03      	ldr	r3, [sp, #12]
 80026b6:	3307      	adds	r3, #7
 80026b8:	f023 0307 	bic.w	r3, r3, #7
 80026bc:	3308      	adds	r3, #8
 80026be:	9303      	str	r3, [sp, #12]
 80026c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026c2:	4433      	add	r3, r6
 80026c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80026c6:	e76a      	b.n	800259e <_svfiprintf_r+0x52>
 80026c8:	460c      	mov	r4, r1
 80026ca:	2001      	movs	r0, #1
 80026cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80026d0:	e7a8      	b.n	8002624 <_svfiprintf_r+0xd8>
 80026d2:	2300      	movs	r3, #0
 80026d4:	f04f 0c0a 	mov.w	ip, #10
 80026d8:	4619      	mov	r1, r3
 80026da:	3401      	adds	r4, #1
 80026dc:	9305      	str	r3, [sp, #20]
 80026de:	4620      	mov	r0, r4
 80026e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026e4:	3a30      	subs	r2, #48	@ 0x30
 80026e6:	2a09      	cmp	r2, #9
 80026e8:	d903      	bls.n	80026f2 <_svfiprintf_r+0x1a6>
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0c6      	beq.n	800267c <_svfiprintf_r+0x130>
 80026ee:	9105      	str	r1, [sp, #20]
 80026f0:	e7c4      	b.n	800267c <_svfiprintf_r+0x130>
 80026f2:	4604      	mov	r4, r0
 80026f4:	2301      	movs	r3, #1
 80026f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80026fa:	e7f0      	b.n	80026de <_svfiprintf_r+0x192>
 80026fc:	ab03      	add	r3, sp, #12
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	462a      	mov	r2, r5
 8002702:	4638      	mov	r0, r7
 8002704:	4b0e      	ldr	r3, [pc, #56]	@ (8002740 <_svfiprintf_r+0x1f4>)
 8002706:	a904      	add	r1, sp, #16
 8002708:	f3af 8000 	nop.w
 800270c:	1c42      	adds	r2, r0, #1
 800270e:	4606      	mov	r6, r0
 8002710:	d1d6      	bne.n	80026c0 <_svfiprintf_r+0x174>
 8002712:	89ab      	ldrh	r3, [r5, #12]
 8002714:	065b      	lsls	r3, r3, #25
 8002716:	f53f af2d 	bmi.w	8002574 <_svfiprintf_r+0x28>
 800271a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800271c:	e72c      	b.n	8002578 <_svfiprintf_r+0x2c>
 800271e:	ab03      	add	r3, sp, #12
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	462a      	mov	r2, r5
 8002724:	4638      	mov	r0, r7
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <_svfiprintf_r+0x1f4>)
 8002728:	a904      	add	r1, sp, #16
 800272a:	f000 f87d 	bl	8002828 <_printf_i>
 800272e:	e7ed      	b.n	800270c <_svfiprintf_r+0x1c0>
 8002730:	08002d0c 	.word	0x08002d0c
 8002734:	08002d12 	.word	0x08002d12
 8002738:	08002d16 	.word	0x08002d16
 800273c:	00000000 	.word	0x00000000
 8002740:	08002495 	.word	0x08002495

08002744 <_printf_common>:
 8002744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002748:	4616      	mov	r6, r2
 800274a:	4698      	mov	r8, r3
 800274c:	688a      	ldr	r2, [r1, #8]
 800274e:	690b      	ldr	r3, [r1, #16]
 8002750:	4607      	mov	r7, r0
 8002752:	4293      	cmp	r3, r2
 8002754:	bfb8      	it	lt
 8002756:	4613      	movlt	r3, r2
 8002758:	6033      	str	r3, [r6, #0]
 800275a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800275e:	460c      	mov	r4, r1
 8002760:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002764:	b10a      	cbz	r2, 800276a <_printf_common+0x26>
 8002766:	3301      	adds	r3, #1
 8002768:	6033      	str	r3, [r6, #0]
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	0699      	lsls	r1, r3, #26
 800276e:	bf42      	ittt	mi
 8002770:	6833      	ldrmi	r3, [r6, #0]
 8002772:	3302      	addmi	r3, #2
 8002774:	6033      	strmi	r3, [r6, #0]
 8002776:	6825      	ldr	r5, [r4, #0]
 8002778:	f015 0506 	ands.w	r5, r5, #6
 800277c:	d106      	bne.n	800278c <_printf_common+0x48>
 800277e:	f104 0a19 	add.w	sl, r4, #25
 8002782:	68e3      	ldr	r3, [r4, #12]
 8002784:	6832      	ldr	r2, [r6, #0]
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	42ab      	cmp	r3, r5
 800278a:	dc2b      	bgt.n	80027e4 <_printf_common+0xa0>
 800278c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002790:	6822      	ldr	r2, [r4, #0]
 8002792:	3b00      	subs	r3, #0
 8002794:	bf18      	it	ne
 8002796:	2301      	movne	r3, #1
 8002798:	0692      	lsls	r2, r2, #26
 800279a:	d430      	bmi.n	80027fe <_printf_common+0xba>
 800279c:	4641      	mov	r1, r8
 800279e:	4638      	mov	r0, r7
 80027a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80027a4:	47c8      	blx	r9
 80027a6:	3001      	adds	r0, #1
 80027a8:	d023      	beq.n	80027f2 <_printf_common+0xae>
 80027aa:	6823      	ldr	r3, [r4, #0]
 80027ac:	6922      	ldr	r2, [r4, #16]
 80027ae:	f003 0306 	and.w	r3, r3, #6
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	bf14      	ite	ne
 80027b6:	2500      	movne	r5, #0
 80027b8:	6833      	ldreq	r3, [r6, #0]
 80027ba:	f04f 0600 	mov.w	r6, #0
 80027be:	bf08      	it	eq
 80027c0:	68e5      	ldreq	r5, [r4, #12]
 80027c2:	f104 041a 	add.w	r4, r4, #26
 80027c6:	bf08      	it	eq
 80027c8:	1aed      	subeq	r5, r5, r3
 80027ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80027ce:	bf08      	it	eq
 80027d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027d4:	4293      	cmp	r3, r2
 80027d6:	bfc4      	itt	gt
 80027d8:	1a9b      	subgt	r3, r3, r2
 80027da:	18ed      	addgt	r5, r5, r3
 80027dc:	42b5      	cmp	r5, r6
 80027de:	d11a      	bne.n	8002816 <_printf_common+0xd2>
 80027e0:	2000      	movs	r0, #0
 80027e2:	e008      	b.n	80027f6 <_printf_common+0xb2>
 80027e4:	2301      	movs	r3, #1
 80027e6:	4652      	mov	r2, sl
 80027e8:	4641      	mov	r1, r8
 80027ea:	4638      	mov	r0, r7
 80027ec:	47c8      	blx	r9
 80027ee:	3001      	adds	r0, #1
 80027f0:	d103      	bne.n	80027fa <_printf_common+0xb6>
 80027f2:	f04f 30ff 	mov.w	r0, #4294967295
 80027f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027fa:	3501      	adds	r5, #1
 80027fc:	e7c1      	b.n	8002782 <_printf_common+0x3e>
 80027fe:	2030      	movs	r0, #48	@ 0x30
 8002800:	18e1      	adds	r1, r4, r3
 8002802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800280c:	4422      	add	r2, r4
 800280e:	3302      	adds	r3, #2
 8002810:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002814:	e7c2      	b.n	800279c <_printf_common+0x58>
 8002816:	2301      	movs	r3, #1
 8002818:	4622      	mov	r2, r4
 800281a:	4641      	mov	r1, r8
 800281c:	4638      	mov	r0, r7
 800281e:	47c8      	blx	r9
 8002820:	3001      	adds	r0, #1
 8002822:	d0e6      	beq.n	80027f2 <_printf_common+0xae>
 8002824:	3601      	adds	r6, #1
 8002826:	e7d9      	b.n	80027dc <_printf_common+0x98>

08002828 <_printf_i>:
 8002828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800282c:	7e0f      	ldrb	r7, [r1, #24]
 800282e:	4691      	mov	r9, r2
 8002830:	2f78      	cmp	r7, #120	@ 0x78
 8002832:	4680      	mov	r8, r0
 8002834:	460c      	mov	r4, r1
 8002836:	469a      	mov	sl, r3
 8002838:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800283a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800283e:	d807      	bhi.n	8002850 <_printf_i+0x28>
 8002840:	2f62      	cmp	r7, #98	@ 0x62
 8002842:	d80a      	bhi.n	800285a <_printf_i+0x32>
 8002844:	2f00      	cmp	r7, #0
 8002846:	f000 80d1 	beq.w	80029ec <_printf_i+0x1c4>
 800284a:	2f58      	cmp	r7, #88	@ 0x58
 800284c:	f000 80b8 	beq.w	80029c0 <_printf_i+0x198>
 8002850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002858:	e03a      	b.n	80028d0 <_printf_i+0xa8>
 800285a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800285e:	2b15      	cmp	r3, #21
 8002860:	d8f6      	bhi.n	8002850 <_printf_i+0x28>
 8002862:	a101      	add	r1, pc, #4	@ (adr r1, 8002868 <_printf_i+0x40>)
 8002864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002868:	080028c1 	.word	0x080028c1
 800286c:	080028d5 	.word	0x080028d5
 8002870:	08002851 	.word	0x08002851
 8002874:	08002851 	.word	0x08002851
 8002878:	08002851 	.word	0x08002851
 800287c:	08002851 	.word	0x08002851
 8002880:	080028d5 	.word	0x080028d5
 8002884:	08002851 	.word	0x08002851
 8002888:	08002851 	.word	0x08002851
 800288c:	08002851 	.word	0x08002851
 8002890:	08002851 	.word	0x08002851
 8002894:	080029d3 	.word	0x080029d3
 8002898:	080028ff 	.word	0x080028ff
 800289c:	0800298d 	.word	0x0800298d
 80028a0:	08002851 	.word	0x08002851
 80028a4:	08002851 	.word	0x08002851
 80028a8:	080029f5 	.word	0x080029f5
 80028ac:	08002851 	.word	0x08002851
 80028b0:	080028ff 	.word	0x080028ff
 80028b4:	08002851 	.word	0x08002851
 80028b8:	08002851 	.word	0x08002851
 80028bc:	08002995 	.word	0x08002995
 80028c0:	6833      	ldr	r3, [r6, #0]
 80028c2:	1d1a      	adds	r2, r3, #4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6032      	str	r2, [r6, #0]
 80028c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028d0:	2301      	movs	r3, #1
 80028d2:	e09c      	b.n	8002a0e <_printf_i+0x1e6>
 80028d4:	6833      	ldr	r3, [r6, #0]
 80028d6:	6820      	ldr	r0, [r4, #0]
 80028d8:	1d19      	adds	r1, r3, #4
 80028da:	6031      	str	r1, [r6, #0]
 80028dc:	0606      	lsls	r6, r0, #24
 80028de:	d501      	bpl.n	80028e4 <_printf_i+0xbc>
 80028e0:	681d      	ldr	r5, [r3, #0]
 80028e2:	e003      	b.n	80028ec <_printf_i+0xc4>
 80028e4:	0645      	lsls	r5, r0, #25
 80028e6:	d5fb      	bpl.n	80028e0 <_printf_i+0xb8>
 80028e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80028ec:	2d00      	cmp	r5, #0
 80028ee:	da03      	bge.n	80028f8 <_printf_i+0xd0>
 80028f0:	232d      	movs	r3, #45	@ 0x2d
 80028f2:	426d      	negs	r5, r5
 80028f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028f8:	230a      	movs	r3, #10
 80028fa:	4858      	ldr	r0, [pc, #352]	@ (8002a5c <_printf_i+0x234>)
 80028fc:	e011      	b.n	8002922 <_printf_i+0xfa>
 80028fe:	6821      	ldr	r1, [r4, #0]
 8002900:	6833      	ldr	r3, [r6, #0]
 8002902:	0608      	lsls	r0, r1, #24
 8002904:	f853 5b04 	ldr.w	r5, [r3], #4
 8002908:	d402      	bmi.n	8002910 <_printf_i+0xe8>
 800290a:	0649      	lsls	r1, r1, #25
 800290c:	bf48      	it	mi
 800290e:	b2ad      	uxthmi	r5, r5
 8002910:	2f6f      	cmp	r7, #111	@ 0x6f
 8002912:	6033      	str	r3, [r6, #0]
 8002914:	bf14      	ite	ne
 8002916:	230a      	movne	r3, #10
 8002918:	2308      	moveq	r3, #8
 800291a:	4850      	ldr	r0, [pc, #320]	@ (8002a5c <_printf_i+0x234>)
 800291c:	2100      	movs	r1, #0
 800291e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002922:	6866      	ldr	r6, [r4, #4]
 8002924:	2e00      	cmp	r6, #0
 8002926:	60a6      	str	r6, [r4, #8]
 8002928:	db05      	blt.n	8002936 <_printf_i+0x10e>
 800292a:	6821      	ldr	r1, [r4, #0]
 800292c:	432e      	orrs	r6, r5
 800292e:	f021 0104 	bic.w	r1, r1, #4
 8002932:	6021      	str	r1, [r4, #0]
 8002934:	d04b      	beq.n	80029ce <_printf_i+0x1a6>
 8002936:	4616      	mov	r6, r2
 8002938:	fbb5 f1f3 	udiv	r1, r5, r3
 800293c:	fb03 5711 	mls	r7, r3, r1, r5
 8002940:	5dc7      	ldrb	r7, [r0, r7]
 8002942:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002946:	462f      	mov	r7, r5
 8002948:	42bb      	cmp	r3, r7
 800294a:	460d      	mov	r5, r1
 800294c:	d9f4      	bls.n	8002938 <_printf_i+0x110>
 800294e:	2b08      	cmp	r3, #8
 8002950:	d10b      	bne.n	800296a <_printf_i+0x142>
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	07df      	lsls	r7, r3, #31
 8002956:	d508      	bpl.n	800296a <_printf_i+0x142>
 8002958:	6923      	ldr	r3, [r4, #16]
 800295a:	6861      	ldr	r1, [r4, #4]
 800295c:	4299      	cmp	r1, r3
 800295e:	bfde      	ittt	le
 8002960:	2330      	movle	r3, #48	@ 0x30
 8002962:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002966:	f106 36ff 	addle.w	r6, r6, #4294967295
 800296a:	1b92      	subs	r2, r2, r6
 800296c:	6122      	str	r2, [r4, #16]
 800296e:	464b      	mov	r3, r9
 8002970:	4621      	mov	r1, r4
 8002972:	4640      	mov	r0, r8
 8002974:	f8cd a000 	str.w	sl, [sp]
 8002978:	aa03      	add	r2, sp, #12
 800297a:	f7ff fee3 	bl	8002744 <_printf_common>
 800297e:	3001      	adds	r0, #1
 8002980:	d14a      	bne.n	8002a18 <_printf_i+0x1f0>
 8002982:	f04f 30ff 	mov.w	r0, #4294967295
 8002986:	b004      	add	sp, #16
 8002988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	f043 0320 	orr.w	r3, r3, #32
 8002992:	6023      	str	r3, [r4, #0]
 8002994:	2778      	movs	r7, #120	@ 0x78
 8002996:	4832      	ldr	r0, [pc, #200]	@ (8002a60 <_printf_i+0x238>)
 8002998:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	6831      	ldr	r1, [r6, #0]
 80029a0:	061f      	lsls	r7, r3, #24
 80029a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80029a6:	d402      	bmi.n	80029ae <_printf_i+0x186>
 80029a8:	065f      	lsls	r7, r3, #25
 80029aa:	bf48      	it	mi
 80029ac:	b2ad      	uxthmi	r5, r5
 80029ae:	6031      	str	r1, [r6, #0]
 80029b0:	07d9      	lsls	r1, r3, #31
 80029b2:	bf44      	itt	mi
 80029b4:	f043 0320 	orrmi.w	r3, r3, #32
 80029b8:	6023      	strmi	r3, [r4, #0]
 80029ba:	b11d      	cbz	r5, 80029c4 <_printf_i+0x19c>
 80029bc:	2310      	movs	r3, #16
 80029be:	e7ad      	b.n	800291c <_printf_i+0xf4>
 80029c0:	4826      	ldr	r0, [pc, #152]	@ (8002a5c <_printf_i+0x234>)
 80029c2:	e7e9      	b.n	8002998 <_printf_i+0x170>
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	f023 0320 	bic.w	r3, r3, #32
 80029ca:	6023      	str	r3, [r4, #0]
 80029cc:	e7f6      	b.n	80029bc <_printf_i+0x194>
 80029ce:	4616      	mov	r6, r2
 80029d0:	e7bd      	b.n	800294e <_printf_i+0x126>
 80029d2:	6833      	ldr	r3, [r6, #0]
 80029d4:	6825      	ldr	r5, [r4, #0]
 80029d6:	1d18      	adds	r0, r3, #4
 80029d8:	6961      	ldr	r1, [r4, #20]
 80029da:	6030      	str	r0, [r6, #0]
 80029dc:	062e      	lsls	r6, r5, #24
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	d501      	bpl.n	80029e6 <_printf_i+0x1be>
 80029e2:	6019      	str	r1, [r3, #0]
 80029e4:	e002      	b.n	80029ec <_printf_i+0x1c4>
 80029e6:	0668      	lsls	r0, r5, #25
 80029e8:	d5fb      	bpl.n	80029e2 <_printf_i+0x1ba>
 80029ea:	8019      	strh	r1, [r3, #0]
 80029ec:	2300      	movs	r3, #0
 80029ee:	4616      	mov	r6, r2
 80029f0:	6123      	str	r3, [r4, #16]
 80029f2:	e7bc      	b.n	800296e <_printf_i+0x146>
 80029f4:	6833      	ldr	r3, [r6, #0]
 80029f6:	2100      	movs	r1, #0
 80029f8:	1d1a      	adds	r2, r3, #4
 80029fa:	6032      	str	r2, [r6, #0]
 80029fc:	681e      	ldr	r6, [r3, #0]
 80029fe:	6862      	ldr	r2, [r4, #4]
 8002a00:	4630      	mov	r0, r6
 8002a02:	f000 f859 	bl	8002ab8 <memchr>
 8002a06:	b108      	cbz	r0, 8002a0c <_printf_i+0x1e4>
 8002a08:	1b80      	subs	r0, r0, r6
 8002a0a:	6060      	str	r0, [r4, #4]
 8002a0c:	6863      	ldr	r3, [r4, #4]
 8002a0e:	6123      	str	r3, [r4, #16]
 8002a10:	2300      	movs	r3, #0
 8002a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a16:	e7aa      	b.n	800296e <_printf_i+0x146>
 8002a18:	4632      	mov	r2, r6
 8002a1a:	4649      	mov	r1, r9
 8002a1c:	4640      	mov	r0, r8
 8002a1e:	6923      	ldr	r3, [r4, #16]
 8002a20:	47d0      	blx	sl
 8002a22:	3001      	adds	r0, #1
 8002a24:	d0ad      	beq.n	8002982 <_printf_i+0x15a>
 8002a26:	6823      	ldr	r3, [r4, #0]
 8002a28:	079b      	lsls	r3, r3, #30
 8002a2a:	d413      	bmi.n	8002a54 <_printf_i+0x22c>
 8002a2c:	68e0      	ldr	r0, [r4, #12]
 8002a2e:	9b03      	ldr	r3, [sp, #12]
 8002a30:	4298      	cmp	r0, r3
 8002a32:	bfb8      	it	lt
 8002a34:	4618      	movlt	r0, r3
 8002a36:	e7a6      	b.n	8002986 <_printf_i+0x15e>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	4632      	mov	r2, r6
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	4640      	mov	r0, r8
 8002a40:	47d0      	blx	sl
 8002a42:	3001      	adds	r0, #1
 8002a44:	d09d      	beq.n	8002982 <_printf_i+0x15a>
 8002a46:	3501      	adds	r5, #1
 8002a48:	68e3      	ldr	r3, [r4, #12]
 8002a4a:	9903      	ldr	r1, [sp, #12]
 8002a4c:	1a5b      	subs	r3, r3, r1
 8002a4e:	42ab      	cmp	r3, r5
 8002a50:	dcf2      	bgt.n	8002a38 <_printf_i+0x210>
 8002a52:	e7eb      	b.n	8002a2c <_printf_i+0x204>
 8002a54:	2500      	movs	r5, #0
 8002a56:	f104 0619 	add.w	r6, r4, #25
 8002a5a:	e7f5      	b.n	8002a48 <_printf_i+0x220>
 8002a5c:	08002d1d 	.word	0x08002d1d
 8002a60:	08002d2e 	.word	0x08002d2e

08002a64 <memmove>:
 8002a64:	4288      	cmp	r0, r1
 8002a66:	b510      	push	{r4, lr}
 8002a68:	eb01 0402 	add.w	r4, r1, r2
 8002a6c:	d902      	bls.n	8002a74 <memmove+0x10>
 8002a6e:	4284      	cmp	r4, r0
 8002a70:	4623      	mov	r3, r4
 8002a72:	d807      	bhi.n	8002a84 <memmove+0x20>
 8002a74:	1e43      	subs	r3, r0, #1
 8002a76:	42a1      	cmp	r1, r4
 8002a78:	d008      	beq.n	8002a8c <memmove+0x28>
 8002a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a82:	e7f8      	b.n	8002a76 <memmove+0x12>
 8002a84:	4601      	mov	r1, r0
 8002a86:	4402      	add	r2, r0
 8002a88:	428a      	cmp	r2, r1
 8002a8a:	d100      	bne.n	8002a8e <memmove+0x2a>
 8002a8c:	bd10      	pop	{r4, pc}
 8002a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a96:	e7f7      	b.n	8002a88 <memmove+0x24>

08002a98 <_sbrk_r>:
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	4d05      	ldr	r5, [pc, #20]	@ (8002ab4 <_sbrk_r+0x1c>)
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	602b      	str	r3, [r5, #0]
 8002aa4:	f7fe fba0 	bl	80011e8 <_sbrk>
 8002aa8:	1c43      	adds	r3, r0, #1
 8002aaa:	d102      	bne.n	8002ab2 <_sbrk_r+0x1a>
 8002aac:	682b      	ldr	r3, [r5, #0]
 8002aae:	b103      	cbz	r3, 8002ab2 <_sbrk_r+0x1a>
 8002ab0:	6023      	str	r3, [r4, #0]
 8002ab2:	bd38      	pop	{r3, r4, r5, pc}
 8002ab4:	200032cc 	.word	0x200032cc

08002ab8 <memchr>:
 8002ab8:	4603      	mov	r3, r0
 8002aba:	b510      	push	{r4, lr}
 8002abc:	b2c9      	uxtb	r1, r1
 8002abe:	4402      	add	r2, r0
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	d101      	bne.n	8002aca <memchr+0x12>
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	e003      	b.n	8002ad2 <memchr+0x1a>
 8002aca:	7804      	ldrb	r4, [r0, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	428c      	cmp	r4, r1
 8002ad0:	d1f6      	bne.n	8002ac0 <memchr+0x8>
 8002ad2:	bd10      	pop	{r4, pc}

08002ad4 <_realloc_r>:
 8002ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad8:	4607      	mov	r7, r0
 8002ada:	4614      	mov	r4, r2
 8002adc:	460d      	mov	r5, r1
 8002ade:	b921      	cbnz	r1, 8002aea <_realloc_r+0x16>
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae6:	f7ff bc49 	b.w	800237c <_malloc_r>
 8002aea:	b92a      	cbnz	r2, 8002af8 <_realloc_r+0x24>
 8002aec:	f7ff fbdc 	bl	80022a8 <_free_r>
 8002af0:	4625      	mov	r5, r4
 8002af2:	4628      	mov	r0, r5
 8002af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002af8:	f000 f81a 	bl	8002b30 <_malloc_usable_size_r>
 8002afc:	4284      	cmp	r4, r0
 8002afe:	4606      	mov	r6, r0
 8002b00:	d802      	bhi.n	8002b08 <_realloc_r+0x34>
 8002b02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b06:	d8f4      	bhi.n	8002af2 <_realloc_r+0x1e>
 8002b08:	4621      	mov	r1, r4
 8002b0a:	4638      	mov	r0, r7
 8002b0c:	f7ff fc36 	bl	800237c <_malloc_r>
 8002b10:	4680      	mov	r8, r0
 8002b12:	b908      	cbnz	r0, 8002b18 <_realloc_r+0x44>
 8002b14:	4645      	mov	r5, r8
 8002b16:	e7ec      	b.n	8002af2 <_realloc_r+0x1e>
 8002b18:	42b4      	cmp	r4, r6
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	bf28      	it	cs
 8002b20:	4632      	movcs	r2, r6
 8002b22:	f7ff fbb3 	bl	800228c <memcpy>
 8002b26:	4629      	mov	r1, r5
 8002b28:	4638      	mov	r0, r7
 8002b2a:	f7ff fbbd 	bl	80022a8 <_free_r>
 8002b2e:	e7f1      	b.n	8002b14 <_realloc_r+0x40>

08002b30 <_malloc_usable_size_r>:
 8002b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b34:	1f18      	subs	r0, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bfbc      	itt	lt
 8002b3a:	580b      	ldrlt	r3, [r1, r0]
 8002b3c:	18c0      	addlt	r0, r0, r3
 8002b3e:	4770      	bx	lr

08002b40 <_init>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	bf00      	nop
 8002b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b46:	bc08      	pop	{r3}
 8002b48:	469e      	mov	lr, r3
 8002b4a:	4770      	bx	lr

08002b4c <_fini>:
 8002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4e:	bf00      	nop
 8002b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b52:	bc08      	pop	{r3}
 8002b54:	469e      	mov	lr, r3
 8002b56:	4770      	bx	lr
